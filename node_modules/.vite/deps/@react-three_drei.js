import {
  Composer,
  MeshLineGeometry,
  MeshLineMaterial,
  Text,
  animated,
  f,
  preloadFont,
  react_merge_refs_esm_default,
  require_lodash,
  require_lodash2,
  require_stats_min,
  useGesture,
  useSpring
} from "./chunk-GG4QYLFF.js";
import {
  require_client
} from "./chunk-JZN3HKVP.js";
import {
  ArcballControls,
  AsciiEffect,
  DRACOLoader,
  DecalGeometry,
  DeviceOrientationControls,
  EffectComposer,
  FBXLoader,
  FirstPersonControls,
  Flow,
  FlyControls,
  FontLoader,
  FullScreenQuad,
  GLTFLoader,
  GammaCorrectionShader,
  GroundProjectedEnv,
  HorizontalBlurShader,
  KTX2Loader,
  Line2,
  LineGeometry,
  LineMaterial,
  LineSegmentsGeometry,
  MapControls,
  MarchingCubes,
  MeshSurfaceSampler,
  MeshoptDecoder,
  OrbitControls,
  PointerLockControls,
  RGBELoader,
  RenderPass,
  SVGLoader,
  SelectionBox,
  ShaderPass,
  SimplexNoise,
  SkeletonUtils,
  Sky,
  TextGeometry,
  TrackballControls,
  TransformControls,
  VerticalBlurShader
} from "./chunk-SD6CSSXR.js";
import {
  require_lodash as require_lodash3
} from "./chunk-SJB2NZBD.js";
import {
  _extends,
  addAfterEffect,
  addEffect,
  applyProps,
  context,
  create,
  createPortal,
  extend,
  useFrame,
  useLoader,
  useThree
} from "./chunk-JLFIAEVS.js";
import {
  AdditiveBlending,
  AlwaysStencilFunc,
  AnimationMixer,
  AudioListener,
  AudioLoader,
  BackSide,
  Box3,
  BufferAttribute,
  BufferGeometry,
  ByteType,
  Camera,
  CanvasTexture,
  CatmullRomCurve3,
  Color,
  CubeCamera,
  CubeReflectionMapping,
  CubeTextureLoader,
  CubicBezierCurve3,
  CylinderGeometry,
  DataTexture,
  DefaultLoadingManager,
  DepthFormat,
  DepthTexture,
  DoubleSide,
  DynamicDrawUsage,
  EdgesGeometry,
  EqualStencilFunc,
  EquirectangularReflectionMapping,
  Euler,
  FloatType,
  FrontSide,
  Group,
  HalfFloatType,
  InstancedBufferAttribute,
  IntType,
  KeepStencilOp,
  Line3,
  LinearEncoding,
  LinearFilter,
  Material,
  MathUtils,
  Matrix4,
  Mesh,
  MeshDepthMaterial,
  MeshPhongMaterial,
  MeshPhysicalMaterial,
  MeshStandardMaterial,
  NearestFilter,
  NoBlending,
  NotEqualStencilFunc,
  Object3D,
  OrthographicCamera,
  PerspectiveCamera,
  Plane,
  PlaneGeometry,
  PointsMaterial,
  QuadraticBezierCurve3,
  Quaternion,
  RGBAFormat,
  RGBAIntegerFormat,
  RGFormat,
  RGIntegerFormat,
  Ray,
  Raycaster,
  RedFormat,
  RedIntegerFormat,
  RepeatWrapping,
  ReplaceStencilOp,
  Scene,
  ShaderChunk,
  ShaderMaterial,
  Shape,
  ShortType,
  Sphere,
  Spherical,
  Texture,
  TextureLoader,
  Triangle,
  Uniform,
  UniformsUtils,
  UnsignedByteType,
  UnsignedIntType,
  UnsignedShortType,
  Vector2,
  Vector3,
  Vector4,
  VideoTexture,
  WebGLCubeRenderTarget,
  WebGLRenderTarget,
  sRGBEncoding
} from "./chunk-KRTSOPLI.js";
import {
  require_react
} from "./chunk-YN3MIK7E.js";
import {
  __toESM
} from "./chunk-4EOJPDL2.js";

// node_modules/@react-three/drei/web/Html.js
var React = __toESM(require_react());
var ReactDOM = __toESM(require_client());
var v1 = new Vector3();
var v2 = new Vector3();
var v3 = new Vector3();
function defaultCalculatePosition(el, camera, size) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  objectPos.project(camera);
  const widthHalf = size.width / 2;
  const heightHalf = size.height / 2;
  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
}
function isObjectBehindCamera(el, camera) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
  const deltaCamObj = objectPos.sub(cameraPos);
  const camDir = camera.getWorldDirection(v3);
  return deltaCamObj.angleTo(camDir) > Math.PI / 2;
}
function isObjectVisible(el, camera, raycaster, occlude) {
  const elPos = v1.setFromMatrixPosition(el.matrixWorld);
  const screenPos = elPos.clone();
  screenPos.project(camera);
  raycaster.setFromCamera(screenPos, camera);
  const intersects = raycaster.intersectObjects(occlude, true);
  if (intersects.length) {
    const intersectionDistance = intersects[0].distance;
    const pointDistance = elPos.distanceTo(raycaster.ray.origin);
    return pointDistance < intersectionDistance;
  }
  return true;
}
function objectScale(el, camera) {
  if (camera instanceof OrthographicCamera) {
    return camera.zoom;
  } else if (camera instanceof PerspectiveCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const vFOV = camera.fov * Math.PI / 180;
    const dist = objectPos.distanceTo(cameraPos);
    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;
    return 1 / scaleFOV;
  } else {
    return 1;
  }
}
function objectZIndex(el, camera, zIndexRange) {
  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const dist = objectPos.distanceTo(cameraPos);
    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
    const B = zIndexRange[1] - A * camera.far;
    return Math.round(A * dist + B);
  }
  return void 0;
}
var epsilon = (value) => Math.abs(value) < 1e-10 ? 0 : value;
function getCSSMatrix(matrix2, multipliers, prepend = "") {
  let matrix3d = "matrix3d(";
  for (let i2 = 0; i2 !== 16; i2++) {
    matrix3d += epsilon(multipliers[i2] * matrix2.elements[i2]) + (i2 !== 15 ? "," : ")");
  }
  return prepend + matrix3d;
}
var getCameraCSSMatrix = ((multipliers) => {
  return (matrix2) => getCSSMatrix(matrix2, multipliers);
})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);
var getObjectCSSMatrix = ((scaleMultipliers) => {
  return (matrix2, factor) => getCSSMatrix(matrix2, scaleMultipliers(factor), "translate(-50%,-50%)");
})((f2) => [1 / f2, 1 / f2, 1 / f2, 1, -1 / f2, -1 / f2, -1 / f2, -1, 1 / f2, 1 / f2, 1 / f2, 1, 1, 1, 1, 1]);
var Html = React.forwardRef(({
  children,
  eps: eps2 = 1e-3,
  style,
  className,
  prepend,
  center,
  fullscreen,
  portal,
  distanceFactor,
  sprite = false,
  transform = false,
  occlude,
  onOcclude,
  zIndexRange = [16777271, 0],
  calculatePosition = defaultCalculatePosition,
  as = "div",
  wrapperClass,
  pointerEvents = "auto",
  ...props
}, ref) => {
  const {
    gl,
    camera,
    scene,
    size,
    raycaster,
    events
  } = useThree();
  const [el] = React.useState(() => document.createElement(as));
  const root = React.useRef();
  const group = React.useRef(null);
  const oldZoom = React.useRef(0);
  const oldPosition = React.useRef([0, 0]);
  const transformOuterRef = React.useRef(null);
  const transformInnerRef = React.useRef(null);
  const target2 = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;
  React.useLayoutEffect(() => {
    if (group.current) {
      const currentRoot = root.current = ReactDOM.createRoot(el);
      scene.updateMatrixWorld();
      if (transform) {
        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;
      } else {
        const vec = calculatePosition(group.current, camera, size);
        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;
      }
      if (target2) {
        if (prepend)
          target2.prepend(el);
        else
          target2.appendChild(el);
      }
      return () => {
        if (target2)
          target2.removeChild(el);
        currentRoot.unmount();
      };
    }
  }, [target2, transform]);
  React.useLayoutEffect(() => {
    if (wrapperClass)
      el.className = wrapperClass;
  }, [wrapperClass]);
  const styles2 = React.useMemo(() => {
    if (transform) {
      return {
        position: "absolute",
        top: 0,
        left: 0,
        width: size.width,
        height: size.height,
        transformStyle: "preserve-3d",
        pointerEvents: "none"
      };
    } else {
      return {
        position: "absolute",
        transform: center ? "translate3d(-50%,-50%,0)" : "none",
        ...fullscreen && {
          top: -size.height / 2,
          left: -size.width / 2,
          width: size.width,
          height: size.height
        },
        ...style
      };
    }
  }, [style, center, fullscreen, size, transform]);
  const transformInnerStyles = React.useMemo(() => ({
    position: "absolute",
    pointerEvents
  }), [pointerEvents]);
  React.useLayoutEffect(() => {
    if (transform) {
      var _root$current;
      (_root$current = root.current) == null ? void 0 : _root$current.render(React.createElement("div", {
        ref: transformOuterRef,
        style: styles2
      }, React.createElement("div", {
        ref: transformInnerRef,
        style: transformInnerStyles
      }, React.createElement("div", {
        ref,
        className,
        style,
        children
      }))));
    } else {
      var _root$current2;
      (_root$current2 = root.current) == null ? void 0 : _root$current2.render(React.createElement("div", {
        ref,
        style: styles2,
        className,
        children
      }));
    }
  });
  const visible = React.useRef(true);
  useFrame(() => {
    if (group.current) {
      camera.updateMatrixWorld();
      group.current.updateWorldMatrix(true, false);
      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);
      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps2 || Math.abs(oldPosition.current[0] - vec[0]) > eps2 || Math.abs(oldPosition.current[1] - vec[1]) > eps2) {
        const isBehindCamera = isObjectBehindCamera(group.current, camera);
        let raytraceTarget = false;
        if (typeof occlude === "boolean") {
          if (occlude === true) {
            raytraceTarget = [scene];
          }
        } else if (Array.isArray(occlude)) {
          raytraceTarget = occlude.map((item) => item.current);
        }
        const previouslyVisible = visible.current;
        if (raytraceTarget) {
          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);
          visible.current = isvisible && !isBehindCamera;
        } else {
          visible.current = !isBehindCamera;
        }
        if (previouslyVisible !== visible.current) {
          if (onOcclude)
            onOcclude(!visible.current);
          else
            el.style.display = visible.current ? "block" : "none";
        }
        el.style.zIndex = `${objectZIndex(group.current, camera, zIndexRange)}`;
        if (transform) {
          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];
          const fov = camera.projectionMatrix.elements[5] * heightHalf;
          const {
            isOrthographicCamera: isOrthographicCamera2,
            top,
            left,
            bottom,
            right
          } = camera;
          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);
          const cameraTransform = isOrthographicCamera2 ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;
          let matrix2 = group.current.matrixWorld;
          if (sprite) {
            matrix2 = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix2).scale(group.current.scale);
            matrix2.elements[3] = matrix2.elements[7] = matrix2.elements[11] = 0;
            matrix2.elements[15] = 1;
          }
          el.style.width = size.width + "px";
          el.style.height = size.height + "px";
          el.style.perspective = isOrthographicCamera2 ? "" : `${fov}px`;
          if (transformOuterRef.current && transformInnerRef.current) {
            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;
            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix2, 1 / ((distanceFactor || 10) / 400));
          }
        } else {
          const scale2 = distanceFactor === void 0 ? 1 : objectScale(group.current, camera) * distanceFactor;
          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale2})`;
        }
        oldPosition.current = vec;
        oldZoom.current = camera.zoom;
      }
    }
  });
  return React.createElement("group", _extends({}, props, {
    ref: group
  }));
});

// node_modules/@react-three/drei/web/CycleRaycast.js
var React2 = __toESM(require_react());
function CycleRaycast({
  onChanged,
  portal,
  preventDefault = true,
  scroll = true,
  keyCode = 9
}) {
  const cycle = React2.useRef(0);
  const setEvents = useThree((state) => state.setEvents);
  const get = useThree((state) => state.get);
  const gl = useThree((state) => state.gl);
  React2.useEffect(() => {
    var _portal$current;
    let hits = [];
    let lastEvent = void 0;
    const prev = get().events.filter;
    const target2 = (_portal$current = portal == null ? void 0 : portal.current) !== null && _portal$current !== void 0 ? _portal$current : gl.domElement.parentNode;
    const renderStatus = () => target2 && onChanged && onChanged(hits, Math.round(cycle.current) % hits.length);
    setEvents({
      filter: (intersections, state) => {
        let clone = [...intersections];
        if (clone.length !== hits.length || !hits.every((hit) => clone.map((e) => e.object.uuid).includes(hit.object.uuid))) {
          cycle.current = 0;
          hits = clone;
          renderStatus();
        }
        if (prev)
          clone = prev(clone, state);
        for (let i2 = 0; i2 < Math.round(cycle.current) % clone.length; i2++) {
          const first = clone.shift();
          clone = [...clone, first];
        }
        return clone;
      }
    });
    const refresh = (fn) => {
      var _get$events$handlers, _get$events$handlers2;
      cycle.current = fn(cycle.current);
      (_get$events$handlers = get().events.handlers) == null ? void 0 : _get$events$handlers.onPointerCancel(void 0);
      (_get$events$handlers2 = get().events.handlers) == null ? void 0 : _get$events$handlers2.onPointerMove(lastEvent);
      renderStatus();
    };
    const tabEvent = (event) => {
      if (event.keyCode || event.which === keyCode) {
        if (preventDefault)
          event.preventDefault();
        if (hits.length > 1)
          refresh((current) => current + 1);
      }
    };
    const wheelEvent = (event) => {
      if (preventDefault)
        event.preventDefault();
      let delta = 0;
      if (!event)
        event = window.event;
      if (event.wheelDelta)
        delta = event.wheelDelta / 120;
      else if (event.detail)
        delta = -event.detail / 3;
      if (hits.length > 1)
        refresh((current) => Math.abs(current - delta));
    };
    const moveEvent = (event) => lastEvent = event;
    document.addEventListener("pointermove", moveEvent, {
      passive: true
    });
    if (scroll)
      document.addEventListener("wheel", wheelEvent);
    if (keyCode !== void 0)
      document.addEventListener("keydown", tabEvent);
    return () => {
      setEvents({
        filter: prev
      });
      if (keyCode !== void 0)
        document.removeEventListener("keydown", tabEvent);
      if (scroll)
        document.removeEventListener("wheel", wheelEvent);
      document.removeEventListener("pointermove", moveEvent);
    };
  }, [gl, get, setEvents, preventDefault, scroll, keyCode]);
  return null;
}

// node_modules/@react-three/drei/web/useCursor.js
var React3 = __toESM(require_react());
function useCursor(hovered, onPointerOver = "pointer", onPointerOut = "auto") {
  React3.useEffect(() => {
    if (hovered) {
      document.body.style.cursor = onPointerOver;
      return () => void (document.body.style.cursor = onPointerOut);
    }
  }, [hovered]);
}

// node_modules/@react-three/drei/web/Loader.js
var React4 = __toESM(require_react());

// node_modules/@react-three/drei/core/useProgress.js
var saveLastTotalLoaded = 0;
var useProgress = create((set) => {
  DefaultLoadingManager.onStart = (item, loaded, total) => {
    set({
      active: true,
      item,
      loaded,
      total,
      progress: (loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded) * 100
    });
  };
  DefaultLoadingManager.onLoad = () => {
    set({
      active: false
    });
  };
  DefaultLoadingManager.onError = (item) => set((state) => ({
    errors: [...state.errors, item]
  }));
  DefaultLoadingManager.onProgress = (item, loaded, total) => {
    if (loaded === total) {
      saveLastTotalLoaded = total;
    }
    set({
      active: true,
      item,
      loaded,
      total,
      progress: (loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded) * 100 || 100
    });
  };
  return {
    errors: [],
    active: false,
    progress: 0,
    item: "",
    loaded: 0,
    total: 0
  };
});

// node_modules/@react-three/drei/web/Loader.js
var defaultDataInterpolation = (p) => `Loading ${p.toFixed(2)}%`;
function Loader({
  containerStyles,
  innerStyles,
  barStyles,
  dataStyles,
  dataInterpolation = defaultDataInterpolation,
  initialState = (active) => active
}) {
  const {
    active,
    progress
  } = useProgress();
  const progressRef = React4.useRef(0);
  const rafRef = React4.useRef(0);
  const progressSpanRef = React4.useRef(null);
  const [shown, setShown] = React4.useState(initialState(active));
  React4.useEffect(() => {
    let t;
    if (active !== shown)
      t = setTimeout(() => setShown(active), 300);
    return () => clearTimeout(t);
  }, [shown, active]);
  const updateProgress = React4.useCallback(() => {
    if (!progressSpanRef.current)
      return;
    progressRef.current += (progress - progressRef.current) / 2;
    if (progressRef.current > 0.95 * progress || progress === 100)
      progressRef.current = progress;
    progressSpanRef.current.innerText = dataInterpolation(progressRef.current);
    if (progressRef.current < progress)
      rafRef.current = requestAnimationFrame(updateProgress);
  }, [dataInterpolation, progress]);
  React4.useEffect(() => {
    updateProgress();
    return () => cancelAnimationFrame(rafRef.current);
  }, [updateProgress]);
  return shown ? React4.createElement("div", {
    style: {
      ...styles.container,
      opacity: active ? 1 : 0,
      ...containerStyles
    }
  }, React4.createElement("div", null, React4.createElement("div", {
    style: {
      ...styles.inner,
      ...innerStyles
    }
  }, React4.createElement("div", {
    style: {
      ...styles.bar,
      transform: `scaleX(${progress / 100})`,
      ...barStyles
    }
  }), React4.createElement("span", {
    ref: progressSpanRef,
    style: {
      ...styles.data,
      ...dataStyles
    }
  })))) : null;
}
var styles = {
  container: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background: "#171717",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: "opacity 300ms ease",
    zIndex: 1e3
  },
  inner: {
    width: 100,
    height: 3,
    background: "#272727",
    textAlign: "center"
  },
  bar: {
    height: 3,
    width: "100%",
    background: "white",
    transition: "transform 200ms",
    transformOrigin: "left center"
  },
  data: {
    display: "inline-block",
    position: "relative",
    fontVariantNumeric: "tabular-nums",
    marginTop: "0.8em",
    color: "#f0f0f0",
    fontSize: "0.6em",
    fontFamily: `-apple-system, BlinkMacSystemFont, "Inter", "Segoe UI", "Helvetica Neue", Helvetica, Arial, Roboto, Ubuntu, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    whiteSpace: "nowrap"
  }
};

// node_modules/@react-three/drei/web/ScrollControls.js
var React5 = __toESM(require_react());
var ReactDOM2 = __toESM(require_client());
var context2 = React5.createContext(null);
function useScroll() {
  return React5.useContext(context2);
}
function ScrollControls({
  eps: eps2 = 1e-5,
  enabled = true,
  infinite,
  horizontal,
  pages = 1,
  distance = 1,
  damping = 4,
  style = {},
  children
}) {
  const {
    get,
    setEvents,
    gl,
    size,
    invalidate,
    events
  } = useThree();
  const [el] = React5.useState(() => document.createElement("div"));
  const [fill] = React5.useState(() => document.createElement("div"));
  const [fixed] = React5.useState(() => document.createElement("div"));
  const target2 = gl.domElement.parentNode;
  const scroll = React5.useRef(0);
  const state = React5.useMemo(() => {
    const state2 = {
      el,
      eps: eps2,
      fill,
      fixed,
      horizontal,
      damping,
      offset: 0,
      delta: 0,
      scroll,
      pages,
      // 0-1 for a range between from -> from + distance
      range(from, distance2, margin = 0) {
        const start = from - margin;
        const end = start + distance2 + margin * 2;
        return this.offset < start ? 0 : this.offset > end ? 1 : (this.offset - start) / (end - start);
      },
      // 0-1-0 for a range between from -> from + distance
      curve(from, distance2, margin = 0) {
        return Math.sin(this.range(from, distance2, margin) * Math.PI);
      },
      // true/false for a range between from -> from + distance
      visible(from, distance2, margin = 0) {
        const start = from - margin;
        const end = start + distance2 + margin * 2;
        return this.offset >= start && this.offset <= end;
      }
    };
    return state2;
  }, [eps2, damping, horizontal, pages]);
  React5.useEffect(() => {
    el.style.position = "absolute";
    el.style.width = "100%";
    el.style.height = "100%";
    el.style[horizontal ? "overflowX" : "overflowY"] = "auto";
    el.style[horizontal ? "overflowY" : "overflowX"] = "hidden";
    el.style.top = "0px";
    el.style.left = "0px";
    for (const key in style) {
      el.style[key] = style[key];
    }
    fixed.style.position = "sticky";
    fixed.style.top = "0px";
    fixed.style.left = "0px";
    fixed.style.width = "100%";
    fixed.style.height = "100%";
    fixed.style.overflow = "hidden";
    el.appendChild(fixed);
    fill.style.height = horizontal ? "100%" : `${pages * distance * 100}%`;
    fill.style.width = horizontal ? `${pages * distance * 100}%` : "100%";
    fill.style.pointerEvents = "none";
    el.appendChild(fill);
    target2.appendChild(el);
    el[horizontal ? "scrollLeft" : "scrollTop"] = 1;
    const oldTarget = events.connected || gl.domElement;
    requestAnimationFrame(() => events.connect == null ? void 0 : events.connect(el));
    const oldCompute = get().events.compute;
    setEvents({
      compute(event, state2) {
        const offsetX = event.clientX - target2.offsetLeft;
        const offsetY = event.clientY - target2.offsetTop;
        state2.pointer.set(offsetX / state2.size.width * 2 - 1, -(offsetY / state2.size.height) * 2 + 1);
        state2.raycaster.setFromCamera(state2.pointer, state2.camera);
      }
    });
    return () => {
      target2.removeChild(el);
      setEvents({
        compute: oldCompute
      });
      events.connect == null ? void 0 : events.connect(oldTarget);
    };
  }, [pages, distance, horizontal, el, fill, fixed, target2]);
  React5.useEffect(() => {
    if (events.connected === el) {
      const containerLength = size[horizontal ? "width" : "height"];
      const scrollLength = el[horizontal ? "scrollWidth" : "scrollHeight"];
      const scrollThreshold = scrollLength - containerLength;
      let current = 0;
      let disableScroll = true;
      let firstRun = true;
      const onScroll = () => {
        if (!enabled || firstRun)
          return;
        invalidate();
        current = el[horizontal ? "scrollLeft" : "scrollTop"];
        scroll.current = current / scrollThreshold;
        if (infinite) {
          if (!disableScroll) {
            if (current >= scrollThreshold) {
              const damp = 1 - state.offset;
              el[horizontal ? "scrollLeft" : "scrollTop"] = 1;
              scroll.current = state.offset = -damp;
              disableScroll = true;
            } else if (current <= 0) {
              const damp = 1 + state.offset;
              el[horizontal ? "scrollLeft" : "scrollTop"] = scrollLength;
              scroll.current = state.offset = damp;
              disableScroll = true;
            }
          }
          if (disableScroll)
            setTimeout(() => disableScroll = false, 40);
        }
      };
      el.addEventListener("scroll", onScroll, {
        passive: true
      });
      requestAnimationFrame(() => firstRun = false);
      const onWheel = (e) => el.scrollLeft += e.deltaY / 2;
      if (horizontal)
        el.addEventListener("wheel", onWheel, {
          passive: true
        });
      return () => {
        el.removeEventListener("scroll", onScroll);
        if (horizontal)
          el.removeEventListener("wheel", onWheel);
      };
    }
  }, [el, events, size, infinite, state, invalidate, horizontal, enabled]);
  let last = 0;
  useFrame((_, delta) => {
    state.offset = MathUtils.damp(last = state.offset, scroll.current, damping, delta);
    state.delta = MathUtils.damp(state.delta, Math.abs(last - state.offset), damping, delta);
    if (state.delta > eps2)
      invalidate();
  });
  return React5.createElement(context2.Provider, {
    value: state
  }, children);
}
var ScrollCanvas = React5.forwardRef(({
  children
}, ref) => {
  const group = React5.useRef(null);
  const state = useScroll();
  const {
    width,
    height
  } = useThree((state2) => state2.viewport);
  useFrame(() => {
    group.current.position.x = state.horizontal ? -width * (state.pages - 1) * state.offset : 0;
    group.current.position.y = state.horizontal ? 0 : height * (state.pages - 1) * state.offset;
  });
  return React5.createElement("group", {
    ref: react_merge_refs_esm_default([ref, group])
  }, children);
});
var ScrollHtml = React5.forwardRef(({
  children,
  style,
  ...props
}, ref) => {
  const state = useScroll();
  const group = React5.useRef(null);
  const {
    width,
    height
  } = useThree((state2) => state2.size);
  const fiberState = React5.useContext(context);
  const root = React5.useMemo(() => ReactDOM2.createRoot(state.fixed), [state.fixed]);
  useFrame(() => {
    if (state.delta > state.eps) {
      group.current.style.transform = `translate3d(${state.horizontal ? -width * (state.pages - 1) * state.offset : 0}px,${state.horizontal ? 0 : height * (state.pages - 1) * -state.offset}px,0)`;
    }
  });
  root.render(React5.createElement("div", _extends({
    ref: react_merge_refs_esm_default([ref, group]),
    style: {
      ...style,
      position: "absolute",
      top: 0,
      left: 0,
      willChange: "transform"
    }
  }, props), React5.createElement(context2.Provider, {
    value: state
  }, React5.createElement(context.Provider, {
    value: fiberState
  }, children))));
  return null;
});
var Scroll = React5.forwardRef(({
  html,
  ...props
}, ref) => {
  const El = html ? ScrollHtml : ScrollCanvas;
  return React5.createElement(El, _extends({
    ref
  }, props));
});

// node_modules/@react-three/drei/web/PresentationControls.js
var React6 = __toESM(require_react());
function PresentationControls({
  enabled = true,
  snap,
  global,
  cursor = true,
  children,
  speed = 1,
  rotation: rotation2 = [0, 0, 0],
  zoom = 1,
  polar = [0, Math.PI / 2],
  azimuth = [-Infinity, Infinity],
  config = {
    mass: 1,
    tension: 170,
    friction: 26
  }
}) {
  const {
    size,
    gl
  } = useThree();
  const rPolar = React6.useMemo(() => [rotation2[0] + polar[0], rotation2[0] + polar[1]], [rotation2[0], polar[0], polar[1]]);
  const rAzimuth = React6.useMemo(() => [rotation2[1] + azimuth[0], rotation2[1] + azimuth[1]], [rotation2[1], azimuth[0], azimuth[1]]);
  const rInitial = React6.useMemo(() => [MathUtils.clamp(rotation2[0], ...rPolar), MathUtils.clamp(rotation2[1], ...rAzimuth), rotation2[2]], [rotation2[0], rotation2[1], rotation2[2], rPolar, rAzimuth]);
  const [spring, api] = useSpring(() => ({
    scale: 1,
    rotation: rInitial,
    config
  }));
  React6.useEffect(() => void api.start({
    scale: 1,
    rotation: rInitial,
    config
  }), [rInitial]);
  React6.useEffect(() => {
    if (global && cursor && enabled)
      gl.domElement.style.cursor = "grab";
    return () => void (gl.domElement.style.cursor = "default");
  }, [global, cursor, gl.domElement, enabled]);
  const bind = useGesture({
    onHover: ({
      last
    }) => {
      if (cursor && !global && enabled)
        gl.domElement.style.cursor = last ? "auto" : "grab";
    },
    onDrag: ({
      down,
      delta: [x, y],
      memo: [oldY, oldX] = spring.rotation.animation.to || rInitial
    }) => {
      if (!enabled)
        return [y, x];
      if (cursor)
        gl.domElement.style.cursor = down ? "grabbing" : "grab";
      x = MathUtils.clamp(oldX + x / size.width * Math.PI * speed, ...rAzimuth);
      y = MathUtils.clamp(oldY + y / size.height * Math.PI * speed, ...rPolar);
      const sConfig = snap && !down && typeof snap !== "boolean" ? snap : config;
      api.start({
        scale: down && y > rPolar[1] / 2 ? zoom : 1,
        rotation: snap && !down ? rInitial : [y, x, 0],
        config: (n) => n === "scale" ? {
          ...sConfig,
          friction: sConfig.friction * 3
        } : sConfig
      });
      return [y, x];
    }
  }, {
    target: global ? gl.domElement : void 0
  });
  return React6.createElement(animated.group, _extends({}, bind == null ? void 0 : bind(), spring), children);
}

// node_modules/@react-three/drei/web/KeyboardControls.js
var React7 = __toESM(require_react());

// node_modules/zustand/esm/middleware.js
var subscribeWithSelector = (fn) => (set, get, api) => {
  const origSubscribe = api.subscribe;
  api.subscribe = (selector, optListener, options) => {
    let listener = selector;
    if (optListener) {
      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;
      let currentSlice = selector(api.getState());
      listener = (state) => {
        const nextSlice = selector(state);
        if (!equalityFn(currentSlice, nextSlice)) {
          const previousSlice = currentSlice;
          optListener(currentSlice = nextSlice, previousSlice);
        }
      };
      if (options == null ? void 0 : options.fireImmediately) {
        optListener(currentSlice, currentSlice);
      }
    }
    return origSubscribe(listener);
  };
  const initialState = fn(set, get, api);
  return initialState;
};

// node_modules/@react-three/drei/web/KeyboardControls.js
var context3 = React7.createContext(null);
function KeyboardControls({
  map,
  children,
  onChange,
  domElement
}) {
  const key = map.map((item) => item.name + item.keys).join("-");
  const useControls = React7.useMemo(() => {
    return create(subscribeWithSelector(() => map.reduce((prev, cur) => ({
      ...prev,
      [cur.name]: false
    }), {})));
  }, [key]);
  const api = React7.useMemo(() => [useControls.subscribe, useControls.getState, useControls], [key]);
  const set = useControls.setState;
  React7.useEffect(() => {
    const config = map.map(({
      name,
      keys,
      up
    }) => ({
      keys,
      up,
      fn: (value) => {
        set({
          [name]: value
        });
        if (onChange)
          onChange(name, value, api[2]());
      }
    }));
    const keyMap = config.reduce((out, {
      keys,
      fn,
      up = true
    }) => {
      keys.forEach((key2) => out[key2] = {
        fn,
        pressed: false,
        up
      });
      return out;
    }, {});
    const downHandler = ({
      key: key2,
      code
    }) => {
      const obj = keyMap[key2] || keyMap[code];
      if (!obj)
        return;
      const {
        fn,
        pressed,
        up
      } = obj;
      obj.pressed = true;
      if (up || !pressed)
        fn(true);
    };
    const upHandler = ({
      key: key2,
      code
    }) => {
      const obj = keyMap[key2] || keyMap[code];
      if (!obj)
        return;
      const {
        fn,
        up
      } = obj;
      obj.pressed = false;
      if (up)
        fn(false);
    };
    const source = domElement || window;
    source.addEventListener("keydown", downHandler, {
      passive: true
    });
    source.addEventListener("keyup", upHandler, {
      passive: true
    });
    return () => {
      source.removeEventListener("keydown", downHandler);
      source.removeEventListener("keyup", upHandler);
    };
  }, [domElement, key]);
  return React7.createElement(context3.Provider, {
    value: api,
    children
  });
}
function useKeyboardControls(sel) {
  const [sub, get, store] = React7.useContext(context3);
  if (sel)
    return store(sel);
  else
    return [sub, get];
}

// node_modules/@react-three/drei/web/Select.js
var React8 = __toESM(require_react());

// node_modules/zustand/esm/shallow.js
function shallow(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  const keysA = Object.keys(objA);
  if (keysA.length !== Object.keys(objB).length) {
    return false;
  }
  for (let i2 = 0; i2 < keysA.length; i2++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i2]) || !Object.is(objA[keysA[i2]], objB[keysA[i2]])) {
      return false;
    }
  }
  return true;
}

// node_modules/@react-three/drei/web/Select.js
var context4 = React8.createContext([]);
function Select({
  box,
  multiple,
  children,
  onChange,
  border = "1px solid #55aaff",
  backgroundColor = "rgba(75, 160, 255, 0.1)",
  filter: customFilter = (item) => item,
  ...props
}) {
  const {
    setEvents,
    camera,
    raycaster,
    gl,
    controls,
    size,
    get
  } = useThree();
  const [hovered, hover] = React8.useState(false);
  const [active, dispatch] = React8.useReducer((state, {
    object,
    shift
  }) => {
    if (object === void 0)
      return [];
    else if (Array.isArray(object))
      return object;
    else if (!shift)
      return state[0] === object ? [] : [object];
    else if (state.includes(object))
      return state.filter((o) => o !== object);
    else
      return [object, ...state];
  }, []);
  React8.useEffect(() => void (onChange == null ? void 0 : onChange(active)), [active]);
  const onClick = React8.useCallback((e) => {
    e.stopPropagation();
    dispatch({
      object: customFilter([e.object])[0],
      shift: multiple && e.shiftKey
    });
  }, []);
  const onPointerMissed = React8.useCallback((e) => !hovered && dispatch({}), [hovered]);
  const ref = React8.useRef(null);
  React8.useEffect(() => {
    if (!box || !multiple)
      return;
    const selBox = new SelectionBox(camera, ref.current);
    const element = document.createElement("div");
    element.style.pointerEvents = "none";
    element.style.border = border;
    element.style.backgroundColor = backgroundColor;
    element.style.position = "fixed";
    const startPoint = new Vector2();
    const pointTopLeft = new Vector2();
    const pointBottomRight = new Vector2();
    const oldRaycasterEnabled = get().events.enabled;
    const oldControlsEnabled = controls == null ? void 0 : controls.enabled;
    let isDown = false;
    function prepareRay(event, vec) {
      const {
        offsetX,
        offsetY
      } = event;
      const {
        width,
        height
      } = size;
      vec.set(offsetX / width * 2 - 1, -(offsetY / height) * 2 + 1);
    }
    function onSelectStart(event) {
      var _gl$domElement$parent;
      if (controls)
        controls.enabled = false;
      setEvents({
        enabled: false
      });
      isDown = true;
      (_gl$domElement$parent = gl.domElement.parentElement) == null ? void 0 : _gl$domElement$parent.appendChild(element);
      element.style.left = `${event.clientX}px`;
      element.style.top = `${event.clientY}px`;
      element.style.width = "0px";
      element.style.height = "0px";
      startPoint.x = event.clientX;
      startPoint.y = event.clientY;
    }
    function onSelectMove(event) {
      pointBottomRight.x = Math.max(startPoint.x, event.clientX);
      pointBottomRight.y = Math.max(startPoint.y, event.clientY);
      pointTopLeft.x = Math.min(startPoint.x, event.clientX);
      pointTopLeft.y = Math.min(startPoint.y, event.clientY);
      element.style.left = `${pointTopLeft.x}px`;
      element.style.top = `${pointTopLeft.y}px`;
      element.style.width = `${pointBottomRight.x - pointTopLeft.x}px`;
      element.style.height = `${pointBottomRight.y - pointTopLeft.y}px`;
    }
    function onSelectOver() {
      if (isDown) {
        var _element$parentElemen;
        if (controls)
          controls.enabled = oldControlsEnabled;
        setEvents({
          enabled: oldRaycasterEnabled
        });
        isDown = false;
        (_element$parentElemen = element.parentElement) == null ? void 0 : _element$parentElemen.removeChild(element);
      }
    }
    function pointerDown(event) {
      if (event.shiftKey) {
        onSelectStart(event);
        prepareRay(event, selBox.startPoint);
      }
    }
    let previous = [];
    function pointerMove(event) {
      if (isDown) {
        onSelectMove(event);
        prepareRay(event, selBox.endPoint);
        const allSelected = selBox.select().sort((o) => o.uuid).filter((o) => o.isMesh);
        if (!shallow(allSelected, previous)) {
          previous = allSelected;
          dispatch({
            object: customFilter(allSelected)
          });
        }
      }
    }
    function pointerUp(event) {
      if (isDown)
        onSelectOver();
    }
    document.addEventListener("pointerdown", pointerDown, {
      passive: true
    });
    document.addEventListener("pointermove", pointerMove, {
      passive: true,
      capture: true
    });
    document.addEventListener("pointerup", pointerUp, {
      passive: true
    });
    return () => {
      document.removeEventListener("pointerdown", pointerDown);
      document.removeEventListener("pointermove", pointerMove);
      document.removeEventListener("pointerup", pointerUp);
    };
  }, [size, raycaster, camera, controls, gl]);
  return React8.createElement("group", _extends({
    ref,
    onClick,
    onPointerOver: () => hover(true),
    onPointerOut: () => hover(false),
    onPointerMissed
  }, props), React8.createElement(context4.Provider, {
    value: active
  }, children));
}
function useSelect() {
  return React8.useContext(context4);
}

// node_modules/@react-three/drei/core/Billboard.js
var React9 = __toESM(require_react());
var Billboard = React9.forwardRef(function Billboard2({
  follow = true,
  lockX = false,
  lockY = false,
  lockZ = false,
  ...props
}, ref) {
  const localRef = React9.useRef();
  useFrame(({
    camera
  }) => {
    if (!follow || !localRef.current)
      return;
    const prevRotation = localRef.current.rotation.clone();
    localRef.current.quaternion.copy(camera.quaternion);
    if (lockX)
      localRef.current.rotation.x = prevRotation.x;
    if (lockY)
      localRef.current.rotation.y = prevRotation.y;
    if (lockZ)
      localRef.current.rotation.z = prevRotation.z;
  });
  return React9.createElement("group", _extends({
    ref: react_merge_refs_esm_default([localRef, ref])
  }, props));
});

// node_modules/@react-three/drei/core/ScreenSpace.js
var React10 = __toESM(require_react());
var ScreenSpace = React10.forwardRef(({
  children,
  depth = -1,
  ...rest
}, ref) => {
  const localRef = React10.useRef(null);
  useFrame(({
    camera
  }) => {
    localRef.current.quaternion.copy(camera.quaternion);
    localRef.current.position.copy(camera.position);
  });
  return React10.createElement("group", _extends({
    ref: react_merge_refs_esm_default([ref, localRef])
  }, rest), React10.createElement("group", {
    "position-z": -depth
  }, children));
});

// node_modules/@react-three/drei/core/QuadraticBezierLine.js
var React12 = __toESM(require_react());

// node_modules/@react-three/drei/core/Line.js
var React11 = __toESM(require_react());
var Line = React11.forwardRef(function Line4({
  points,
  color = "black",
  vertexColors,
  linewidth,
  lineWidth,
  dashed,
  ...rest
}, ref) {
  const size = useThree((state) => state.size);
  const [line2] = React11.useState(() => new Line2());
  const [lineMaterial] = React11.useState(() => new LineMaterial());
  const lineGeom = React11.useMemo(() => {
    const geom = new LineGeometry();
    const pValues = points.map((p) => {
      const isArray2 = Array.isArray(p);
      return p instanceof Vector3 ? [p.x, p.y, p.z] : p instanceof Vector2 ? [p.x, p.y, 0] : isArray2 && p.length === 3 ? [p[0], p[1], p[2]] : isArray2 && p.length === 2 ? [p[0], p[1], 0] : p;
    });
    geom.setPositions(pValues.flat());
    if (vertexColors) {
      const cValues = vertexColors.map((c) => c instanceof Color ? c.toArray() : c);
      geom.setColors(cValues.flat());
    }
    return geom;
  }, [points, vertexColors]);
  React11.useLayoutEffect(() => {
    line2.computeLineDistances();
  }, [points, line2]);
  React11.useLayoutEffect(() => {
    if (dashed) {
      lineMaterial.defines.USE_DASH = "";
    } else {
      delete lineMaterial.defines.USE_DASH;
    }
    lineMaterial.needsUpdate = true;
  }, [dashed, lineMaterial]);
  React11.useEffect(() => {
    return () => lineGeom.dispose();
  }, [lineGeom]);
  return React11.createElement("primitive", _extends({
    object: line2,
    ref
  }, rest), React11.createElement("primitive", {
    object: lineGeom,
    attach: "geometry"
  }), React11.createElement("primitive", _extends({
    object: lineMaterial,
    attach: "material",
    color,
    vertexColors: Boolean(vertexColors),
    resolution: [size.width, size.height],
    linewidth: linewidth !== null && linewidth !== void 0 ? linewidth : lineWidth,
    dashed
  }, rest)));
});

// node_modules/@react-three/drei/core/QuadraticBezierLine.js
var v = new Vector3();
var QuadraticBezierLine = React12.forwardRef(function QuadraticBezierLine2({
  start = [0, 0, 0],
  end = [0, 0, 0],
  mid,
  segments = 20,
  ...rest
}, forwardref) {
  const ref = React12.useRef(null);
  const [curve] = React12.useState(() => new QuadraticBezierCurve3(void 0, void 0, void 0));
  const getPoints = React12.useCallback((start2, end2, mid2, segments2 = 20) => {
    if (start2 instanceof Vector3)
      curve.v0.copy(start2);
    else
      curve.v0.set(...start2);
    if (end2 instanceof Vector3)
      curve.v2.copy(end2);
    else
      curve.v2.set(...end2);
    if (mid2 instanceof Vector3) {
      curve.v1.copy(mid2);
    } else {
      curve.v1.copy(curve.v0.clone().add(curve.v2.clone().sub(curve.v0)).add(v.set(0, curve.v0.y - curve.v2.y, 0)));
    }
    return curve.getPoints(segments2);
  }, []);
  React12.useLayoutEffect(() => {
    ref.current.setPoints = (start2, end2, mid2) => {
      const points2 = getPoints(start2, end2, mid2);
      if (ref.current.geometry)
        ref.current.geometry.setPositions(points2.map((p) => p.toArray()).flat());
    };
  }, []);
  const points = React12.useMemo(() => getPoints(start, end, mid, segments), [start, end, mid, segments]);
  return React12.createElement(Line, _extends({
    ref: react_merge_refs_esm_default([ref, forwardref]),
    points
  }, rest));
});

// node_modules/@react-three/drei/core/CubicBezierLine.js
var React13 = __toESM(require_react());
var CubicBezierLine = React13.forwardRef(function CubicBezierLine2({
  start,
  end,
  midA,
  midB,
  segments = 20,
  ...rest
}, ref) {
  const points = React13.useMemo(() => {
    const startV = start instanceof Vector3 ? start : new Vector3(...start);
    const endV = end instanceof Vector3 ? end : new Vector3(...end);
    const midAV = midA instanceof Vector3 ? midA : new Vector3(...midA);
    const midBV = midB instanceof Vector3 ? midB : new Vector3(...midB);
    const interpolatedV = new CubicBezierCurve3(startV, midAV, midBV, endV).getPoints(segments);
    return interpolatedV;
  }, [start, end, midA, midB, segments]);
  return React13.createElement(Line, _extends({
    ref,
    points
  }, rest));
});

// node_modules/@react-three/drei/core/CatmullRomLine.js
var React14 = __toESM(require_react());
var CatmullRomLine = React14.forwardRef(function CatmullRomLine2({
  points,
  closed = false,
  curveType = "centripetal",
  tension = 0.5,
  segments = 20,
  vertexColors,
  ...rest
}, ref) {
  const curve = React14.useMemo(() => {
    const mappedPoints = points.map((pt) => pt instanceof Vector3 ? pt : new Vector3(...pt));
    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);
  }, [points, closed, curveType, tension]);
  const segmentedPoints = React14.useMemo(() => curve.getPoints(segments), [curve, segments]);
  const interpolatedVertexColors = React14.useMemo(() => {
    if (!vertexColors || vertexColors.length < 2)
      return void 0;
    if (vertexColors.length === segments + 1)
      return vertexColors;
    const mappedColors = vertexColors.map((color) => color instanceof Color ? color : new Color(...color));
    if (closed)
      mappedColors.push(mappedColors[0].clone());
    const iColors = [mappedColors[0]];
    const divisions = segments / (mappedColors.length - 1);
    for (let i2 = 1; i2 < segments; i2++) {
      const alpha = i2 % divisions / divisions;
      const colorIndex = Math.floor(i2 / divisions);
      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));
    }
    iColors.push(mappedColors[mappedColors.length - 1]);
    return iColors;
  }, [vertexColors, segments]);
  return React14.createElement(Line, _extends({
    ref,
    points: segmentedPoints,
    vertexColors: interpolatedVertexColors
  }, rest));
});

// node_modules/@react-three/drei/core/PositionalAudio.js
var React15 = __toESM(require_react());
var PositionalAudio = React15.forwardRef(({
  url,
  distance = 1,
  loop = true,
  autoplay,
  ...props
}, ref) => {
  const sound = React15.useRef();
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const [listener] = React15.useState(() => new AudioListener());
  const buffer = useLoader(AudioLoader, url);
  React15.useEffect(() => {
    const _sound = sound.current;
    if (_sound) {
      _sound.setBuffer(buffer);
      _sound.setRefDistance(distance);
      _sound.setLoop(loop);
      if (autoplay && !_sound.isPlaying)
        _sound.play();
    }
  }, [buffer, camera, distance, loop]);
  React15.useEffect(() => {
    const _sound = sound.current;
    camera.add(listener);
    return () => {
      camera.remove(listener);
      if (_sound) {
        if (_sound.isPlaying)
          _sound.stop();
        if (_sound.source && _sound.source._connected)
          _sound.disconnect();
      }
    };
  }, []);
  return React15.createElement("positionalAudio", _extends({
    ref: react_merge_refs_esm_default([sound, ref]),
    args: [listener]
  }, props));
});

// node_modules/@react-three/drei/core/Text.js
var React16 = __toESM(require_react());

// node_modules/@react-three/drei/node_modules/suspend-react/dist/index.js
function shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {
  if (arrA === arrB)
    return true;
  if (!arrA || !arrB)
    return false;
  const len = arrA.length;
  if (arrB.length !== len)
    return false;
  for (let i2 = 0; i2 < len; i2++)
    if (!equal(arrA[i2], arrB[i2]))
      return false;
  return true;
}
var globalCache = [];
function query(fn, keys, preload = false, config = {}) {
  for (const entry2 of globalCache) {
    if (shallowEqualArrays(keys, entry2.keys, entry2.equal)) {
      if (preload)
        return void 0;
      if (Object.prototype.hasOwnProperty.call(entry2, "error"))
        throw entry2.error;
      if (Object.prototype.hasOwnProperty.call(entry2, "response"))
        return entry2.response;
      if (!preload)
        throw entry2.promise;
    }
  }
  const entry = {
    keys,
    equal: config.equal,
    promise: (
      // Execute the promise
      fn(...keys).then((response) => entry.response = response).then(() => {
        if (config.lifespan && config.lifespan > 0) {
          setTimeout(() => {
            const index = globalCache.indexOf(entry);
            if (index !== -1)
              globalCache.splice(index, 1);
          }, config.lifespan);
        }
      }).catch((error) => entry.error = error)
    )
  };
  globalCache.push(entry);
  if (!preload)
    throw entry.promise;
  return void 0;
}
var suspend = (fn, keys, config) => query(fn, keys, false, config);

// node_modules/@react-three/drei/core/Text.js
var Text2 = React16.forwardRef(({
  anchorX = "center",
  anchorY = "middle",
  font,
  children,
  characters,
  onSync,
  ...props
}, ref) => {
  const invalidate = useThree(({
    invalidate: invalidate2
  }) => invalidate2);
  const [troikaMesh] = React16.useState(() => new Text());
  const [nodes, text] = React16.useMemo(() => {
    const n = [];
    let t = "";
    React16.Children.forEach(children, (child) => {
      if (typeof child === "string" || typeof child === "number") {
        t += child;
      } else {
        n.push(child);
      }
    });
    return [n, t];
  }, [children]);
  suspend(() => new Promise((res) => preloadFont({
    font,
    characters
  }, res)), ["troika-text", font, characters]);
  React16.useLayoutEffect(() => void troikaMesh.sync(() => {
    invalidate();
    if (onSync)
      onSync(troikaMesh);
  }));
  React16.useEffect(() => {
    return () => troikaMesh.dispose();
  }, [troikaMesh]);
  return React16.createElement("primitive", _extends({
    object: troikaMesh,
    ref,
    font,
    text,
    anchorX,
    anchorY
  }, props), nodes);
});

// node_modules/@react-three/drei/core/Text3D.js
var React17 = __toESM(require_react());
var import_react2 = __toESM(require_react());
var types = ["string", "number"];
var getTextFromChildren = (children) => {
  let label = "";
  const rest = [];
  React17.Children.forEach(children, (child) => {
    if (types.includes(typeof child))
      label += child + "";
    else
      rest.push(child);
  });
  return [label, ...rest];
};
var Text3D = React17.forwardRef(({
  font: _font,
  letterSpacing = 0,
  lineHeight = 1,
  size = 1,
  height = 0.2,
  bevelThickness = 0.1,
  bevelSize = 0.01,
  bevelEnabled = false,
  bevelOffset = 0,
  bevelSegments = 4,
  curveSegments = 8,
  children,
  ...props
}, ref) => {
  React17.useMemo(() => extend({
    RenamedTextGeometry: TextGeometry
  }), []);
  const font = suspend(async () => {
    let data = typeof _font === "string" ? await (await fetch(_font)).json() : _font;
    let loader = new FontLoader();
    return loader.parse(data);
  }, [_font]);
  const opts = (0, import_react2.useMemo)(() => {
    return {
      font,
      size,
      height,
      bevelThickness,
      bevelSize,
      bevelEnabled,
      bevelSegments,
      bevelOffset,
      curveSegments,
      letterSpacing,
      lineHeight
    };
  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);
  const [label, ...rest] = (0, import_react2.useMemo)(() => getTextFromChildren(children), [children]);
  const args = React17.useMemo(() => [label, opts], [label, opts]);
  return React17.createElement("mesh", _extends({}, props, {
    ref
  }), React17.createElement("renamedTextGeometry", {
    args
  }), rest);
});

// node_modules/@react-three/drei/core/Effects.js
var React18 = __toESM(require_react());
var isWebGL2Available = () => {
  try {
    var canvas = document.createElement("canvas");
    return !!(window.WebGL2RenderingContext && canvas.getContext("webgl2"));
  } catch (e) {
    return false;
  }
};
var Effects = React18.forwardRef(({
  children,
  multisamping = 8,
  renderIndex = 1,
  disableRender,
  disableGamma,
  disableRenderPass,
  depthBuffer = true,
  stencilBuffer = false,
  anisotropy = 1,
  encoding,
  type,
  ...props
}, ref) => {
  React18.useMemo(() => extend({
    EffectComposer,
    RenderPass,
    ShaderPass
  }), []);
  const composer = React18.useRef();
  const {
    scene,
    camera,
    gl,
    size,
    viewport
  } = useThree();
  const [target2] = React18.useState(() => {
    const t = new WebGLRenderTarget(size.width, size.height, {
      type: type || HalfFloatType,
      format: RGBAFormat,
      encoding: encoding || gl.outputEncoding,
      depthBuffer,
      stencilBuffer,
      anisotropy
    });
    t.samples = multisamping;
    return t;
  });
  React18.useEffect(() => {
    var _composer$current, _composer$current2;
    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);
    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(viewport.dpr);
  }, [gl, size, viewport.dpr]);
  useFrame(() => {
    var _composer$current3;
    if (!disableRender)
      (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();
  }, renderIndex);
  const passes = [];
  if (!disableRenderPass)
    passes.push(React18.createElement("renderPass", {
      key: "renderpass",
      attach: `passes-${passes.length}`,
      args: [scene, camera]
    }));
  if (!disableGamma)
    passes.push(React18.createElement("shaderPass", {
      attach: `passes-${passes.length}`,
      key: "gammapass",
      args: [GammaCorrectionShader]
    }));
  React18.Children.forEach(children, (el) => {
    el && passes.push(React18.cloneElement(el, {
      key: passes.length,
      attach: `passes-${passes.length}`
    }));
  });
  return React18.createElement("effectComposer", _extends({
    ref: react_merge_refs_esm_default([ref, composer]),
    args: [gl, target2]
  }, props), passes);
});

// node_modules/@react-three/drei/core/GradientTexture.js
var React19 = __toESM(require_react());
function GradientTexture({
  stops,
  colors: colors2,
  size = 1024,
  ...props
}) {
  const gl = useThree((state) => state.gl);
  const texture = React19.useMemo(() => {
    const canvas = document.createElement("canvas");
    const context10 = canvas.getContext("2d");
    canvas.width = 16;
    canvas.height = size;
    const gradient = context10.createLinearGradient(0, 0, 0, size);
    let i2 = stops.length;
    while (i2--) {
      gradient.addColorStop(stops[i2], colors2[i2]);
    }
    context10.fillStyle = gradient;
    context10.fillRect(0, 0, 16, size);
    const texture2 = new Texture(canvas);
    texture2.needsUpdate = true;
    return texture2;
  }, [stops]);
  React19.useEffect(() => () => void texture.dispose(), [texture]);
  return React19.createElement("primitive", _extends({
    object: texture,
    attach: "map",
    encoding: gl.outputEncoding
  }, props));
}

// node_modules/@react-three/drei/core/Image.js
var React20 = __toESM(require_react());

// node_modules/@react-three/drei/core/shaderMaterial.js
function shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {
  const material = class material extends ShaderMaterial {
    constructor(parameters = {}) {
      const entries = Object.entries(uniforms);
      super({
        uniforms: entries.reduce((acc, [name, value]) => {
          const uniform = UniformsUtils.clone({
            [name]: {
              value
            }
          });
          return {
            ...acc,
            ...uniform
          };
        }, {}),
        vertexShader,
        fragmentShader,
        ...parameters
      });
      this.key = "";
      entries.forEach(([name]) => Object.defineProperty(this, name, {
        get: () => this.uniforms[name].value,
        set: (v4) => this.uniforms[name].value = v4
      }));
      if (onInit)
        onInit(this);
    }
  };
  material.key = MathUtils.generateUUID();
  return material;
}

// node_modules/@react-three/drei/core/useTexture.js
var import_react3 = __toESM(require_react());
var IsObject = (url) => url === Object(url) && !Array.isArray(url) && typeof url !== "function";
function useTexture(input, onLoad) {
  const gl = useThree((state) => state.gl);
  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);
  (0, import_react3.useLayoutEffect)(() => {
    onLoad == null ? void 0 : onLoad(textures);
  }, [onLoad]);
  (0, import_react3.useEffect)(() => {
    const array = Array.isArray(textures) ? textures : [textures];
    array.forEach(gl.initTexture);
  }, [gl, textures]);
  if (IsObject(input)) {
    const keys = Object.keys(input);
    const keyed = {};
    keys.forEach((key) => Object.assign(keyed, {
      [key]: textures[keys.indexOf(key)]
    }));
    return keyed;
  } else {
    return textures;
  }
}
useTexture.preload = (url) => useLoader.preload(TextureLoader, url);
useTexture.clear = (input) => useLoader.clear(TextureLoader, input);

// node_modules/@react-three/drei/core/Image.js
var ImageMaterialImpl = shaderMaterial(
  {
    color: new Color("white"),
    scale: [1, 1],
    imageBounds: [1, 1],
    map: null,
    zoom: 1,
    grayscale: 0,
    opacity: 1
  },
  /* glsl */
  `
  varying vec2 vUv;
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
    vUv = uv;
  }
`,
  /* glsl */
  `
  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44
  varying vec2 vUv;
  uniform vec2 scale;
  uniform vec2 imageBounds;
  uniform vec3 color;
  uniform sampler2D map;
  uniform float zoom;
  uniform float grayscale;
  uniform float opacity;
  const vec3 luma = vec3(.299, 0.587, 0.114);
  vec4 toGrayscale(vec4 color, float intensity) {
    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);
  }
  vec2 aspect(vec2 size) {
    return size / min(size.x, size.y);
  }
  void main() {
    vec2 s = aspect(scale);
    vec2 i = aspect(imageBounds);
    float rs = s.x / s.y;
    float ri = i.x / i.y;
    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);
    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;
    vec2 uv = vUv * s / new + offset;
    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);
    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);
    
    #include <tonemapping_fragment>
    #include <encodings_fragment>
  }
`
);
var ImageBase = React20.forwardRef(({
  children,
  color,
  segments = 1,
  scale: scale2 = 1,
  zoom = 1,
  grayscale = 0,
  opacity = 1,
  texture,
  toneMapped,
  transparent,
  ...props
}, ref) => {
  extend({
    ImageMaterial: ImageMaterialImpl
  });
  const gl = useThree((state) => state.gl);
  const planeBounds = Array.isArray(scale2) ? [scale2[0], scale2[1]] : [scale2, scale2];
  const imageBounds = [texture.image.width, texture.image.height];
  return React20.createElement("mesh", _extends({
    ref,
    scale: Array.isArray(scale2) ? [...scale2, 1] : scale2
  }, props), React20.createElement("planeGeometry", {
    args: [1, 1, segments, segments]
  }), React20.createElement("imageMaterial", {
    color,
    map: texture,
    "map-encoding": gl.outputEncoding,
    zoom,
    grayscale,
    opacity,
    scale: planeBounds,
    imageBounds,
    toneMapped,
    transparent
  }), children);
});
var ImageWithUrl = React20.forwardRef(({
  url,
  ...props
}, ref) => {
  const texture = useTexture(url);
  return React20.createElement(ImageBase, _extends({}, props, {
    texture,
    ref
  }));
});
var ImageWithTexture = React20.forwardRef(({
  url: _url,
  ...props
}, ref) => {
  return React20.createElement(ImageBase, _extends({}, props, {
    ref
  }));
});
var Image = React20.forwardRef((props, ref) => {
  if (props.url)
    return React20.createElement(ImageWithUrl, _extends({}, props, {
      ref
    }));
  else if (props.texture)
    return React20.createElement(ImageWithTexture, _extends({}, props, {
      ref
    }));
  else
    throw new Error("<Image /> requires a url or texture");
});

// node_modules/@react-three/drei/core/Edges.js
var React21 = __toESM(require_react());
function Edges({
  userData,
  children,
  geometry,
  threshold = 15,
  color = "black",
  ...props
}) {
  const ref = React21.useRef(null);
  React21.useLayoutEffect(() => {
    const parent = ref.current.parent;
    if (parent) {
      const geom = geometry || parent.geometry;
      if (geom !== ref.current.userData.currentGeom || threshold !== ref.current.userData.currentThreshold) {
        ref.current.userData.currentGeom = geom;
        ref.current.userData.currentThreshold = threshold;
        ref.current.geometry = new EdgesGeometry(geom, threshold);
      }
    }
  });
  return React21.createElement("lineSegments", _extends({
    ref,
    raycast: () => null
  }, props), children ? children : React21.createElement("lineBasicMaterial", {
    color
  }));
}

// node_modules/@react-three/drei/core/Trail.js
var React22 = __toESM(require_react());
var defaults = {
  width: 0.2,
  length: 1,
  decay: 1,
  local: false,
  stride: 0,
  interval: 1
};
var shiftLeft = (collection, steps = 1) => {
  collection.set(collection.subarray(steps));
  collection.fill(-Infinity, -steps);
  return collection;
};
function useTrail(target2, settings) {
  const {
    length,
    local,
    decay,
    interval,
    stride
  } = {
    ...defaults,
    ...settings
  };
  const points = React22.useRef();
  const [worldPosition] = React22.useState(() => new Vector3());
  React22.useLayoutEffect(() => {
    if (target2) {
      points.current = Float32Array.from({
        length: length * 10 * 3
      }, (_, i2) => target2.position.getComponent(i2 % 3));
    }
  }, [length, target2]);
  const prevPosition = React22.useRef(new Vector3());
  const frameCount = React22.useRef(0);
  useFrame(() => {
    if (!target2)
      return;
    if (!points.current)
      return;
    if (frameCount.current === 0) {
      let newPosition;
      if (local) {
        newPosition = target2.position;
      } else {
        target2.getWorldPosition(worldPosition);
        newPosition = worldPosition;
      }
      const steps = 1 * decay;
      for (let i2 = 0; i2 < steps; i2++) {
        if (newPosition.distanceTo(prevPosition.current) < stride)
          continue;
        shiftLeft(points.current, 3);
        points.current.set(newPosition.toArray(), points.current.length - 3);
      }
      prevPosition.current.copy(newPosition);
    }
    frameCount.current++;
    frameCount.current = frameCount.current % interval;
  });
  return points;
}
var Trail = React22.forwardRef((props, forwardRef56) => {
  const {
    children
  } = props;
  const {
    width,
    length,
    decay,
    local,
    stride,
    interval
  } = {
    ...defaults,
    ...props
  };
  const {
    color = "hotpink",
    attenuation,
    target: target2
  } = props;
  const size = useThree((s) => s.size);
  const scene = useThree((s) => s.scene);
  const ref = React22.useRef(null);
  const [anchor, setAnchor] = React22.useState(null);
  const points = useTrail(anchor, {
    length,
    decay,
    local,
    stride,
    interval
  });
  React22.useEffect(() => {
    const t = (target2 == null ? void 0 : target2.current) || ref.current.children.find((o) => {
      return o instanceof Object3D;
    });
    if (t) {
      setAnchor(t);
    }
  }, [points, target2]);
  const geo = React22.useMemo(() => new MeshLineGeometry(), []);
  const mat = React22.useMemo(() => {
    var _matOverride;
    const m = new MeshLineMaterial({
      lineWidth: 0.1 * width,
      color,
      sizeAttenuation: 1,
      resolution: new Vector2(size.width, size.height)
    });
    let matOverride;
    if (children) {
      if (Array.isArray(children)) {
        matOverride = children.find((child) => {
          const c = child;
          return typeof c.type === "string" && c.type === "meshLineMaterial";
        });
      } else {
        const c = children;
        if (typeof c.type === "string" && c.type === "meshLineMaterial") {
          matOverride = c;
        }
      }
    }
    if (typeof ((_matOverride = matOverride) == null ? void 0 : _matOverride.props) === "object") {
      m.setValues(matOverride.props);
    }
    return m;
  }, [width, color, size, children]);
  React22.useEffect(() => {
    mat.uniforms.resolution.value.set(size.width, size.height);
  }, [size]);
  useFrame(() => {
    if (!points.current)
      return;
    geo.setPoints(points.current, attenuation);
  });
  return React22.createElement("group", null, createPortal(React22.createElement("mesh", {
    ref: forwardRef56,
    geometry: geo,
    material: mat
  }), scene), React22.createElement("group", {
    ref
  }, children));
});

// node_modules/@react-three/drei/core/Sampler.js
var React23 = __toESM(require_react());
function useSurfaceSampler(mesh, count = 16, transform, weight, instanceMesh) {
  const [buffer, setBuffer2] = React23.useState(() => {
    const arr = Array.from({
      length: count
    }, () => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]).flat();
    return new InstancedBufferAttribute(Float32Array.from(arr), 16);
  });
  React23.useEffect(() => {
    if (typeof mesh.current === "undefined")
      return;
    const sampler = new MeshSurfaceSampler(mesh.current);
    if (weight) {
      sampler.setWeightAttribute(weight);
    }
    sampler.build();
    const position2 = new Vector3();
    const normal = new Vector3();
    const color = new Color();
    const dummy2 = new Object3D();
    mesh.current.updateMatrixWorld(true);
    for (let i2 = 0; i2 < count; i2++) {
      sampler.sample(position2, normal, color);
      if (typeof transform === "function") {
        transform({
          dummy: dummy2,
          sampledMesh: mesh.current,
          position: position2,
          normal,
          color
        }, i2);
      } else {
        dummy2.position.copy(position2);
      }
      dummy2.updateMatrix();
      if (instanceMesh != null && instanceMesh.current) {
        instanceMesh.current.setMatrixAt(i2, dummy2.matrix);
      }
      dummy2.matrix.toArray(buffer.array, i2 * 16);
    }
    if (instanceMesh != null && instanceMesh.current) {
      instanceMesh.current.instanceMatrix.needsUpdate = true;
    }
    buffer.needsUpdate = true;
    setBuffer2(buffer.clone());
  }, [mesh, instanceMesh, weight, count, transform]);
  return buffer;
}
function Sampler({
  children,
  weight,
  transform,
  instances,
  mesh,
  count = 16,
  ...props
}) {
  const group = React23.useRef(null);
  const instancedRef = React23.useRef(null);
  const meshToSampleRef = React23.useRef(null);
  React23.useEffect(() => {
    var _instances$current, _mesh$current;
    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find((c) => c.hasOwnProperty("instanceMatrix"));
    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find((c) => c.type === "Mesh");
  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);
  useSurfaceSampler(meshToSampleRef, count, transform, weight, instancedRef);
  return React23.createElement("group", _extends({
    ref: group
  }, props), children);
}

// node_modules/@react-three/drei/core/ComputedAttribute.js
var React24 = __toESM(require_react());
var ComputedAttribute = ({
  compute,
  name,
  ...props
}) => {
  const [bufferAttribute] = React24.useState(() => new BufferAttribute(new Float32Array(0), 1));
  const primitive = React24.useRef(null);
  React24.useLayoutEffect(() => {
    if (primitive.current) {
      var _ref;
      const parent = (_ref = primitive.current.parent) !== null && _ref !== void 0 ? _ref : primitive.current.__r3f.parent;
      const attr = compute(parent);
      primitive.current.copy(attr);
    }
  }, [compute]);
  return React24.createElement("primitive", _extends({
    ref: primitive,
    object: bufferAttribute,
    attach: `attributes-${name}`
  }, props));
};

// node_modules/@react-three/drei/core/Clone.js
var React25 = __toESM(require_react());
var import_lodash = __toESM(require_lodash());
function createSpread(child, {
  keys = ["near", "far", "color", "distance", "decay", "penumbra", "angle", "intensity", "skeleton", "visible", "castShadow", "receiveShadow", "morphTargetDictionary", "morphTargetInfluences", "name", "geometry", "material", "position", "rotation", "scale", "up", "userData", "bindMode", "bindMatrix", "bindMatrixInverse", "skeleton"],
  deep,
  inject,
  castShadow,
  receiveShadow
}) {
  let spread = (0, import_lodash.default)(child, keys);
  if (deep) {
    if (spread.geometry && deep !== "materialsOnly")
      spread.geometry = spread.geometry.clone();
    if (spread.material && deep !== "geometriesOnly")
      spread.material = spread.material.clone();
  }
  if (inject) {
    if (typeof inject === "function")
      spread = {
        ...spread,
        children: inject(child)
      };
    else if (React25.isValidElement(inject))
      spread = {
        ...spread,
        children: inject
      };
    else
      spread = {
        ...spread,
        ...inject
      };
  }
  if (child instanceof Mesh) {
    if (castShadow)
      spread.castShadow = true;
    if (receiveShadow)
      spread.receiveShadow = true;
  }
  return spread;
}
var Clone = React25.forwardRef(({
  isChild = false,
  object,
  children,
  deep,
  castShadow,
  receiveShadow,
  inject,
  keys,
  ...props
}, forwardRef56) => {
  var _object;
  const config = {
    keys,
    deep,
    inject,
    castShadow,
    receiveShadow
  };
  object = React25.useMemo(() => {
    if (isChild === false && !Array.isArray(object)) {
      let isSkinned = false;
      object.traverse((object2) => {
        if (object2.isSkinnedMesh)
          isSkinned = true;
      });
      if (isSkinned)
        return SkeletonUtils.clone(object);
    }
    return object;
  }, [object, isChild]);
  if (Array.isArray(object)) {
    return React25.createElement("group", _extends({}, props, {
      ref: forwardRef56
    }), object.map((o) => React25.createElement(Clone, _extends({
      key: o.uuid,
      object: o
    }, config))), children);
  }
  const {
    children: injectChildren,
    ...spread
  } = createSpread(object, config);
  const Element = object.type[0].toLowerCase() + object.type.slice(1);
  return React25.createElement(Element, _extends({}, spread, props, {
    ref: forwardRef56
  }), ((_object = object) == null ? void 0 : _object.children).map((child) => {
    if (child.type === "Bone")
      return React25.createElement("primitive", _extends({
        key: child.uuid,
        object: child
      }, config));
    return React25.createElement(Clone, _extends({
      key: child.uuid,
      object: child
    }, config, {
      isChild: true
    }));
  }), children, injectChildren);
});

// node_modules/@react-three/drei/core/MarchingCubes.js
var React26 = __toESM(require_react());
var globalContext = React26.createContext(null);
var MarchingCubes2 = React26.forwardRef(({
  resolution = 28,
  maxPolyCount = 1e4,
  enableUvs = false,
  enableColors = false,
  children,
  ...props
}, ref) => {
  const marchingCubesRef = React26.useRef(null);
  const marchingCubes = React26.useMemo(() => new MarchingCubes(resolution, null, enableUvs, enableColors, maxPolyCount), [resolution, maxPolyCount, enableUvs, enableColors]);
  const api = React26.useMemo(() => ({
    getParent: () => marchingCubesRef
  }), []);
  useFrame(() => {
    marchingCubes.reset();
  }, -1);
  return React26.createElement(React26.Fragment, null, React26.createElement("primitive", _extends({
    object: marchingCubes,
    ref: react_merge_refs_esm_default([marchingCubesRef, ref])
  }, props), React26.createElement(globalContext.Provider, {
    value: api
  }, children)));
});
var MarchingCube = React26.forwardRef(({
  strength = 0.5,
  subtract = 12,
  color,
  ...props
}, ref) => {
  const {
    getParent
  } = React26.useContext(globalContext);
  const parentRef = React26.useMemo(() => getParent(), [getParent]);
  const cubeRef = React26.useRef();
  const vec = new Vector3();
  useFrame((state) => {
    if (!parentRef.current || !cubeRef.current)
      return;
    cubeRef.current.getWorldPosition(vec);
    parentRef.current.addBall(0.5 + vec.x * 0.5, 0.5 + vec.y * 0.5, 0.5 + vec.z * 0.5, strength, subtract, color);
  });
  return React26.createElement("group", _extends({
    ref: react_merge_refs_esm_default([ref, cubeRef])
  }, props));
});
var MarchingPlane = React26.forwardRef(({
  planeType: _planeType = "x",
  strength = 0.5,
  subtract = 12,
  ...props
}, ref) => {
  const {
    getParent
  } = React26.useContext(globalContext);
  const parentRef = React26.useMemo(() => getParent(), [getParent]);
  const wallRef = React26.useRef();
  const planeType = React26.useMemo(() => _planeType === "x" ? "addPlaneX" : _planeType === "y" ? "addPlaneY" : "addPlaneZ", [_planeType]);
  useFrame(() => {
    if (!parentRef.current || !wallRef.current)
      return;
    parentRef.current[planeType](strength, subtract);
  });
  return React26.createElement("group", _extends({
    ref: react_merge_refs_esm_default([ref, wallRef])
  }, props));
});

// node_modules/@react-three/drei/core/Decal.js
var React27 = __toESM(require_react());
function isArray(vec) {
  return Array.isArray(vec);
}
function vecToArray(vec = [0, 0, 0]) {
  if (isArray(vec)) {
    return vec;
  } else if (vec instanceof Vector3 || vec instanceof Euler) {
    return [vec.x, vec.y, vec.z];
  } else {
    return [vec, vec, vec];
  }
}
function Decal({
  debug,
  mesh,
  children,
  position: position2,
  rotation: rotation2,
  scale: scale2,
  ...props
}) {
  const ref = React27.useRef(null);
  const helper = React27.useRef(null);
  React27.useLayoutEffect(() => {
    const parent = (mesh == null ? void 0 : mesh.current) || ref.current.parent;
    const target2 = ref.current;
    if (!(parent instanceof Mesh)) {
      throw new Error('Decal must have a Mesh as parent or specify its "mesh" prop');
    }
    const state = {
      position: new Vector3(),
      rotation: new Euler(),
      scale: new Vector3(1, 1, 1)
    };
    if (parent) {
      applyProps(state, {
        position: position2,
        scale: scale2
      });
      const matrixWorld = parent.matrixWorld.clone();
      parent.matrixWorld.identity();
      if (!rotation2 || typeof rotation2 === "number") {
        const o = new Object3D();
        o.position.copy(state.position);
        o.lookAt(parent.position);
        if (typeof rotation2 === "number")
          o.rotateZ(rotation2);
        applyProps(state, {
          rotation: o.rotation
        });
      } else {
        applyProps(state, {
          rotation: rotation2
        });
      }
      target2.geometry = new DecalGeometry(parent, state.position, state.rotation, state.scale);
      if (helper.current)
        applyProps(helper.current, state);
      parent.matrixWorld = matrixWorld;
      return () => {
        target2.geometry.dispose();
      };
    }
  }, [mesh, ...vecToArray(position2), ...vecToArray(scale2), ...vecToArray(rotation2)]);
  return React27.createElement("mesh", {
    ref
  }, children || React27.createElement("meshStandardMaterial", _extends({
    transparent: true,
    polygonOffset: true,
    polygonOffsetFactor: -10
  }, props)), debug && React27.createElement("mesh", {
    ref: helper
  }, React27.createElement("boxGeometry", null), React27.createElement("meshNormalMaterial", {
    wireframe: true
  }), React27.createElement("axesHelper", null)));
}

// node_modules/@react-three/drei/core/Svg.js
var React28 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var Svg = (0, import_react4.forwardRef)(function R3FSvg({
  src,
  skipFill,
  skipStrokes,
  fillMaterial,
  strokeMaterial,
  fillMeshProps,
  strokeMeshProps,
  ...props
}, ref) {
  const svg = useLoader(SVGLoader, !src.startsWith("<svg") ? src : `data:image/svg+xml;utf8,${src}`);
  const strokeGeometries = (0, import_react4.useMemo)(() => skipStrokes ? [] : svg.paths.map((path) => {
    var _path$userData;
    return ((_path$userData = path.userData) == null ? void 0 : _path$userData.style.stroke) === void 0 || path.userData.style.stroke === "none" ? null : path.subPaths.map((subPath) => SVGLoader.pointsToStroke(subPath.getPoints(), path.userData.style));
  }), [svg, skipStrokes]);
  (0, import_react4.useEffect)(() => {
    return () => strokeGeometries.forEach((group) => group && group.map((g) => g.dispose()));
  }, [strokeGeometries]);
  return React28.createElement("object3D", _extends({
    ref
  }, props), React28.createElement("object3D", {
    scale: [1, -1, 1]
  }, svg.paths.map((path, p) => {
    var _path$userData2, _path$userData3;
    return React28.createElement(import_react4.Fragment, {
      key: p
    }, !skipFill && ((_path$userData2 = path.userData) == null ? void 0 : _path$userData2.style.fill) !== void 0 && path.userData.style.fill !== "none" && SVGLoader.createShapes(path).map((shape, s) => React28.createElement("mesh", _extends({
      key: s
    }, fillMeshProps), React28.createElement("shapeGeometry", {
      args: [shape]
    }), React28.createElement("meshBasicMaterial", _extends({
      color: path.userData.style.fill,
      opacity: path.userData.style.fillOpacity,
      transparent: true,
      side: DoubleSide,
      depthWrite: false
    }, fillMaterial)))), !skipStrokes && ((_path$userData3 = path.userData) == null ? void 0 : _path$userData3.style.stroke) !== void 0 && path.userData.style.stroke !== "none" && path.subPaths.map((_subPath, s) => React28.createElement("mesh", _extends({
      key: s,
      geometry: strokeGeometries[p][s]
    }, strokeMeshProps), React28.createElement("meshBasicMaterial", _extends({
      color: path.userData.style.stroke,
      opacity: path.userData.style.strokeOpacity,
      transparent: true,
      side: DoubleSide,
      depthWrite: false
    }, strokeMaterial)))));
  })));
});

// node_modules/@react-three/drei/core/AsciiRenderer.js
var React29 = __toESM(require_react());
function AsciiRenderer({
  renderIndex = 1,
  bgColor = "black",
  fgColor = "white",
  characters = " .:-+*=%@#",
  invert = true,
  color = false,
  resolution = 0.15
}) {
  const {
    size,
    gl,
    scene,
    camera
  } = useThree();
  const effect = React29.useMemo(() => {
    const effect2 = new AsciiEffect(gl, characters, {
      invert,
      color,
      resolution
    });
    effect2.domElement.style.position = "absolute";
    effect2.domElement.style.top = "0px";
    effect2.domElement.style.left = "0px";
    effect2.domElement.style.pointerEvents = "none";
    return effect2;
  }, [characters, invert, color, resolution]);
  React29.useLayoutEffect(() => {
    effect.domElement.style.color = fgColor;
    effect.domElement.style.backgroundColor = bgColor;
  }, [fgColor, bgColor]);
  React29.useEffect(() => {
    gl.domElement.style.opacity = "0";
    gl.domElement.parentNode.appendChild(effect.domElement);
    return () => {
      gl.domElement.style.opacity = "1";
      gl.domElement.parentNode.removeChild(effect.domElement);
    };
  }, [effect]);
  React29.useEffect(() => {
    effect.setSize(size.width, size.height);
  }, [effect, size]);
  useFrame((state) => {
    effect.render(scene, camera);
  }, renderIndex);
}

// node_modules/@react-three/drei/core/OrthographicCamera.js
var React31 = __toESM(require_react());

// node_modules/@react-three/drei/core/useFBO.js
var React30 = __toESM(require_react());
function useFBO(width, height, settings) {
  const {
    gl,
    size,
    viewport
  } = useThree();
  const _width = typeof width === "number" ? width : size.width * viewport.dpr;
  const _height = typeof height === "number" ? height : size.height * viewport.dpr;
  const _settings = (typeof width === "number" ? settings : width) || {};
  const {
    samples,
    ...targetSettings
  } = _settings;
  const target2 = React30.useMemo(() => {
    let target3;
    target3 = new WebGLRenderTarget(_width, _height, {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      encoding: gl.outputEncoding,
      type: HalfFloatType,
      ...targetSettings
    });
    target3.samples = samples;
    return target3;
  }, []);
  React30.useLayoutEffect(() => {
    target2.setSize(_width, _height);
    if (samples)
      target2.samples = samples;
  }, [samples, target2, _width, _height]);
  React30.useEffect(() => {
    return () => target2.dispose();
  }, []);
  return target2;
}

// node_modules/@react-three/drei/core/OrthographicCamera.js
var isFunction = (node) => typeof node === "function";
var OrthographicCamera2 = React31.forwardRef(({
  envMap,
  resolution = 256,
  frames = Infinity,
  children,
  makeDefault,
  ...props
}, ref) => {
  const set = useThree(({
    set: set2
  }) => set2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const size = useThree(({
    size: size2
  }) => size2);
  const cameraRef = React31.useRef(null);
  const groupRef = React31.useRef(null);
  const fbo = useFBO(resolution);
  React31.useLayoutEffect(() => {
    if (!props.manual) {
      cameraRef.current.updateProjectionMatrix();
    }
  }, [size, props]);
  React31.useLayoutEffect(() => {
    cameraRef.current.updateProjectionMatrix();
  });
  React31.useLayoutEffect(() => {
    if (makeDefault) {
      const oldCam = camera;
      set(() => ({
        camera: cameraRef.current
      }));
      return () => set(() => ({
        camera: oldCam
      }));
    }
  }, [cameraRef, makeDefault, set]);
  let count = 0;
  let oldEnvMap = null;
  const functional = isFunction(children);
  useFrame((state) => {
    if (functional && (frames === Infinity || count < frames)) {
      groupRef.current.visible = false;
      state.gl.setRenderTarget(fbo);
      oldEnvMap = state.scene.background;
      if (envMap)
        state.scene.background = envMap;
      state.gl.render(state.scene, cameraRef.current);
      state.scene.background = oldEnvMap;
      state.gl.setRenderTarget(null);
      groupRef.current.visible = true;
      count++;
    }
  });
  return React31.createElement(React31.Fragment, null, React31.createElement("orthographicCamera", _extends({
    left: size.width / -2,
    right: size.width / 2,
    top: size.height / 2,
    bottom: size.height / -2,
    ref: react_merge_refs_esm_default([cameraRef, ref])
  }, props), !functional && children), React31.createElement("group", {
    ref: groupRef
  }, functional && children(fbo.texture)));
});

// node_modules/@react-three/drei/core/PerspectiveCamera.js
var React32 = __toESM(require_react());
var isFunction2 = (node) => typeof node === "function";
var PerspectiveCamera2 = React32.forwardRef(({
  envMap,
  resolution = 256,
  frames = Infinity,
  makeDefault,
  children,
  ...props
}, ref) => {
  const set = useThree(({
    set: set2
  }) => set2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const size = useThree(({
    size: size2
  }) => size2);
  const cameraRef = React32.useRef(null);
  const groupRef = React32.useRef(null);
  const fbo = useFBO(resolution);
  React32.useLayoutEffect(() => {
    if (!props.manual) {
      cameraRef.current.aspect = size.width / size.height;
    }
  }, [size, props]);
  React32.useLayoutEffect(() => {
    cameraRef.current.updateProjectionMatrix();
  });
  let count = 0;
  let oldEnvMap = null;
  const functional = isFunction2(children);
  useFrame((state) => {
    if (functional && (frames === Infinity || count < frames)) {
      groupRef.current.visible = false;
      state.gl.setRenderTarget(fbo);
      oldEnvMap = state.scene.background;
      if (envMap)
        state.scene.background = envMap;
      state.gl.render(state.scene, cameraRef.current);
      state.scene.background = oldEnvMap;
      state.gl.setRenderTarget(null);
      groupRef.current.visible = true;
      count++;
    }
  });
  React32.useLayoutEffect(() => {
    if (makeDefault) {
      const oldCam = camera;
      set(() => ({
        camera: cameraRef.current
      }));
      return () => set(() => ({
        camera: oldCam
      }));
    }
  }, [cameraRef, makeDefault, set]);
  return React32.createElement(React32.Fragment, null, React32.createElement("perspectiveCamera", _extends({
    ref: react_merge_refs_esm_default([cameraRef, ref])
  }, props), !functional && children), React32.createElement("group", {
    ref: groupRef
  }, functional && children(fbo.texture)));
});

// node_modules/@react-three/drei/core/CubeCamera.js
var React33 = __toESM(require_react());
function CubeCamera2({
  children,
  fog,
  frames = Infinity,
  resolution = 256,
  near = 0.1,
  far = 1e3,
  envMap,
  ...props
}) {
  const ref = React33.useRef();
  const [camera, setCamera] = React33.useState(null);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const fbo = React33.useMemo(() => {
    const fbo2 = new WebGLCubeRenderTarget(resolution);
    fbo2.texture.encoding = gl.outputEncoding;
    fbo2.texture.type = HalfFloatType;
    return fbo2;
  }, [resolution]);
  let count = 0;
  let originalFog;
  let originalBackground;
  useFrame(() => {
    if (camera && ref.current && (frames === Infinity || count < frames)) {
      ref.current.visible = false;
      originalFog = scene.fog;
      originalBackground = scene.background;
      scene.background = envMap || originalBackground;
      scene.fog = fog || originalFog;
      camera.update(gl, scene);
      scene.fog = originalFog;
      scene.background = originalBackground;
      ref.current.visible = true;
      count++;
    }
  });
  return React33.createElement("group", props, React33.createElement("cubeCamera", {
    ref: setCamera,
    args: [near, far, fbo]
  }), React33.createElement("group", {
    ref
  }, children(fbo.texture)));
}

// node_modules/@react-three/drei/core/DeviceOrientationControls.js
var React34 = __toESM(require_react());
var DeviceOrientationControls2 = React34.forwardRef((props, ref) => {
  const {
    camera,
    onChange,
    makeDefault,
    ...rest
  } = props;
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explCamera = camera || defaultCamera;
  const [controls] = React34.useState(() => new DeviceOrientationControls(explCamera));
  React34.useEffect(() => {
    const callback = (e) => {
      invalidate();
      if (onChange)
        onChange(e);
    };
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("change", callback);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("change", callback);
  }, [onChange, controls, invalidate]);
  useFrame(() => controls == null ? void 0 : controls.update(), -1);
  React34.useEffect(() => {
    const current = controls;
    current == null ? void 0 : current.connect();
    return () => current == null ? void 0 : current.dispose();
  }, [controls]);
  React34.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return controls ? React34.createElement("primitive", _extends({
    ref,
    object: controls
  }, rest)) : null;
});

// node_modules/@react-three/drei/core/FlyControls.js
var React35 = __toESM(require_react());
var FlyControls2 = React35.forwardRef(({
  domElement,
  ...props
}, fref) => {
  const {
    onChange,
    makeDefault,
    ...rest
  } = props;
  const invalidate = useThree((state) => state.invalidate);
  const camera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React35.useMemo(() => new FlyControls(camera), [camera]);
  React35.useEffect(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, controls, invalidate]);
  React35.useEffect(() => {
    const callback = (e) => {
      invalidate();
      if (onChange)
        onChange(e);
    };
    controls.addEventListener == null ? void 0 : controls.addEventListener("change", callback);
    return () => controls.removeEventListener == null ? void 0 : controls.removeEventListener("change", callback);
  }, [onChange, invalidate]);
  React35.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  useFrame((_, delta) => controls.update(delta));
  return React35.createElement("primitive", _extends({
    ref: fref,
    object: controls,
    args: [camera, explDomElement]
  }, rest));
});

// node_modules/@react-three/drei/core/MapControls.js
var React36 = __toESM(require_react());
var MapControls2 = React36.forwardRef((props = {
  enableDamping: true
}, ref) => {
  const {
    domElement,
    camera,
    makeDefault,
    onChange,
    onStart,
    onEnd,
    ...rest
  } = props;
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const explDomElement = domElement || events.connected || gl.domElement;
  const explCamera = camera || defaultCamera;
  const controls = React36.useMemo(() => new MapControls(explCamera), [explCamera]);
  React36.useEffect(() => {
    controls.connect(explDomElement);
    const callback = (e) => {
      invalidate();
      if (onChange)
        onChange(e);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      controls.dispose();
      controls.removeEventListener("change", callback);
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
    };
  }, [onChange, onStart, onEnd, controls, invalidate, explDomElement]);
  React36.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  useFrame(() => controls.update(), -1);
  return React36.createElement("primitive", _extends({
    ref,
    object: controls,
    enableDamping: true
  }, rest));
});

// node_modules/@react-three/drei/core/OrbitControls.js
var React37 = __toESM(require_react());
var OrbitControls2 = React37.forwardRef(({
  makeDefault,
  camera,
  regress,
  domElement,
  enableDamping = true,
  onChange,
  onStart,
  onEnd,
  ...restProps
}, ref) => {
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const performance2 = useThree((state) => state.performance);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React37.useMemo(() => new OrbitControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled)
      controls.update();
  }, -1);
  React37.useEffect(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  React37.useEffect(() => {
    const callback = (e) => {
      invalidate();
      if (regress)
        performance2.regress();
      if (onChange)
        onChange(e);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
      controls.removeEventListener("change", callback);
    };
  }, [onChange, onStart, onEnd, controls, invalidate]);
  React37.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React37.createElement("primitive", _extends({
    ref,
    object: controls,
    enableDamping
  }, restProps));
});

// node_modules/@react-three/drei/core/TrackballControls.js
var React38 = __toESM(require_react());
var TrackballControls2 = React38.forwardRef(({
  makeDefault,
  camera,
  domElement,
  regress,
  onChange,
  onStart,
  onEnd,
  ...restProps
}, ref) => {
  const {
    invalidate,
    camera: defaultCamera,
    gl,
    events,
    set,
    get,
    performance: performance2,
    viewport
  } = useThree();
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React38.useMemo(() => new TrackballControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled)
      controls.update();
  }, -1);
  React38.useEffect(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  React38.useEffect(() => {
    const callback = (e) => {
      invalidate();
      if (regress)
        performance2.regress();
      if (onChange)
        onChange(e);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
      controls.removeEventListener("change", callback);
    };
  }, [onChange, onStart, onEnd, controls, invalidate]);
  React38.useEffect(() => {
    controls.handleResize();
  }, [viewport]);
  React38.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React38.createElement("primitive", _extends({
    ref,
    object: controls
  }, restProps));
});

// node_modules/@react-three/drei/core/ArcballControls.js
var React39 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var ArcballControls2 = (0, import_react5.forwardRef)(({
  camera,
  makeDefault,
  regress,
  domElement,
  onChange,
  onStart,
  onEnd,
  ...restProps
}, ref) => {
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const performance2 = useThree((state) => state.performance);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = (0, import_react5.useMemo)(() => new ArcballControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled)
      controls.update();
  }, -1);
  (0, import_react5.useEffect)(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  (0, import_react5.useEffect)(() => {
    const callback = (e) => {
      invalidate();
      if (regress)
        performance2.regress();
      if (onChange)
        onChange(e);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      controls.removeEventListener("change", callback);
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
    };
  }, [onChange, onStart, onEnd]);
  (0, import_react5.useEffect)(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React39.createElement("primitive", _extends({
    ref,
    object: controls
  }, restProps));
});

// node_modules/@react-three/drei/core/TransformControls.js
var import_lodash2 = __toESM(require_lodash2());
var import_lodash3 = __toESM(require_lodash());
var React40 = __toESM(require_react());
var TransformControls2 = React40.forwardRef(({
  children,
  domElement,
  onChange,
  onMouseDown,
  onMouseUp,
  onObjectChange,
  object,
  makeDefault,
  ...props
}, ref) => {
  const transformOnlyPropNames = ["enabled", "axis", "mode", "translationSnap", "rotationSnap", "scaleSnap", "space", "size", "showX", "showY", "showZ"];
  const {
    camera,
    ...rest
  } = props;
  const transformProps = (0, import_lodash3.default)(rest, transformOnlyPropNames);
  const objectProps = (0, import_lodash2.default)(rest, transformOnlyPropNames);
  const defaultControls = useThree((state) => state.controls);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React40.useMemo(() => new TransformControls(explCamera, explDomElement), [explCamera, explDomElement]);
  const group = React40.useRef();
  React40.useLayoutEffect(() => {
    if (object) {
      controls.attach(object instanceof Object3D ? object : object.current);
    } else if (group.current instanceof Object3D) {
      controls.attach(group.current);
    }
    return () => void controls.detach();
  }, [object, children, controls]);
  React40.useEffect(() => {
    if (defaultControls) {
      const callback = (event) => defaultControls.enabled = !event.value;
      controls.addEventListener("dragging-changed", callback);
      return () => controls.removeEventListener("dragging-changed", callback);
    }
  }, [controls, defaultControls]);
  const onChangeRef = React40.useRef();
  const onMouseDownRef = React40.useRef();
  const onMouseUpRef = React40.useRef();
  const onObjectChangeRef = React40.useRef();
  React40.useLayoutEffect(() => void (onChangeRef.current = onChange), [onChange]);
  React40.useLayoutEffect(() => void (onMouseDownRef.current = onMouseDown), [onMouseDown]);
  React40.useLayoutEffect(() => void (onMouseUpRef.current = onMouseUp), [onMouseUp]);
  React40.useLayoutEffect(() => void (onObjectChangeRef.current = onObjectChange), [onObjectChange]);
  React40.useEffect(() => {
    const onChange2 = (e) => {
      invalidate();
      onChangeRef.current == null ? void 0 : onChangeRef.current(e);
    };
    const onMouseDown2 = (e) => onMouseDownRef.current == null ? void 0 : onMouseDownRef.current(e);
    const onMouseUp2 = (e) => onMouseUpRef.current == null ? void 0 : onMouseUpRef.current(e);
    const onObjectChange2 = (e) => onObjectChangeRef.current == null ? void 0 : onObjectChangeRef.current(e);
    controls.addEventListener("change", onChange2);
    controls.addEventListener("mouseDown", onMouseDown2);
    controls.addEventListener("mouseUp", onMouseUp2);
    controls.addEventListener("objectChange", onObjectChange2);
    return () => {
      controls.removeEventListener("change", onChange2);
      controls.removeEventListener("mouseDown", onMouseDown2);
      controls.removeEventListener("mouseUp", onMouseUp2);
      controls.removeEventListener("objectChange", onObjectChange2);
    };
  }, [invalidate, controls]);
  React40.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return controls ? React40.createElement(React40.Fragment, null, React40.createElement("primitive", _extends({
    ref,
    object: controls
  }, transformProps)), React40.createElement("group", _extends({
    ref: group
  }, objectProps), children)) : null;
});

// node_modules/@react-three/drei/core/PointerLockControls.js
var React41 = __toESM(require_react());
var PointerLockControls2 = React41.forwardRef(({
  domElement,
  selector,
  onChange,
  onLock,
  onUnlock,
  enabled = true,
  makeDefault,
  ...props
}, ref) => {
  const {
    camera,
    ...rest
  } = props;
  const setEvents = useThree((state) => state.setEvents);
  const gl = useThree((state) => state.gl);
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const events = useThree((state) => state.events);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const [controls] = React41.useState(() => new PointerLockControls(explCamera));
  React41.useEffect(() => {
    if (enabled) {
      controls.connect(explDomElement);
      const oldComputeOffsets = get().events.compute;
      setEvents({
        compute(event, state) {
          const offsetX = state.size.width / 2;
          const offsetY = state.size.height / 2;
          state.pointer.set(offsetX / state.size.width * 2 - 1, -(offsetY / state.size.height) * 2 + 1);
          state.raycaster.setFromCamera(state.pointer, state.camera);
        }
      });
      return () => {
        controls.disconnect();
        setEvents({
          compute: oldComputeOffsets
        });
      };
    }
  }, [enabled, controls]);
  React41.useEffect(() => {
    const callback = (e) => {
      invalidate();
      if (onChange)
        onChange(e);
    };
    controls.addEventListener("change", callback);
    if (onLock)
      controls.addEventListener("lock", onLock);
    if (onUnlock)
      controls.addEventListener("unlock", onUnlock);
    const handler = () => controls.lock();
    const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];
    elements.forEach((element) => element && element.addEventListener("click", handler));
    return () => {
      controls.removeEventListener("change", callback);
      if (onLock)
        controls.addEventListener("lock", onLock);
      if (onUnlock)
        controls.addEventListener("unlock", onUnlock);
      elements.forEach((element) => element ? element.removeEventListener("click", handler) : void 0);
    };
  }, [onChange, onLock, onUnlock, selector, controls, invalidate]);
  React41.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React41.createElement("primitive", _extends({
    ref,
    object: controls
  }, rest));
});

// node_modules/@react-three/drei/core/FirstPersonControls.js
var React42 = __toESM(require_react());
var FirstPersonControls2 = React42.forwardRef(({
  domElement,
  makeDefault,
  ...props
}, ref) => {
  const camera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explDomElement = domElement || events.connected || gl.domElement;
  const [controls] = React42.useState(() => new FirstPersonControls(camera, explDomElement));
  React42.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  useFrame((_, delta) => {
    controls.update(delta);
  }, -1);
  return controls ? React42.createElement("primitive", _extends({
    ref,
    object: controls
  }, props)) : null;
});

// node_modules/@react-three/drei/core/GizmoHelper.js
var React44 = __toESM(require_react());

// node_modules/@react-three/drei/core/useCamera.js
var React43 = __toESM(require_react());
function useCamera(camera, props) {
  const pointer = useThree((state) => state.pointer);
  const [raycast2] = React43.useState(() => {
    const raycaster = new Raycaster();
    if (props)
      applyProps(raycaster, props, {});
    return function(_, intersects) {
      raycaster.setFromCamera(pointer, camera instanceof Camera ? camera : camera.current);
      const rc = this.constructor.prototype.raycast.bind(this);
      if (rc)
        rc(raycaster, intersects);
    };
  });
  return raycast2;
}

// node_modules/@react-three/drei/core/GizmoHelper.js
var Context = React44.createContext({});
var useGizmoContext = () => {
  return React44.useContext(Context);
};
var turnRate = 2 * Math.PI;
var dummy = new Object3D();
var matrix = new Matrix4();
var [q1, q2] = [new Quaternion(), new Quaternion()];
var target = new Vector3();
var targetPosition = new Vector3();
var isOrbitControls = (controls) => {
  return "minPolarAngle" in controls;
};
var GizmoHelper = ({
  alignment = "bottom-right",
  margin = [80, 80],
  renderPriority = 0,
  autoClear = true,
  onUpdate,
  onTarget,
  children: GizmoHelperComponent
}) => {
  const size = useThree(({
    size: size2
  }) => size2);
  const mainCamera = useThree(({
    camera
  }) => camera);
  const defaultControls = useThree(({
    controls
  }) => controls);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  const invalidate = useThree(({
    invalidate: invalidate2
  }) => invalidate2);
  const backgroundRef = React44.useRef();
  const gizmoRef = React44.useRef();
  const virtualCam = React44.useRef(null);
  const [virtualScene] = React44.useState(() => new Scene());
  const animating = React44.useRef(false);
  const radius = React44.useRef(0);
  const focusPoint = React44.useRef(new Vector3(0, 0, 0));
  const defaultUp = React44.useRef(new Vector3(0, 0, 0));
  React44.useEffect(() => {
    defaultUp.current.copy(mainCamera.up);
  }, [mainCamera]);
  const tweenCamera = React44.useCallback((direction) => {
    animating.current = true;
    if (defaultControls || onTarget)
      focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());
    radius.current = mainCamera.position.distanceTo(target);
    q1.copy(mainCamera.quaternion);
    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);
    dummy.lookAt(targetPosition);
    q2.copy(dummy.quaternion);
    invalidate();
  }, [defaultControls, mainCamera, onTarget, invalidate]);
  React44.useEffect(() => {
    if (scene.background) {
      backgroundRef.current = scene.background;
      scene.background = null;
      virtualScene.background = backgroundRef.current;
    }
    return () => {
      if (backgroundRef.current)
        scene.background = backgroundRef.current;
    };
  }, []);
  useFrame((_, delta) => {
    if (virtualCam.current && gizmoRef.current) {
      var _gizmoRef$current;
      if (animating.current) {
        if (q1.angleTo(q2) < 0.01) {
          animating.current = false;
          if (isOrbitControls(defaultControls)) {
            mainCamera.up.copy(defaultUp.current);
          }
        } else {
          const step = delta * turnRate;
          q1.rotateTowards(q2, step);
          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);
          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();
          mainCamera.quaternion.copy(q1);
          if (onUpdate)
            onUpdate();
          else if (defaultControls)
            defaultControls.update();
          invalidate();
        }
      }
      matrix.copy(mainCamera.matrix).invert();
      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix);
      if (autoClear)
        gl.autoClear = false;
      gl.clearDepth();
      gl.render(virtualScene, virtualCam.current);
    }
  }, renderPriority);
  const raycast2 = useCamera(virtualCam);
  const gizmoHelperContext = React44.useMemo(() => ({
    tweenCamera,
    raycast: raycast2
  }), [tweenCamera]);
  const [marginX, marginY] = margin;
  const x = alignment.endsWith("-center") ? 0 : alignment.endsWith("-left") ? -size.width / 2 + marginX : size.width / 2 - marginX;
  const y = alignment.startsWith("center-") ? 0 : alignment.startsWith("top-") ? size.height / 2 - marginY : -size.height / 2 + marginY;
  return createPortal(React44.createElement(Context.Provider, {
    value: gizmoHelperContext
  }, React44.createElement(OrthographicCamera2, {
    ref: virtualCam,
    position: [0, 0, 200]
  }), React44.createElement("group", {
    ref: gizmoRef,
    position: [x, y, 0]
  }, GizmoHelperComponent)), virtualScene);
};

// node_modules/@react-three/drei/core/GizmoViewcube.js
var React45 = __toESM(require_react());
var colors = {
  bg: "#f0f0f0",
  hover: "#999",
  text: "black",
  stroke: "black"
};
var defaultFaces = ["Right", "Left", "Top", "Bottom", "Front", "Back"];
var makePositionVector = (xyz) => new Vector3(...xyz).multiplyScalar(0.38);
var corners = [[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]].map(makePositionVector);
var cornerDimensions = [0.25, 0.25, 0.25];
var edges = [[1, 1, 0], [1, 0, 1], [1, 0, -1], [1, -1, 0], [0, 1, 1], [0, 1, -1], [0, -1, 1], [0, -1, -1], [-1, 1, 0], [-1, 0, 1], [-1, 0, -1], [-1, -1, 0]].map(makePositionVector);
var edgeDimensions = edges.map((edge) => edge.toArray().map((axis) => axis == 0 ? 0.5 : 0.25));
var FaceMaterial = ({
  hover,
  index,
  font = "20px Inter var, Arial, sans-serif",
  faces = defaultFaces,
  color = colors.bg,
  hoverColor = colors.hover,
  textColor = colors.text,
  strokeColor = colors.stroke,
  opacity = 1
}) => {
  const gl = useThree((state) => state.gl);
  const texture = React45.useMemo(() => {
    const canvas = document.createElement("canvas");
    canvas.width = 128;
    canvas.height = 128;
    const context10 = canvas.getContext("2d");
    context10.fillStyle = color;
    context10.fillRect(0, 0, canvas.width, canvas.height);
    context10.strokeStyle = strokeColor;
    context10.strokeRect(0, 0, canvas.width, canvas.height);
    context10.font = font;
    context10.textAlign = "center";
    context10.fillStyle = textColor;
    context10.fillText(faces[index].toUpperCase(), 64, 76);
    return new CanvasTexture(canvas);
  }, [index, faces, font, color, textColor, strokeColor]);
  return React45.createElement("meshLambertMaterial", {
    map: texture,
    "map-encoding": gl.outputEncoding,
    "map-anisotropy": gl.capabilities.getMaxAnisotropy() || 1,
    attach: `material-${index}`,
    color: hover ? hoverColor : "white",
    transparent: true,
    opacity
  });
};
var FaceCube = (props) => {
  const {
    tweenCamera,
    raycast: raycast2
  } = useGizmoContext();
  const [hover, setHover] = React45.useState(null);
  const handlePointerOut = (e) => {
    e.stopPropagation();
    setHover(null);
  };
  const handleClick = (e) => {
    e.stopPropagation();
    tweenCamera(e.face.normal);
  };
  const handlePointerMove = (e) => {
    e.stopPropagation();
    setHover(Math.floor(e.faceIndex / 2));
  };
  return React45.createElement("mesh", {
    raycast: raycast2,
    onPointerOut: handlePointerOut,
    onPointerMove: handlePointerMove,
    onClick: props.onClick || handleClick
  }, [...Array(6)].map((_, index) => React45.createElement(FaceMaterial, _extends({
    key: index,
    index,
    hover: hover === index
  }, props))), React45.createElement("boxGeometry", null));
};
var EdgeCube = ({
  onClick,
  dimensions,
  position: position2,
  hoverColor = colors.hover
}) => {
  const {
    tweenCamera,
    raycast: raycast2
  } = useGizmoContext();
  const [hover, setHover] = React45.useState(false);
  const handlePointerOut = (e) => {
    e.stopPropagation();
    setHover(false);
  };
  const handlePointerOver = (e) => {
    e.stopPropagation();
    setHover(true);
  };
  const handleClick = (e) => {
    e.stopPropagation();
    tweenCamera(position2);
  };
  return React45.createElement("mesh", {
    scale: 1.01,
    position: position2,
    raycast: raycast2,
    onPointerOver: handlePointerOver,
    onPointerOut: handlePointerOut,
    onClick: onClick || handleClick
  }, React45.createElement("meshBasicMaterial", {
    color: hover ? hoverColor : "white",
    transparent: true,
    opacity: 0.6,
    visible: hover
  }), React45.createElement("boxGeometry", {
    args: dimensions
  }));
};
var GizmoViewcube = (props) => {
  return React45.createElement("group", {
    scale: [60, 60, 60]
  }, React45.createElement(FaceCube, props), edges.map((edge, index) => React45.createElement(EdgeCube, _extends({
    key: index,
    position: edge,
    dimensions: edgeDimensions[index]
  }, props))), corners.map((corner, index) => React45.createElement(EdgeCube, _extends({
    key: index,
    position: corner,
    dimensions: cornerDimensions
  }, props))), React45.createElement("ambientLight", {
    intensity: 0.5
  }), React45.createElement("pointLight", {
    position: [10, 10, 10],
    intensity: 0.5
  }));
};

// node_modules/@react-three/drei/core/GizmoViewport.js
var React46 = __toESM(require_react());
function Axis({
  scale: scale2 = [0.8, 0.05, 0.05],
  color,
  rotation: rotation2
}) {
  return React46.createElement("group", {
    rotation: rotation2
  }, React46.createElement("mesh", {
    position: [0.4, 0, 0]
  }, React46.createElement("boxGeometry", {
    args: scale2
  }), React46.createElement("meshBasicMaterial", {
    color,
    toneMapped: false
  })));
}
function AxisHead({
  onClick,
  font,
  disabled,
  arcStyle,
  label,
  labelColor,
  axisHeadScale = 1,
  ...props
}) {
  const gl = useThree((state) => state.gl);
  const texture = React46.useMemo(() => {
    const canvas = document.createElement("canvas");
    canvas.width = 64;
    canvas.height = 64;
    const context10 = canvas.getContext("2d");
    context10.beginPath();
    context10.arc(32, 32, 16, 0, 2 * Math.PI);
    context10.closePath();
    context10.fillStyle = arcStyle;
    context10.fill();
    if (label) {
      context10.font = font;
      context10.textAlign = "center";
      context10.fillStyle = labelColor;
      context10.fillText(label, 32, 41);
    }
    return new CanvasTexture(canvas);
  }, [arcStyle, label, labelColor, font]);
  const [active, setActive] = React46.useState(false);
  const scale2 = (label ? 1 : 0.75) * (active ? 1.2 : 1) * axisHeadScale;
  const handlePointerOver = (e) => {
    e.stopPropagation();
    setActive(true);
  };
  const handlePointerOut = (e) => {
    e.stopPropagation();
    setActive(false);
  };
  return React46.createElement("sprite", _extends({
    scale: scale2,
    onPointerOver: !disabled ? handlePointerOver : void 0,
    onPointerOut: !disabled ? onClick || handlePointerOut : void 0
  }, props), React46.createElement("spriteMaterial", {
    map: texture,
    "map-encoding": gl.outputEncoding,
    "map-anisotropy": gl.capabilities.getMaxAnisotropy() || 1,
    alphaTest: 0.3,
    opacity: label ? 1 : 0.75,
    toneMapped: false
  }));
}
var GizmoViewport = ({
  hideNegativeAxes,
  hideAxisHeads,
  disabled,
  font = "18px Inter var, Arial, sans-serif",
  axisColors = ["#ff2060", "#20df80", "#2080ff"],
  axisHeadScale = 1,
  axisScale,
  labels = ["X", "Y", "Z"],
  labelColor = "#000",
  onClick,
  ...props
}) => {
  const [colorX, colorY, colorZ] = axisColors;
  const {
    tweenCamera,
    raycast: raycast2
  } = useGizmoContext();
  const axisHeadProps = {
    font,
    disabled,
    labelColor,
    raycast: raycast2,
    onClick,
    axisHeadScale,
    onPointerDown: !disabled ? (e) => {
      tweenCamera(e.object.position);
      e.stopPropagation();
    } : void 0
  };
  return React46.createElement("group", _extends({
    scale: 40
  }, props), React46.createElement(Axis, {
    color: colorX,
    rotation: [0, 0, 0],
    scale: axisScale
  }), React46.createElement(Axis, {
    color: colorY,
    rotation: [0, 0, Math.PI / 2],
    scale: axisScale
  }), React46.createElement(Axis, {
    color: colorZ,
    rotation: [0, -Math.PI / 2, 0],
    scale: axisScale
  }), !hideAxisHeads && React46.createElement(React46.Fragment, null, React46.createElement(AxisHead, _extends({
    arcStyle: colorX,
    position: [1, 0, 0],
    label: labels[0]
  }, axisHeadProps)), React46.createElement(AxisHead, _extends({
    arcStyle: colorY,
    position: [0, 1, 0],
    label: labels[1]
  }, axisHeadProps)), React46.createElement(AxisHead, _extends({
    arcStyle: colorZ,
    position: [0, 0, 1],
    label: labels[2]
  }, axisHeadProps)), !hideNegativeAxes && React46.createElement(React46.Fragment, null, React46.createElement(AxisHead, _extends({
    arcStyle: colorX,
    position: [-1, 0, 0]
  }, axisHeadProps)), React46.createElement(AxisHead, _extends({
    arcStyle: colorY,
    position: [0, -1, 0]
  }, axisHeadProps)), React46.createElement(AxisHead, _extends({
    arcStyle: colorZ,
    position: [0, 0, -1]
  }, axisHeadProps)))), React46.createElement("ambientLight", {
    intensity: 0.5
  }), React46.createElement("pointLight", {
    position: [10, 10, 10],
    intensity: 0.5
  }));
};

// node_modules/@react-three/drei/core/Grid.js
var React47 = __toESM(require_react());
var GridMaterial = shaderMaterial({
  cellSize: 0.5,
  sectionSize: 1,
  fadeDistance: 100,
  fadeStrength: 1,
  cellThickness: 0.5,
  sectionThickness: 1,
  cellColor: new Color(),
  sectionColor: new Color(),
  infiniteGrid: 0,
  followCamera: 0
}, `varying vec3 worldPosition;
   uniform float fadeDistance;
   uniform float infiniteGrid;
   uniform float followCamera;
   void main() {
     vec3 pos = position.xzy * (1. + fadeDistance * infiniteGrid);
     pos.xz += (cameraPosition.xz * followCamera);
     worldPosition = pos;
     gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
   }`, `varying vec3 worldPosition;
   uniform float cellSize;
   uniform float sectionSize;
   uniform vec3 cellColor;
   uniform vec3 sectionColor;
   uniform float fadeDistance;
   uniform float fadeStrength;
   uniform float cellThickness;
   uniform float sectionThickness;
   uniform float infiniteGrid;
   float getGrid(float size, float thickness) {
     vec2 r = worldPosition.xz / size;
     vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);
     float line = min(grid.x, grid.y) + 1. - thickness;
     return 1.0 - min(line, 1.);
   }
   void main() {
     float g1 = getGrid(cellSize, cellThickness);
     float g2 = getGrid(sectionSize, sectionThickness);
     float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);
     vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));
     gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));
     gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);
     if (gl_FragColor.a <= 0.0) discard;
     #include <tonemapping_fragment>
     #include <encodings_fragment>
   }`);
var Grid = React47.forwardRef(({
  args,
  cellColor = "#000000",
  sectionColor = "#2080ff",
  cellSize = 0.5,
  sectionSize = 1,
  followCamera = false,
  infiniteGrid = false,
  fadeDistance = 100,
  fadeStrength = 1,
  cellThickness = 0.5,
  sectionThickness = 1,
  ...props
}, fRef) => {
  extend({
    GridMaterial
  });
  const uniforms1 = {
    cellSize,
    sectionSize,
    cellColor,
    sectionColor,
    cellThickness,
    sectionThickness
  };
  const uniforms2 = {
    fadeDistance,
    fadeStrength,
    infiniteGrid,
    followCamera
  };
  return React47.createElement("mesh", _extends({
    ref: fRef,
    frustumCulled: false
  }, props), React47.createElement("gridMaterial", _extends({
    transparent: true,
    "extensions-derivatives": true,
    side: DoubleSide
  }, uniforms1, uniforms2)), React47.createElement("planeGeometry", {
    args
  }));
});

// node_modules/@react-three/drei/core/useCubeTexture.js
function useCubeTexture(files, {
  path
}) {
  const [cubeTexture] = useLoader(
    // @ts-ignore
    CubeTextureLoader,
    [files],
    (loader) => loader.setPath(path)
  );
  return cubeTexture;
}
useCubeTexture.preload = (files, {
  path
}) => useLoader.preload(
  // @ts-ignore
  CubeTextureLoader,
  [files],
  (loader) => loader.setPath(path)
);

// node_modules/@react-three/drei/core/useFBX.js
function useFBX(path) {
  return useLoader(FBXLoader, path);
}
useFBX.preload = (path) => useLoader.preload(FBXLoader, path);
useFBX.clear = (input) => useLoader.clear(FBXLoader, input);

// node_modules/@react-three/drei/core/useGLTF.js
var dracoLoader = null;
function extensions(useDraco, useMeshopt, extendLoader) {
  return (loader) => {
    if (extendLoader) {
      extendLoader(loader);
    }
    if (useDraco) {
      if (!dracoLoader) {
        dracoLoader = new DRACOLoader();
      }
      dracoLoader.setDecoderPath(typeof useDraco === "string" ? useDraco : "https://www.gstatic.com/draco/versioned/decoders/1.4.3/");
      loader.setDRACOLoader(dracoLoader);
    }
    if (useMeshopt) {
      loader.setMeshoptDecoder(typeof MeshoptDecoder === "function" ? MeshoptDecoder() : MeshoptDecoder);
    }
  };
}
function useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {
  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));
  return gltf;
}
useGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));
useGLTF.clear = (input) => useLoader.clear(GLTFLoader, input);

// node_modules/@react-three/drei/core/useKTX2.js
var import_react6 = __toESM(require_react());
var cdn = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master";
function useKTX2(input, basisPath = `${cdn}/basis/`) {
  const gl = useThree((state) => state.gl);
  const textures = useLoader(KTX2Loader, IsObject(input) ? Object.values(input) : input, (loader) => {
    loader.detectSupport(gl);
    loader.setTranscoderPath(basisPath);
  });
  (0, import_react6.useEffect)(() => {
    const array = Array.isArray(textures) ? textures : [textures];
    array.forEach(gl.initTexture);
  }, [gl, textures]);
  if (IsObject(input)) {
    const keys = Object.keys(input);
    const keyed = {};
    keys.forEach((key) => Object.assign(keyed, {
      [key]: textures[keys.indexOf(key)]
    }));
    return keyed;
  } else {
    return textures;
  }
}
useKTX2.preload = (url, basisPath = `${cdn}/basis/`) => useLoader.preload(KTX2Loader, url, (loader) => {
  loader.setTranscoderPath(basisPath);
});
useKTX2.clear = (input) => useLoader.clear(KTX2Loader, input);

// node_modules/@react-three/drei/core/useVideoTexture.js
var import_react7 = __toESM(require_react());
function useVideoTexture(src, props) {
  const {
    unsuspend,
    start,
    crossOrigin,
    muted,
    loop,
    ...rest
  } = {
    unsuspend: "loadedmetadata",
    crossOrigin: "Anonymous",
    muted: true,
    loop: true,
    start: true,
    playsInline: true,
    ...props
  };
  const gl = useThree((state) => state.gl);
  const texture = suspend(() => new Promise((res, rej) => {
    const video = Object.assign(document.createElement("video"), {
      src,
      crossOrigin,
      loop,
      muted,
      ...rest
    });
    const texture2 = new VideoTexture(video);
    texture2.encoding = gl.outputEncoding;
    video.addEventListener(unsuspend, () => res(texture2));
  }), [src]);
  (0, import_react7.useEffect)(() => void (start && texture.image.play()), [texture, start]);
  return texture;
}

// node_modules/@react-three/drei/core/Stats.js
var React49 = __toESM(require_react());
var import_stats = __toESM(require_stats_min());

// node_modules/@react-three/drei/helpers/useEffectfulState.js
var React48 = __toESM(require_react());
function call(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref != null)
    ref.current = value;
}
function useEffectfulState(fn, deps = [], cb) {
  const [state, set] = React48.useState();
  React48.useLayoutEffect(() => {
    const value = fn();
    set(value);
    call(cb, value);
    return () => call(cb, null);
  }, deps);
  return state;
}

// node_modules/@react-three/drei/core/Stats.js
function Stats({
  showPanel = 0,
  className,
  parent
}) {
  const stats = useEffectfulState(() => new import_stats.default(), []);
  React49.useEffect(() => {
    if (stats) {
      const node = parent && parent.current || document.body;
      stats.showPanel(showPanel);
      node == null ? void 0 : node.appendChild(stats.dom);
      if (className)
        stats.dom.classList.add(...className.split(" ").filter((cls) => cls));
      const begin = addEffect(() => stats.begin());
      const end = addAfterEffect(() => stats.end());
      return () => {
        node == null ? void 0 : node.removeChild(stats.dom);
        begin();
        end();
      };
    }
  }, [parent, stats, className, showPanel]);
  return null;
}

// node_modules/@react-three/drei/core/useDepthBuffer.js
var React50 = __toESM(require_react());
function useDepthBuffer({
  size = 256,
  frames = Infinity
} = {}) {
  const dpr = useThree((state) => state.viewport.dpr);
  const {
    width,
    height
  } = useThree((state) => state.size);
  const w = size || width * dpr;
  const h = size || height * dpr;
  const depthConfig = React50.useMemo(() => {
    const depthTexture = new DepthTexture(w, h);
    depthTexture.format = DepthFormat;
    depthTexture.type = UnsignedShortType;
    return {
      depthTexture
    };
  }, [w, h]);
  let count = 0;
  const depthFBO = useFBO(w, h, depthConfig);
  useFrame((state) => {
    if (frames === Infinity || count < frames) {
      state.gl.setRenderTarget(depthFBO);
      state.gl.render(state.scene, state.camera);
      state.gl.setRenderTarget(null);
      count++;
    }
  });
  return depthFBO.depthTexture;
}

// node_modules/@react-three/drei/core/useAspect.js
function useAspect(width, height, factor = 1) {
  const v4 = useThree((state) => state.viewport);
  const adaptedHeight = height * (v4.aspect > width / height ? v4.width / width : v4.height / height);
  const adaptedWidth = width * (v4.aspect > width / height ? v4.width / width : v4.height / height);
  return [adaptedWidth * factor, adaptedHeight * factor, 1];
}

// node_modules/@react-three/drei/core/useDetectGPU.js
var useDetectGPU = (props) => suspend(() => f(props), ["useDetectGPU"]);

// node_modules/@react-three/drei/core/useHelper.js
var React51 = __toESM(require_react());
function useHelper(object3D, helperConstructor, ...args) {
  const helper = React51.useRef();
  const scene = useThree((state) => state.scene);
  React51.useEffect(() => {
    let currentHelper = void 0;
    if (object3D && object3D != null && object3D.current && helperConstructor) {
      helper.current = currentHelper = new helperConstructor(object3D.current, ...args);
    }
    if (currentHelper) {
      scene.add(currentHelper);
      return () => {
        helper.current = void 0;
        scene.remove(currentHelper);
        currentHelper.dispose == null ? void 0 : currentHelper.dispose();
      };
    }
  }, [scene, helperConstructor, object3D, ...args]);
  useFrame(() => {
    var _helper$current;
    return void ((_helper$current = helper.current) == null ? void 0 : _helper$current.update == null ? void 0 : _helper$current.update());
  });
  return helper;
}

// node_modules/@react-three/drei/core/useBVH.js
var React52 = __toESM(require_react());

// node_modules/three-mesh-bvh/src/core/Constants.js
var CENTER = 0;
var AVERAGE = 1;
var SAH = 2;
var CONTAINED = 2;
var TRIANGLE_INTERSECT_COST = 1.25;
var TRAVERSAL_COST = 1;
var BYTES_PER_NODE = 6 * 4 + 4 + 4;
var IS_LEAFNODE_FLAG = 65535;
var FLOAT32_EPSILON = Math.pow(2, -24);

// node_modules/three-mesh-bvh/src/core/MeshBVHNode.js
var MeshBVHNode = class {
  constructor() {
  }
};

// node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js
function arrayToBox(nodeIndex32, array, target2) {
  target2.min.x = array[nodeIndex32];
  target2.min.y = array[nodeIndex32 + 1];
  target2.min.z = array[nodeIndex32 + 2];
  target2.max.x = array[nodeIndex32 + 3];
  target2.max.y = array[nodeIndex32 + 4];
  target2.max.z = array[nodeIndex32 + 5];
  return target2;
}
function getLongestEdgeIndex(bounds) {
  let splitDimIdx = -1;
  let splitDist = -Infinity;
  for (let i2 = 0; i2 < 3; i2++) {
    const dist = bounds[i2 + 3] - bounds[i2];
    if (dist > splitDist) {
      splitDist = dist;
      splitDimIdx = i2;
    }
  }
  return splitDimIdx;
}
function copyBounds(source, target2) {
  target2.set(source);
}
function unionBounds(a, b, target2) {
  let aVal, bVal;
  for (let d = 0; d < 3; d++) {
    const d3 = d + 3;
    aVal = a[d];
    bVal = b[d];
    target2[d] = aVal < bVal ? aVal : bVal;
    aVal = a[d3];
    bVal = b[d3];
    target2[d3] = aVal > bVal ? aVal : bVal;
  }
}
function expandByTriangleBounds(startIndex, triangleBounds, bounds) {
  for (let d = 0; d < 3; d++) {
    const tCenter = triangleBounds[startIndex + 2 * d];
    const tHalf = triangleBounds[startIndex + 2 * d + 1];
    const tMin = tCenter - tHalf;
    const tMax = tCenter + tHalf;
    if (tMin < bounds[d]) {
      bounds[d] = tMin;
    }
    if (tMax > bounds[d + 3]) {
      bounds[d + 3] = tMax;
    }
  }
}
function computeSurfaceArea(bounds) {
  const d0 = bounds[3] - bounds[0];
  const d1 = bounds[4] - bounds[1];
  const d2 = bounds[5] - bounds[2];
  return 2 * (d0 * d1 + d1 * d2 + d2 * d0);
}

// node_modules/three-mesh-bvh/src/core/buildFunctions.js
function ensureIndex(geo, options) {
  if (!geo.index) {
    const vertexCount = geo.attributes.position.count;
    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;
    let index;
    if (vertexCount > 65535) {
      index = new Uint32Array(new BufferConstructor(4 * vertexCount));
    } else {
      index = new Uint16Array(new BufferConstructor(2 * vertexCount));
    }
    geo.setIndex(new BufferAttribute(index, 1));
    for (let i2 = 0; i2 < vertexCount; i2++) {
      index[i2] = i2;
    }
  }
}
function getRootIndexRanges(geo) {
  if (!geo.groups || !geo.groups.length) {
    return [{ offset: 0, count: geo.index.count / 3 }];
  }
  const ranges = [];
  const rangeBoundaries = /* @__PURE__ */ new Set();
  for (const group of geo.groups) {
    rangeBoundaries.add(group.start);
    rangeBoundaries.add(group.start + group.count);
  }
  const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a, b) => a - b);
  for (let i2 = 0; i2 < sortedBoundaries.length - 1; i2++) {
    const start = sortedBoundaries[i2], end = sortedBoundaries[i2 + 1];
    ranges.push({ offset: start / 3, count: (end - start) / 3 });
  }
  return ranges;
}
function getBounds(triangleBounds, offset, count, target2, centroidTarget = null) {
  let minx = Infinity;
  let miny = Infinity;
  let minz = Infinity;
  let maxx = -Infinity;
  let maxy = -Infinity;
  let maxz = -Infinity;
  let cminx = Infinity;
  let cminy = Infinity;
  let cminz = Infinity;
  let cmaxx = -Infinity;
  let cmaxy = -Infinity;
  let cmaxz = -Infinity;
  const includeCentroid = centroidTarget !== null;
  for (let i2 = offset * 6, end = (offset + count) * 6; i2 < end; i2 += 6) {
    const cx = triangleBounds[i2 + 0];
    const hx = triangleBounds[i2 + 1];
    const lx = cx - hx;
    const rx = cx + hx;
    if (lx < minx)
      minx = lx;
    if (rx > maxx)
      maxx = rx;
    if (includeCentroid && cx < cminx)
      cminx = cx;
    if (includeCentroid && cx > cmaxx)
      cmaxx = cx;
    const cy = triangleBounds[i2 + 2];
    const hy = triangleBounds[i2 + 3];
    const ly = cy - hy;
    const ry = cy + hy;
    if (ly < miny)
      miny = ly;
    if (ry > maxy)
      maxy = ry;
    if (includeCentroid && cy < cminy)
      cminy = cy;
    if (includeCentroid && cy > cmaxy)
      cmaxy = cy;
    const cz = triangleBounds[i2 + 4];
    const hz = triangleBounds[i2 + 5];
    const lz = cz - hz;
    const rz = cz + hz;
    if (lz < minz)
      minz = lz;
    if (rz > maxz)
      maxz = rz;
    if (includeCentroid && cz < cminz)
      cminz = cz;
    if (includeCentroid && cz > cmaxz)
      cmaxz = cz;
  }
  target2[0] = minx;
  target2[1] = miny;
  target2[2] = minz;
  target2[3] = maxx;
  target2[4] = maxy;
  target2[5] = maxz;
  if (includeCentroid) {
    centroidTarget[0] = cminx;
    centroidTarget[1] = cminy;
    centroidTarget[2] = cminz;
    centroidTarget[3] = cmaxx;
    centroidTarget[4] = cmaxy;
    centroidTarget[5] = cmaxz;
  }
}
function getCentroidBounds(triangleBounds, offset, count, centroidTarget) {
  let cminx = Infinity;
  let cminy = Infinity;
  let cminz = Infinity;
  let cmaxx = -Infinity;
  let cmaxy = -Infinity;
  let cmaxz = -Infinity;
  for (let i2 = offset * 6, end = (offset + count) * 6; i2 < end; i2 += 6) {
    const cx = triangleBounds[i2 + 0];
    if (cx < cminx)
      cminx = cx;
    if (cx > cmaxx)
      cmaxx = cx;
    const cy = triangleBounds[i2 + 2];
    if (cy < cminy)
      cminy = cy;
    if (cy > cmaxy)
      cmaxy = cy;
    const cz = triangleBounds[i2 + 4];
    if (cz < cminz)
      cminz = cz;
    if (cz > cmaxz)
      cmaxz = cz;
  }
  centroidTarget[0] = cminx;
  centroidTarget[1] = cminy;
  centroidTarget[2] = cminz;
  centroidTarget[3] = cmaxx;
  centroidTarget[4] = cmaxy;
  centroidTarget[5] = cmaxz;
}
function partition(index, triangleBounds, offset, count, split) {
  let left = offset;
  let right = offset + count - 1;
  const pos = split.pos;
  const axisOffset = split.axis * 2;
  while (true) {
    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {
      left++;
    }
    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {
      right--;
    }
    if (left < right) {
      for (let i2 = 0; i2 < 3; i2++) {
        let t0 = index[left * 3 + i2];
        index[left * 3 + i2] = index[right * 3 + i2];
        index[right * 3 + i2] = t0;
        let t1 = triangleBounds[left * 6 + i2 * 2 + 0];
        triangleBounds[left * 6 + i2 * 2 + 0] = triangleBounds[right * 6 + i2 * 2 + 0];
        triangleBounds[right * 6 + i2 * 2 + 0] = t1;
        let t2 = triangleBounds[left * 6 + i2 * 2 + 1];
        triangleBounds[left * 6 + i2 * 2 + 1] = triangleBounds[right * 6 + i2 * 2 + 1];
        triangleBounds[right * 6 + i2 * 2 + 1] = t2;
      }
      left++;
      right--;
    } else {
      return left;
    }
  }
}
var BIN_COUNT = 32;
var binsSort = (a, b) => a.candidate - b.candidate;
var sahBins = new Array(BIN_COUNT).fill().map(() => {
  return {
    count: 0,
    bounds: new Float32Array(6),
    rightCacheBounds: new Float32Array(6),
    leftCacheBounds: new Float32Array(6),
    candidate: 0
  };
});
var leftBounds = new Float32Array(6);
function getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {
  let axis = -1;
  let pos = 0;
  if (strategy === CENTER) {
    axis = getLongestEdgeIndex(centroidBoundingData);
    if (axis !== -1) {
      pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;
    }
  } else if (strategy === AVERAGE) {
    axis = getLongestEdgeIndex(nodeBoundingData);
    if (axis !== -1) {
      pos = getAverage(triangleBounds, offset, count, axis);
    }
  } else if (strategy === SAH) {
    const rootSurfaceArea = computeSurfaceArea(nodeBoundingData);
    let bestCost = TRIANGLE_INTERSECT_COST * count;
    const cStart = offset * 6;
    const cEnd = (offset + count) * 6;
    for (let a = 0; a < 3; a++) {
      const axisLeft = centroidBoundingData[a];
      const axisRight = centroidBoundingData[a + 3];
      const axisLength = axisRight - axisLeft;
      const binWidth = axisLength / BIN_COUNT;
      if (count < BIN_COUNT / 4) {
        const truncatedBins = [...sahBins];
        truncatedBins.length = count;
        let b = 0;
        for (let c = cStart; c < cEnd; c += 6, b++) {
          const bin = truncatedBins[b];
          bin.candidate = triangleBounds[c + 2 * a];
          bin.count = 0;
          const {
            bounds,
            leftCacheBounds,
            rightCacheBounds
          } = bin;
          for (let d = 0; d < 3; d++) {
            rightCacheBounds[d] = Infinity;
            rightCacheBounds[d + 3] = -Infinity;
            leftCacheBounds[d] = Infinity;
            leftCacheBounds[d + 3] = -Infinity;
            bounds[d] = Infinity;
            bounds[d + 3] = -Infinity;
          }
          expandByTriangleBounds(c, triangleBounds, bounds);
        }
        truncatedBins.sort(binsSort);
        let splitCount = count;
        for (let bi = 0; bi < splitCount; bi++) {
          const bin = truncatedBins[bi];
          while (bi + 1 < splitCount && truncatedBins[bi + 1].candidate === bin.candidate) {
            truncatedBins.splice(bi + 1, 1);
            splitCount--;
          }
        }
        for (let c = cStart; c < cEnd; c += 6) {
          const center = triangleBounds[c + 2 * a];
          for (let bi = 0; bi < splitCount; bi++) {
            const bin = truncatedBins[bi];
            if (center >= bin.candidate) {
              expandByTriangleBounds(c, triangleBounds, bin.rightCacheBounds);
            } else {
              expandByTriangleBounds(c, triangleBounds, bin.leftCacheBounds);
              bin.count++;
            }
          }
        }
        for (let bi = 0; bi < splitCount; bi++) {
          const bin = truncatedBins[bi];
          const leftCount = bin.count;
          const rightCount = count - bin.count;
          const leftBounds2 = bin.leftCacheBounds;
          const rightBounds = bin.rightCacheBounds;
          let leftProb = 0;
          if (leftCount !== 0) {
            leftProb = computeSurfaceArea(leftBounds2) / rootSurfaceArea;
          }
          let rightProb = 0;
          if (rightCount !== 0) {
            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;
          }
          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);
          if (cost < bestCost) {
            axis = a;
            bestCost = cost;
            pos = bin.candidate;
          }
        }
      } else {
        for (let i2 = 0; i2 < BIN_COUNT; i2++) {
          const bin = sahBins[i2];
          bin.count = 0;
          bin.candidate = axisLeft + binWidth + i2 * binWidth;
          const bounds = bin.bounds;
          for (let d = 0; d < 3; d++) {
            bounds[d] = Infinity;
            bounds[d + 3] = -Infinity;
          }
        }
        for (let c = cStart; c < cEnd; c += 6) {
          const triCenter = triangleBounds[c + 2 * a];
          const relativeCenter = triCenter - axisLeft;
          let binIndex = ~~(relativeCenter / binWidth);
          if (binIndex >= BIN_COUNT)
            binIndex = BIN_COUNT - 1;
          const bin = sahBins[binIndex];
          bin.count++;
          expandByTriangleBounds(c, triangleBounds, bin.bounds);
        }
        const lastBin = sahBins[BIN_COUNT - 1];
        copyBounds(lastBin.bounds, lastBin.rightCacheBounds);
        for (let i2 = BIN_COUNT - 2; i2 >= 0; i2--) {
          const bin = sahBins[i2];
          const nextBin = sahBins[i2 + 1];
          unionBounds(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);
        }
        let leftCount = 0;
        for (let i2 = 0; i2 < BIN_COUNT - 1; i2++) {
          const bin = sahBins[i2];
          const binCount = bin.count;
          const bounds = bin.bounds;
          const nextBin = sahBins[i2 + 1];
          const rightBounds = nextBin.rightCacheBounds;
          if (binCount !== 0) {
            if (leftCount === 0) {
              copyBounds(bounds, leftBounds);
            } else {
              unionBounds(bounds, leftBounds, leftBounds);
            }
          }
          leftCount += binCount;
          let leftProb = 0;
          let rightProb = 0;
          if (leftCount !== 0) {
            leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;
          }
          const rightCount = count - leftCount;
          if (rightCount !== 0) {
            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;
          }
          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);
          if (cost < bestCost) {
            axis = a;
            bestCost = cost;
            pos = bin.candidate;
          }
        }
      }
    }
  } else {
    console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);
  }
  return { axis, pos };
}
function getAverage(triangleBounds, offset, count, axis) {
  let avg = 0;
  for (let i2 = offset, end = offset + count; i2 < end; i2++) {
    avg += triangleBounds[i2 * 6 + axis * 2];
  }
  return avg / count;
}
function computeTriangleBounds(geo, fullBounds) {
  const posAttr = geo.attributes.position;
  const index = geo.index.array;
  const triCount = index.length / 3;
  const triangleBounds = new Float32Array(triCount * 6);
  const normalized = posAttr.normalized;
  const posArr = posAttr.array;
  const bufferOffset = posAttr.offset || 0;
  let stride = 3;
  if (posAttr.isInterleavedBufferAttribute) {
    stride = posAttr.data.stride;
  }
  const getters = ["getX", "getY", "getZ"];
  for (let tri = 0; tri < triCount; tri++) {
    const tri3 = tri * 3;
    const tri6 = tri * 6;
    let ai, bi, ci;
    if (normalized) {
      ai = index[tri3 + 0];
      bi = index[tri3 + 1];
      ci = index[tri3 + 2];
    } else {
      ai = index[tri3 + 0] * stride + bufferOffset;
      bi = index[tri3 + 1] * stride + bufferOffset;
      ci = index[tri3 + 2] * stride + bufferOffset;
    }
    for (let el = 0; el < 3; el++) {
      let a, b, c;
      if (normalized) {
        a = posAttr[getters[el]](ai);
        b = posAttr[getters[el]](bi);
        c = posAttr[getters[el]](ci);
      } else {
        a = posArr[ai + el];
        b = posArr[bi + el];
        c = posArr[ci + el];
      }
      let min = a;
      if (b < min)
        min = b;
      if (c < min)
        min = c;
      let max = a;
      if (b > max)
        max = b;
      if (c > max)
        max = c;
      const halfExtents = (max - min) / 2;
      const el2 = el * 2;
      triangleBounds[tri6 + el2 + 0] = min + halfExtents;
      triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * FLOAT32_EPSILON;
      if (min < fullBounds[el])
        fullBounds[el] = min;
      if (max > fullBounds[el + 3])
        fullBounds[el + 3] = max;
    }
  }
  return triangleBounds;
}
function buildTree(geo, options) {
  function triggerProgress(trianglesProcessed) {
    if (onProgress) {
      onProgress(trianglesProcessed / totalTriangles);
    }
  }
  function splitNode(node, offset, count, centroidBoundingData = null, depth = 0) {
    if (!reachedMaxDepth && depth >= maxDepth) {
      reachedMaxDepth = true;
      if (verbose) {
        console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);
        console.warn(geo);
      }
    }
    if (count <= maxLeafTris || depth >= maxDepth) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
      return node;
    }
    const split = getOptimalSplit(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);
    if (split.axis === -1) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
      return node;
    }
    const splitOffset = partition(indexArray, triangleBounds, offset, count, split);
    if (splitOffset === offset || splitOffset === offset + count) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
    } else {
      node.splitAxis = split.axis;
      const left = new MeshBVHNode();
      const lstart = offset;
      const lcount = splitOffset - offset;
      node.left = left;
      left.boundingData = new Float32Array(6);
      getBounds(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);
      splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1);
      const right = new MeshBVHNode();
      const rstart = splitOffset;
      const rcount = count - lcount;
      node.right = right;
      right.boundingData = new Float32Array(6);
      getBounds(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);
      splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);
    }
    return node;
  }
  ensureIndex(geo, options);
  const fullBounds = new Float32Array(6);
  const cacheCentroidBoundingData = new Float32Array(6);
  const triangleBounds = computeTriangleBounds(geo, fullBounds);
  const indexArray = geo.index.array;
  const maxDepth = options.maxDepth;
  const verbose = options.verbose;
  const maxLeafTris = options.maxLeafTris;
  const strategy = options.strategy;
  const onProgress = options.onProgress;
  const totalTriangles = geo.index.count / 3;
  let reachedMaxDepth = false;
  const roots = [];
  const ranges = getRootIndexRanges(geo);
  if (ranges.length === 1) {
    const range = ranges[0];
    const root = new MeshBVHNode();
    root.boundingData = fullBounds;
    getCentroidBounds(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);
    splitNode(root, range.offset, range.count, cacheCentroidBoundingData);
    roots.push(root);
  } else {
    for (let range of ranges) {
      const root = new MeshBVHNode();
      root.boundingData = new Float32Array(6);
      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);
      splitNode(root, range.offset, range.count, cacheCentroidBoundingData);
      roots.push(root);
    }
  }
  return roots;
}
function buildPackedTree(geo, options) {
  const roots = buildTree(geo, options);
  let float32Array;
  let uint32Array;
  let uint16Array;
  const packedRoots = [];
  const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;
  for (let i2 = 0; i2 < roots.length; i2++) {
    const root = roots[i2];
    let nodeCount = countNodes(root);
    const buffer = new BufferConstructor(BYTES_PER_NODE * nodeCount);
    float32Array = new Float32Array(buffer);
    uint32Array = new Uint32Array(buffer);
    uint16Array = new Uint16Array(buffer);
    populateBuffer(0, root);
    packedRoots.push(buffer);
  }
  return packedRoots;
  function countNodes(node) {
    if (node.count) {
      return 1;
    } else {
      return 1 + countNodes(node.left) + countNodes(node.right);
    }
  }
  function populateBuffer(byteOffset, node) {
    const stride4Offset = byteOffset / 4;
    const stride2Offset = byteOffset / 2;
    const isLeaf = !!node.count;
    const boundingData = node.boundingData;
    for (let i2 = 0; i2 < 6; i2++) {
      float32Array[stride4Offset + i2] = boundingData[i2];
    }
    if (isLeaf) {
      const offset = node.offset;
      const count = node.count;
      uint32Array[stride4Offset + 6] = offset;
      uint16Array[stride2Offset + 14] = count;
      uint16Array[stride2Offset + 15] = IS_LEAFNODE_FLAG;
      return byteOffset + BYTES_PER_NODE;
    } else {
      const left = node.left;
      const right = node.right;
      const splitAxis = node.splitAxis;
      let nextUnusedPointer;
      nextUnusedPointer = populateBuffer(byteOffset + BYTES_PER_NODE, left);
      if (nextUnusedPointer / 4 > Math.pow(2, 32)) {
        throw new Error("MeshBVH: Cannot store child pointer greater than 32 bits.");
      }
      uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;
      nextUnusedPointer = populateBuffer(nextUnusedPointer, right);
      uint32Array[stride4Offset + 7] = splitAxis;
      return nextUnusedPointer;
    }
  }
}

// node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js
var SeparatingAxisBounds = class {
  constructor() {
    this.min = Infinity;
    this.max = -Infinity;
  }
  setFromPointsField(points, field) {
    let min = Infinity;
    let max = -Infinity;
    for (let i2 = 0, l = points.length; i2 < l; i2++) {
      const p = points[i2];
      const val = p[field];
      min = val < min ? val : min;
      max = val > max ? val : max;
    }
    this.min = min;
    this.max = max;
  }
  setFromPoints(axis, points) {
    let min = Infinity;
    let max = -Infinity;
    for (let i2 = 0, l = points.length; i2 < l; i2++) {
      const p = points[i2];
      const val = axis.dot(p);
      min = val < min ? val : min;
      max = val > max ? val : max;
    }
    this.min = min;
    this.max = max;
  }
  isSeparated(other) {
    return this.min > other.max || other.min > this.max;
  }
};
SeparatingAxisBounds.prototype.setFromBox = function() {
  const p = new Vector3();
  return function setFromBox(axis, box) {
    const boxMin = box.min;
    const boxMax = box.max;
    let min = Infinity;
    let max = -Infinity;
    for (let x = 0; x <= 1; x++) {
      for (let y = 0; y <= 1; y++) {
        for (let z = 0; z <= 1; z++) {
          p.x = boxMin.x * x + boxMax.x * (1 - x);
          p.y = boxMin.y * y + boxMax.y * (1 - y);
          p.z = boxMin.z * z + boxMax.z * (1 - z);
          const val = axis.dot(p);
          min = Math.min(val, min);
          max = Math.max(val, max);
        }
      }
    }
    this.min = min;
    this.max = max;
  };
}();
var areIntersecting = function() {
  const cacheSatBounds = new SeparatingAxisBounds();
  return function areIntersecting2(shape1, shape2) {
    const points1 = shape1.points;
    const satAxes1 = shape1.satAxes;
    const satBounds1 = shape1.satBounds;
    const points2 = shape2.points;
    const satAxes2 = shape2.satAxes;
    const satBounds2 = shape2.satBounds;
    for (let i2 = 0; i2 < 3; i2++) {
      const sb = satBounds1[i2];
      const sa = satAxes1[i2];
      cacheSatBounds.setFromPoints(sa, points2);
      if (sb.isSeparated(cacheSatBounds))
        return false;
    }
    for (let i2 = 0; i2 < 3; i2++) {
      const sb = satBounds2[i2];
      const sa = satAxes2[i2];
      cacheSatBounds.setFromPoints(sa, points1);
      if (sb.isSeparated(cacheSatBounds))
        return false;
    }
  };
}();

// node_modules/three-mesh-bvh/src/math/MathUtilities.js
var closestPointLineToLine = function() {
  const dir1 = new Vector3();
  const dir2 = new Vector3();
  const v02 = new Vector3();
  return function closestPointLineToLine2(l1, l2, result) {
    const v0 = l1.start;
    const v10 = dir1;
    const v22 = l2.start;
    const v32 = dir2;
    v02.subVectors(v0, v22);
    dir1.subVectors(l1.end, l1.start);
    dir2.subVectors(l2.end, l2.start);
    const d0232 = v02.dot(v32);
    const d3210 = v32.dot(v10);
    const d3232 = v32.dot(v32);
    const d0210 = v02.dot(v10);
    const d1010 = v10.dot(v10);
    const denom = d1010 * d3232 - d3210 * d3210;
    let d, d2;
    if (denom !== 0) {
      d = (d0232 * d3210 - d0210 * d3232) / denom;
    } else {
      d = 0;
    }
    d2 = (d0232 + d * d3210) / d3232;
    result.x = d;
    result.y = d2;
  };
}();
var closestPointsSegmentToSegment = function() {
  const paramResult = new Vector2();
  const temp12 = new Vector3();
  const temp22 = new Vector3();
  return function closestPointsSegmentToSegment2(l1, l2, target1, target2) {
    closestPointLineToLine(l1, l2, paramResult);
    let d = paramResult.x;
    let d2 = paramResult.y;
    if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {
      l1.at(d, target1);
      l2.at(d2, target2);
      return;
    } else if (d >= 0 && d <= 1) {
      if (d2 < 0) {
        l2.at(0, target2);
      } else {
        l2.at(1, target2);
      }
      l1.closestPointToPoint(target2, true, target1);
      return;
    } else if (d2 >= 0 && d2 <= 1) {
      if (d < 0) {
        l1.at(0, target1);
      } else {
        l1.at(1, target1);
      }
      l2.closestPointToPoint(target1, true, target2);
      return;
    } else {
      let p;
      if (d < 0) {
        p = l1.start;
      } else {
        p = l1.end;
      }
      let p2;
      if (d2 < 0) {
        p2 = l2.start;
      } else {
        p2 = l2.end;
      }
      const closestPoint = temp12;
      const closestPoint2 = temp22;
      l1.closestPointToPoint(p2, true, temp12);
      l2.closestPointToPoint(p, true, temp22);
      if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {
        target1.copy(closestPoint);
        target2.copy(p2);
        return;
      } else {
        target1.copy(p);
        target2.copy(closestPoint2);
        return;
      }
    }
  };
}();
var sphereIntersectTriangle = function() {
  const closestPointTemp = new Vector3();
  const projectedPointTemp = new Vector3();
  const planeTemp = new Plane();
  const lineTemp = new Line3();
  return function sphereIntersectTriangle2(sphere, triangle) {
    const { radius, center } = sphere;
    const { a, b, c } = triangle;
    lineTemp.start = a;
    lineTemp.end = b;
    const closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);
    if (closestPoint1.distanceTo(center) <= radius)
      return true;
    lineTemp.start = a;
    lineTemp.end = c;
    const closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);
    if (closestPoint2.distanceTo(center) <= radius)
      return true;
    lineTemp.start = b;
    lineTemp.end = c;
    const closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);
    if (closestPoint3.distanceTo(center) <= radius)
      return true;
    const plane = triangle.getPlane(planeTemp);
    const dp = Math.abs(plane.distanceToPoint(center));
    if (dp <= radius) {
      const pp = plane.projectPoint(center, projectedPointTemp);
      const cp = triangle.containsPoint(pp);
      if (cp)
        return true;
    }
    return false;
  };
}();

// node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js
var DIST_EPSILON = 1e-15;
function isNearZero(value) {
  return Math.abs(value) < DIST_EPSILON;
}
var ExtendedTriangle = class extends Triangle {
  constructor(...args) {
    super(...args);
    this.isExtendedTriangle = true;
    this.satAxes = new Array(4).fill().map(() => new Vector3());
    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());
    this.points = [this.a, this.b, this.c];
    this.sphere = new Sphere();
    this.plane = new Plane();
    this.needsUpdate = true;
  }
  intersectsSphere(sphere) {
    return sphereIntersectTriangle(sphere, this);
  }
  update() {
    const a = this.a;
    const b = this.b;
    const c = this.c;
    const points = this.points;
    const satAxes = this.satAxes;
    const satBounds = this.satBounds;
    const axis0 = satAxes[0];
    const sab0 = satBounds[0];
    this.getNormal(axis0);
    sab0.setFromPoints(axis0, points);
    const axis1 = satAxes[1];
    const sab1 = satBounds[1];
    axis1.subVectors(a, b);
    sab1.setFromPoints(axis1, points);
    const axis2 = satAxes[2];
    const sab2 = satBounds[2];
    axis2.subVectors(b, c);
    sab2.setFromPoints(axis2, points);
    const axis3 = satAxes[3];
    const sab3 = satBounds[3];
    axis3.subVectors(c, a);
    sab3.setFromPoints(axis3, points);
    this.sphere.setFromPoints(this.points);
    this.plane.setFromNormalAndCoplanarPoint(axis0, a);
    this.needsUpdate = false;
  }
};
ExtendedTriangle.prototype.closestPointToSegment = function() {
  const point1 = new Vector3();
  const point2 = new Vector3();
  const edge = new Line3();
  return function distanceToSegment(segment, target1 = null, target2 = null) {
    const { start, end } = segment;
    const points = this.points;
    let distSq;
    let closestDistanceSq = Infinity;
    for (let i2 = 0; i2 < 3; i2++) {
      const nexti = (i2 + 1) % 3;
      edge.start.copy(points[i2]);
      edge.end.copy(points[nexti]);
      closestPointsSegmentToSegment(edge, segment, point1, point2);
      distSq = point1.distanceToSquared(point2);
      if (distSq < closestDistanceSq) {
        closestDistanceSq = distSq;
        if (target1)
          target1.copy(point1);
        if (target2)
          target2.copy(point2);
      }
    }
    this.closestPointToPoint(start, point1);
    distSq = start.distanceToSquared(point1);
    if (distSq < closestDistanceSq) {
      closestDistanceSq = distSq;
      if (target1)
        target1.copy(point1);
      if (target2)
        target2.copy(start);
    }
    this.closestPointToPoint(end, point1);
    distSq = end.distanceToSquared(point1);
    if (distSq < closestDistanceSq) {
      closestDistanceSq = distSq;
      if (target1)
        target1.copy(point1);
      if (target2)
        target2.copy(end);
    }
    return Math.sqrt(closestDistanceSq);
  };
}();
ExtendedTriangle.prototype.intersectsTriangle = function() {
  const saTri2 = new ExtendedTriangle();
  const arr1 = new Array(3);
  const arr2 = new Array(3);
  const cachedSatBounds = new SeparatingAxisBounds();
  const cachedSatBounds2 = new SeparatingAxisBounds();
  const cachedAxis = new Vector3();
  const dir1 = new Vector3();
  const dir2 = new Vector3();
  const tempDir = new Vector3();
  const edge = new Line3();
  const edge1 = new Line3();
  const edge2 = new Line3();
  return function intersectsTriangle(other, target2 = null, suppressLog = false) {
    if (this.needsUpdate) {
      this.update();
    }
    if (!other.isExtendedTriangle) {
      saTri2.copy(other);
      saTri2.update();
      other = saTri2;
    } else if (other.needsUpdate) {
      other.update();
    }
    const plane1 = this.plane;
    const plane2 = other.plane;
    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1 - 1e-10) {
      const satBounds1 = this.satBounds;
      const satAxes1 = this.satAxes;
      arr2[0] = other.a;
      arr2[1] = other.b;
      arr2[2] = other.c;
      for (let i2 = 0; i2 < 4; i2++) {
        const sb = satBounds1[i2];
        const sa = satAxes1[i2];
        cachedSatBounds.setFromPoints(sa, arr2);
        if (sb.isSeparated(cachedSatBounds))
          return false;
      }
      const satBounds2 = other.satBounds;
      const satAxes2 = other.satAxes;
      arr1[0] = this.a;
      arr1[1] = this.b;
      arr1[2] = this.c;
      for (let i2 = 0; i2 < 4; i2++) {
        const sb = satBounds2[i2];
        const sa = satAxes2[i2];
        cachedSatBounds.setFromPoints(sa, arr1);
        if (sb.isSeparated(cachedSatBounds))
          return false;
      }
      for (let i2 = 0; i2 < 4; i2++) {
        const sa1 = satAxes1[i2];
        for (let i22 = 0; i22 < 4; i22++) {
          const sa2 = satAxes2[i22];
          cachedAxis.crossVectors(sa1, sa2);
          cachedSatBounds.setFromPoints(cachedAxis, arr1);
          cachedSatBounds2.setFromPoints(cachedAxis, arr2);
          if (cachedSatBounds.isSeparated(cachedSatBounds2))
            return false;
        }
      }
      if (target2) {
        if (!suppressLog) {
          console.warn("ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.");
        }
        target2.start.set(0, 0, 0);
        target2.end.set(0, 0, 0);
      }
      return true;
    } else {
      const points1 = this.points;
      let found1 = false;
      let count1 = 0;
      for (let i2 = 0; i2 < 3; i2++) {
        const p = points1[i2];
        const pNext = points1[(i2 + 1) % 3];
        edge.start.copy(p);
        edge.end.copy(pNext);
        edge.delta(dir1);
        const targetPoint = found1 ? edge1.start : edge1.end;
        const startIntersects = isNearZero(plane2.distanceToPoint(p));
        if (isNearZero(plane2.normal.dot(dir1)) && startIntersects) {
          edge1.copy(edge);
          count1 = 2;
          break;
        }
        const doesIntersect = plane2.intersectLine(edge, targetPoint) || startIntersects;
        if (doesIntersect && !isNearZero(targetPoint.distanceTo(pNext))) {
          count1++;
          if (found1) {
            break;
          }
          found1 = true;
        }
      }
      if (count1 === 1 && other.containsPoint(edge1.end)) {
        if (target2) {
          target2.start.copy(edge1.end);
          target2.end.copy(edge1.end);
        }
        return true;
      } else if (count1 !== 2) {
        return false;
      }
      const points2 = other.points;
      let found2 = false;
      let count2 = 0;
      for (let i2 = 0; i2 < 3; i2++) {
        const p = points2[i2];
        const pNext = points2[(i2 + 1) % 3];
        edge.start.copy(p);
        edge.end.copy(pNext);
        edge.delta(dir2);
        const targetPoint = found2 ? edge2.start : edge2.end;
        const startIntersects = isNearZero(plane1.distanceToPoint(p));
        if (isNearZero(plane1.normal.dot(dir2)) && startIntersects) {
          edge2.copy(edge);
          count2 = 2;
          break;
        }
        const doesIntersect = plane1.intersectLine(edge, targetPoint) || startIntersects;
        if (doesIntersect && !isNearZero(targetPoint.distanceTo(pNext))) {
          count2++;
          if (found2) {
            break;
          }
          found2 = true;
        }
      }
      if (count2 === 1 && this.containsPoint(edge2.end)) {
        if (target2) {
          target2.start.copy(edge2.end);
          target2.end.copy(edge2.end);
        }
        return true;
      } else if (count2 !== 2) {
        return false;
      }
      edge1.delta(dir1);
      edge2.delta(dir2);
      if (dir1.dot(dir2) < 0) {
        let tmp = edge2.start;
        edge2.start = edge2.end;
        edge2.end = tmp;
      }
      const s1 = edge1.start.dot(dir1);
      const e1 = edge1.end.dot(dir1);
      const s2 = edge2.start.dot(dir1);
      const e2 = edge2.end.dot(dir1);
      const separated1 = e1 < s2;
      const separated2 = s1 < e2;
      if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {
        return false;
      }
      if (target2) {
        tempDir.subVectors(edge1.start, edge2.start);
        if (tempDir.dot(dir1) > 0) {
          target2.start.copy(edge1.start);
        } else {
          target2.start.copy(edge2.start);
        }
        tempDir.subVectors(edge1.end, edge2.end);
        if (tempDir.dot(dir1) < 0) {
          target2.end.copy(edge1.end);
        } else {
          target2.end.copy(edge2.end);
        }
      }
      return true;
    }
  };
}();
ExtendedTriangle.prototype.distanceToPoint = function() {
  const target2 = new Vector3();
  return function distanceToPoint(point) {
    this.closestPointToPoint(point, target2);
    return point.distanceTo(target2);
  };
}();
ExtendedTriangle.prototype.distanceToTriangle = function() {
  const point = new Vector3();
  const point2 = new Vector3();
  const cornerFields = ["a", "b", "c"];
  const line1 = new Line3();
  const line2 = new Line3();
  return function distanceToTriangle(other, target1 = null, target2 = null) {
    const lineTarget = target1 || target2 ? line1 : null;
    if (this.intersectsTriangle(other, lineTarget)) {
      if (target1 || target2) {
        if (target1)
          lineTarget.getCenter(target1);
        if (target2)
          lineTarget.getCenter(target2);
      }
      return 0;
    }
    let closestDistanceSq = Infinity;
    for (let i2 = 0; i2 < 3; i2++) {
      let dist;
      const field = cornerFields[i2];
      const otherVec = other[field];
      this.closestPointToPoint(otherVec, point);
      dist = otherVec.distanceToSquared(point);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1)
          target1.copy(point);
        if (target2)
          target2.copy(otherVec);
      }
      const thisVec = this[field];
      other.closestPointToPoint(thisVec, point);
      dist = thisVec.distanceToSquared(point);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1)
          target1.copy(thisVec);
        if (target2)
          target2.copy(point);
      }
    }
    for (let i2 = 0; i2 < 3; i2++) {
      const f11 = cornerFields[i2];
      const f12 = cornerFields[(i2 + 1) % 3];
      line1.set(this[f11], this[f12]);
      for (let i22 = 0; i22 < 3; i22++) {
        const f21 = cornerFields[i22];
        const f22 = cornerFields[(i22 + 1) % 3];
        line2.set(other[f21], other[f22]);
        closestPointsSegmentToSegment(line1, line2, point, point2);
        const dist = point.distanceToSquared(point2);
        if (dist < closestDistanceSq) {
          closestDistanceSq = dist;
          if (target1)
            target1.copy(point);
          if (target2)
            target2.copy(point2);
        }
      }
    }
    return Math.sqrt(closestDistanceSq);
  };
}();

// node_modules/three-mesh-bvh/src/math/OrientedBox.js
var OrientedBox = class {
  constructor(min, max, matrix2) {
    this.isOrientedBox = true;
    this.min = new Vector3();
    this.max = new Vector3();
    this.matrix = new Matrix4();
    this.invMatrix = new Matrix4();
    this.points = new Array(8).fill().map(() => new Vector3());
    this.satAxes = new Array(3).fill().map(() => new Vector3());
    this.satBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());
    this.alignedSatBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());
    this.needsUpdate = false;
    if (min)
      this.min.copy(min);
    if (max)
      this.max.copy(max);
    if (matrix2)
      this.matrix.copy(matrix2);
  }
  set(min, max, matrix2) {
    this.min.copy(min);
    this.max.copy(max);
    this.matrix.copy(matrix2);
    this.needsUpdate = true;
  }
  copy(other) {
    this.min.copy(other.min);
    this.max.copy(other.max);
    this.matrix.copy(other.matrix);
    this.needsUpdate = true;
  }
};
OrientedBox.prototype.update = function() {
  return function update() {
    const matrix2 = this.matrix;
    const min = this.min;
    const max = this.max;
    const points = this.points;
    for (let x = 0; x <= 1; x++) {
      for (let y = 0; y <= 1; y++) {
        for (let z = 0; z <= 1; z++) {
          const i2 = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;
          const v4 = points[i2];
          v4.x = x ? max.x : min.x;
          v4.y = y ? max.y : min.y;
          v4.z = z ? max.z : min.z;
          v4.applyMatrix4(matrix2);
        }
      }
    }
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    const minVec = points[0];
    for (let i2 = 0; i2 < 3; i2++) {
      const axis = satAxes[i2];
      const sb = satBounds[i2];
      const index = 1 << i2;
      const pi = points[index];
      axis.subVectors(minVec, pi);
      sb.setFromPoints(axis, points);
    }
    const alignedSatBounds = this.alignedSatBounds;
    alignedSatBounds[0].setFromPointsField(points, "x");
    alignedSatBounds[1].setFromPointsField(points, "y");
    alignedSatBounds[2].setFromPointsField(points, "z");
    this.invMatrix.copy(this.matrix).invert();
    this.needsUpdate = false;
  };
}();
OrientedBox.prototype.intersectsBox = function() {
  const aabbBounds = new SeparatingAxisBounds();
  return function intersectsBox(box) {
    if (this.needsUpdate) {
      this.update();
    }
    const min = box.min;
    const max = box.max;
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    const alignedSatBounds = this.alignedSatBounds;
    aabbBounds.min = min.x;
    aabbBounds.max = max.x;
    if (alignedSatBounds[0].isSeparated(aabbBounds))
      return false;
    aabbBounds.min = min.y;
    aabbBounds.max = max.y;
    if (alignedSatBounds[1].isSeparated(aabbBounds))
      return false;
    aabbBounds.min = min.z;
    aabbBounds.max = max.z;
    if (alignedSatBounds[2].isSeparated(aabbBounds))
      return false;
    for (let i2 = 0; i2 < 3; i2++) {
      const axis = satAxes[i2];
      const sb = satBounds[i2];
      aabbBounds.setFromBox(axis, box);
      if (sb.isSeparated(aabbBounds))
        return false;
    }
    return true;
  };
}();
OrientedBox.prototype.intersectsTriangle = function() {
  const saTri = new ExtendedTriangle();
  const pointsArr = new Array(3);
  const cachedSatBounds = new SeparatingAxisBounds();
  const cachedSatBounds2 = new SeparatingAxisBounds();
  const cachedAxis = new Vector3();
  return function intersectsTriangle(triangle) {
    if (this.needsUpdate) {
      this.update();
    }
    if (!triangle.isExtendedTriangle) {
      saTri.copy(triangle);
      saTri.update();
      triangle = saTri;
    } else if (triangle.needsUpdate) {
      triangle.update();
    }
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    pointsArr[0] = triangle.a;
    pointsArr[1] = triangle.b;
    pointsArr[2] = triangle.c;
    for (let i2 = 0; i2 < 3; i2++) {
      const sb = satBounds[i2];
      const sa = satAxes[i2];
      cachedSatBounds.setFromPoints(sa, pointsArr);
      if (sb.isSeparated(cachedSatBounds))
        return false;
    }
    const triSatBounds = triangle.satBounds;
    const triSatAxes = triangle.satAxes;
    const points = this.points;
    for (let i2 = 0; i2 < 3; i2++) {
      const sb = triSatBounds[i2];
      const sa = triSatAxes[i2];
      cachedSatBounds.setFromPoints(sa, points);
      if (sb.isSeparated(cachedSatBounds))
        return false;
    }
    for (let i2 = 0; i2 < 3; i2++) {
      const sa1 = satAxes[i2];
      for (let i22 = 0; i22 < 4; i22++) {
        const sa2 = triSatAxes[i22];
        cachedAxis.crossVectors(sa1, sa2);
        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);
        cachedSatBounds2.setFromPoints(cachedAxis, points);
        if (cachedSatBounds.isSeparated(cachedSatBounds2))
          return false;
      }
    }
    return true;
  };
}();
OrientedBox.prototype.closestPointToPoint = function() {
  return function closestPointToPoint(point, target1) {
    if (this.needsUpdate) {
      this.update();
    }
    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);
    return target1;
  };
}();
OrientedBox.prototype.distanceToPoint = function() {
  const target2 = new Vector3();
  return function distanceToPoint(point) {
    this.closestPointToPoint(point, target2);
    return point.distanceTo(target2);
  };
}();
OrientedBox.prototype.distanceToBox = function() {
  const xyzFields2 = ["x", "y", "z"];
  const segments1 = new Array(12).fill().map(() => new Line3());
  const segments2 = new Array(12).fill().map(() => new Line3());
  const point1 = new Vector3();
  const point2 = new Vector3();
  return function distanceToBox(box, threshold = 0, target1 = null, target2 = null) {
    if (this.needsUpdate) {
      this.update();
    }
    if (this.intersectsBox(box)) {
      if (target1 || target2) {
        box.getCenter(point2);
        this.closestPointToPoint(point2, point1);
        box.closestPointToPoint(point1, point2);
        if (target1)
          target1.copy(point1);
        if (target2)
          target2.copy(point2);
      }
      return 0;
    }
    const threshold2 = threshold * threshold;
    const min = box.min;
    const max = box.max;
    const points = this.points;
    let closestDistanceSq = Infinity;
    for (let i2 = 0; i2 < 8; i2++) {
      const p = points[i2];
      point2.copy(p).clamp(min, max);
      const dist = p.distanceToSquared(point2);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1)
          target1.copy(p);
        if (target2)
          target2.copy(point2);
        if (dist < threshold2)
          return Math.sqrt(dist);
      }
    }
    let count = 0;
    for (let i2 = 0; i2 < 3; i2++) {
      for (let i1 = 0; i1 <= 1; i1++) {
        for (let i22 = 0; i22 <= 1; i22++) {
          const nextIndex = (i2 + 1) % 3;
          const nextIndex2 = (i2 + 2) % 3;
          const index = i1 << nextIndex | i22 << nextIndex2;
          const index2 = 1 << i2 | i1 << nextIndex | i22 << nextIndex2;
          const p1 = points[index];
          const p2 = points[index2];
          const line1 = segments1[count];
          line1.set(p1, p2);
          const f1 = xyzFields2[i2];
          const f2 = xyzFields2[nextIndex];
          const f3 = xyzFields2[nextIndex2];
          const line2 = segments2[count];
          const start = line2.start;
          const end = line2.end;
          start[f1] = min[f1];
          start[f2] = i1 ? min[f2] : max[f2];
          start[f3] = i22 ? min[f3] : max[f2];
          end[f1] = max[f1];
          end[f2] = i1 ? min[f2] : max[f2];
          end[f3] = i22 ? min[f3] : max[f2];
          count++;
        }
      }
    }
    for (let x = 0; x <= 1; x++) {
      for (let y = 0; y <= 1; y++) {
        for (let z = 0; z <= 1; z++) {
          point2.x = x ? max.x : min.x;
          point2.y = y ? max.y : min.y;
          point2.z = z ? max.z : min.z;
          this.closestPointToPoint(point2, point1);
          const dist = point2.distanceToSquared(point1);
          if (dist < closestDistanceSq) {
            closestDistanceSq = dist;
            if (target1)
              target1.copy(point1);
            if (target2)
              target2.copy(point2);
            if (dist < threshold2)
              return Math.sqrt(dist);
          }
        }
      }
    }
    for (let i2 = 0; i2 < 12; i2++) {
      const l1 = segments1[i2];
      for (let i22 = 0; i22 < 12; i22++) {
        const l2 = segments2[i22];
        closestPointsSegmentToSegment(l1, l2, point1, point2);
        const dist = point1.distanceToSquared(point2);
        if (dist < closestDistanceSq) {
          closestDistanceSq = dist;
          if (target1)
            target1.copy(point1);
          if (target2)
            target2.copy(point2);
          if (dist < threshold2)
            return Math.sqrt(dist);
        }
      }
    }
    return Math.sqrt(closestDistanceSq);
  };
}();

// node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js
var vA = new Vector3();
var vB = new Vector3();
var vC = new Vector3();
var uvA = new Vector2();
var uvB = new Vector2();
var uvC = new Vector2();
var intersectionPoint = new Vector3();
function checkIntersection(ray4, pA, pB, pC, point, side) {
  let intersect;
  if (side === BackSide) {
    intersect = ray4.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect = ray4.intersectTriangle(pA, pB, pC, side !== DoubleSide, point);
  }
  if (intersect === null)
    return null;
  const distance = ray4.origin.distanceTo(point);
  return {
    distance,
    point: point.clone()
  };
}
function checkBufferGeometryIntersection(ray4, position2, uv, a, b, c, side) {
  vA.fromBufferAttribute(position2, a);
  vB.fromBufferAttribute(position2, b);
  vC.fromBufferAttribute(position2, c);
  const intersection3 = checkIntersection(ray4, vA, vB, vC, intersectionPoint, side);
  if (intersection3) {
    if (uv) {
      uvA.fromBufferAttribute(uv, a);
      uvB.fromBufferAttribute(uv, b);
      uvC.fromBufferAttribute(uv, c);
      intersection3.uv = Triangle.getUV(intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2());
    }
    const face = {
      a,
      b,
      c,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(vA, vB, vC, face.normal);
    intersection3.face = face;
    intersection3.faceIndex = a;
  }
  return intersection3;
}
function intersectTri(geo, side, ray4, tri, intersections) {
  const triOffset = tri * 3;
  const a = geo.index.getX(triOffset);
  const b = geo.index.getX(triOffset + 1);
  const c = geo.index.getX(triOffset + 2);
  const intersection3 = checkBufferGeometryIntersection(ray4, geo.attributes.position, geo.attributes.uv, a, b, c, side);
  if (intersection3) {
    intersection3.faceIndex = tri;
    if (intersections)
      intersections.push(intersection3);
    return intersection3;
  }
  return null;
}

// node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js
function intersectTris(geo, side, ray4, offset, count, intersections) {
  for (let i2 = offset, end = offset + count; i2 < end; i2++) {
    intersectTri(geo, side, ray4, i2, intersections);
  }
}
function intersectClosestTri(geo, side, ray4, offset, count) {
  let dist = Infinity;
  let res = null;
  for (let i2 = offset, end = offset + count; i2 < end; i2++) {
    const intersection3 = intersectTri(geo, side, ray4, i2);
    if (intersection3 && intersection3.distance < dist) {
      res = intersection3;
      dist = intersection3.distance;
    }
  }
  return res;
}
function convertRaycastIntersect(hit, object, raycaster) {
  if (hit === null) {
    return null;
  }
  hit.point.applyMatrix4(object.matrixWorld);
  hit.distance = hit.point.distanceTo(raycaster.ray.origin);
  hit.object = object;
  if (hit.distance < raycaster.near || hit.distance > raycaster.far) {
    return null;
  } else {
    return hit;
  }
}

// node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js
function setTriangle(tri, i2, index, pos) {
  const ta = tri.a;
  const tb = tri.b;
  const tc = tri.c;
  let i0 = i2;
  let i1 = i2 + 1;
  let i22 = i2 + 2;
  if (index) {
    i0 = index.getX(i2);
    i1 = index.getX(i2 + 1);
    i22 = index.getX(i2 + 2);
  }
  ta.x = pos.getX(i0);
  ta.y = pos.getY(i0);
  ta.z = pos.getZ(i0);
  tb.x = pos.getX(i1);
  tb.y = pos.getY(i1);
  tb.z = pos.getZ(i1);
  tc.x = pos.getX(i22);
  tc.y = pos.getY(i22);
  tc.z = pos.getZ(i22);
}
function iterateOverTriangles(offset, count, geometry, intersectsTriangleFunc, contained, depth, triangle) {
  const index = geometry.index;
  const pos = geometry.attributes.position;
  for (let i2 = offset, l = count + offset; i2 < l; i2++) {
    setTriangle(triangle, i2 * 3, index, pos);
    triangle.needsUpdate = true;
    if (intersectsTriangleFunc(triangle, i2, contained, depth)) {
      return true;
    }
  }
  return false;
}
var tempV1 = new Vector3();
var tempV2 = new Vector3();
var tempV3 = new Vector3();
var tempUV1 = new Vector2();
var tempUV2 = new Vector2();
var tempUV3 = new Vector2();

// node_modules/three-mesh-bvh/src/utils/PrimitivePool.js
var PrimitivePool = class {
  constructor(getNewPrimitive) {
    this._getNewPrimitive = getNewPrimitive;
    this._primitives = [];
  }
  getPrimitive() {
    const primitives = this._primitives;
    if (primitives.length === 0) {
      return this._getNewPrimitive();
    } else {
      return primitives.pop();
    }
  }
  releasePrimitive(primitive) {
    this._primitives.push(primitive);
  }
};

// node_modules/three-mesh-bvh/src/core/nodeBufferFunctions.js
function IS_LEAF(n16, uint16Array) {
  return uint16Array[n16 + 15] === 65535;
}
function OFFSET(n32, uint32Array) {
  return uint32Array[n32 + 6];
}
function COUNT(n16, uint16Array) {
  return uint16Array[n16 + 14];
}
function LEFT_NODE(n32) {
  return n32 + 8;
}
function RIGHT_NODE(n32, uint32Array) {
  return uint32Array[n32 + 6];
}
function SPLIT_AXIS(n32, uint32Array) {
  return uint32Array[n32 + 7];
}
function BOUNDING_DATA_INDEX(n32) {
  return n32;
}

// node_modules/three-mesh-bvh/src/core/castFunctions.js
var boundingBox = new Box3();
var boxIntersection = new Vector3();
var xyzFields = ["x", "y", "z"];
function raycast(nodeIndex32, geometry, side, ray4, intersects) {
  let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
  if (isLeaf) {
    const offset = OFFSET(nodeIndex32, uint32Array);
    const count = COUNT(nodeIndex16, uint16Array);
    intersectTris(geometry, side, ray4, offset, count, intersects);
  } else {
    const leftIndex = LEFT_NODE(nodeIndex32);
    if (intersectRay(leftIndex, float32Array, ray4, boxIntersection)) {
      raycast(leftIndex, geometry, side, ray4, intersects);
    }
    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);
    if (intersectRay(rightIndex, float32Array, ray4, boxIntersection)) {
      raycast(rightIndex, geometry, side, ray4, intersects);
    }
  }
}
function raycastFirst(nodeIndex32, geometry, side, ray4) {
  let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
  if (isLeaf) {
    const offset = OFFSET(nodeIndex32, uint32Array);
    const count = COUNT(nodeIndex16, uint16Array);
    return intersectClosestTri(geometry, side, ray4, offset, count);
  } else {
    const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);
    const xyzAxis = xyzFields[splitAxis];
    const rayDir = ray4.direction[xyzAxis];
    const leftToRight = rayDir >= 0;
    let c1, c2;
    if (leftToRight) {
      c1 = LEFT_NODE(nodeIndex32);
      c2 = RIGHT_NODE(nodeIndex32, uint32Array);
    } else {
      c1 = RIGHT_NODE(nodeIndex32, uint32Array);
      c2 = LEFT_NODE(nodeIndex32);
    }
    const c1Intersection = intersectRay(c1, float32Array, ray4, boxIntersection);
    const c1Result = c1Intersection ? raycastFirst(c1, geometry, side, ray4) : null;
    if (c1Result) {
      const point = c1Result.point[xyzAxis];
      const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : (
        // min bounding data
        point >= float32Array[c2 + splitAxis + 3]
      );
      if (isOutside) {
        return c1Result;
      }
    }
    const c2Intersection = intersectRay(c2, float32Array, ray4, boxIntersection);
    const c2Result = c2Intersection ? raycastFirst(c2, geometry, side, ray4) : null;
    if (c1Result && c2Result) {
      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;
    } else {
      return c1Result || c2Result || null;
    }
  }
}
var shapecast = function() {
  let _box12, _box22;
  const boxStack = [];
  const boxPool = new PrimitivePool(() => new Box3());
  return function shapecast2(...args) {
    _box12 = boxPool.getPrimitive();
    _box22 = boxPool.getPrimitive();
    boxStack.push(_box12, _box22);
    const result = shapecastTraverse(...args);
    boxPool.releasePrimitive(_box12);
    boxPool.releasePrimitive(_box22);
    boxStack.pop();
    boxStack.pop();
    const length = boxStack.length;
    if (length > 0) {
      _box22 = boxStack[length - 1];
      _box12 = boxStack[length - 2];
    }
    return result;
  };
  function shapecastTraverse(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc = null, nodeIndexByteOffset = 0, depth = 0) {
    function getLeftOffset(nodeIndex322) {
      let nodeIndex162 = nodeIndex322 * 2, uint16Array2 = _uint16Array, uint32Array2 = _uint32Array;
      while (!IS_LEAF(nodeIndex162, uint16Array2)) {
        nodeIndex322 = LEFT_NODE(nodeIndex322);
        nodeIndex162 = nodeIndex322 * 2;
      }
      return OFFSET(nodeIndex322, uint32Array2);
    }
    function getRightEndOffset(nodeIndex322) {
      let nodeIndex162 = nodeIndex322 * 2, uint16Array2 = _uint16Array, uint32Array2 = _uint32Array;
      while (!IS_LEAF(nodeIndex162, uint16Array2)) {
        nodeIndex322 = RIGHT_NODE(nodeIndex322, uint32Array2);
        nodeIndex162 = nodeIndex322 * 2;
      }
      return OFFSET(nodeIndex322, uint32Array2) + COUNT(nodeIndex162, uint16Array2);
    }
    let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
    if (isLeaf) {
      const offset = OFFSET(nodeIndex32, uint32Array);
      const count = COUNT(nodeIndex16, uint16Array);
      arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, _box12);
      return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box12);
    } else {
      const left = LEFT_NODE(nodeIndex32);
      const right = RIGHT_NODE(nodeIndex32, uint32Array);
      let c1 = left;
      let c2 = right;
      let score1, score2;
      let box1, box2;
      if (nodeScoreFunc) {
        box1 = _box12;
        box2 = _box22;
        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);
        arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);
        score1 = nodeScoreFunc(box1);
        score2 = nodeScoreFunc(box2);
        if (score2 < score1) {
          c1 = right;
          c2 = left;
          const temp5 = score1;
          score1 = score2;
          score2 = temp5;
          box1 = box2;
        }
      }
      if (!box1) {
        box1 = _box12;
        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);
      }
      const isC1Leaf = IS_LEAF(c1 * 2, uint16Array);
      const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);
      let c1StopTraversal;
      if (c1Intersection === CONTAINED) {
        const offset = getLeftOffset(c1);
        const end = getRightEndOffset(c1);
        const count = end - offset;
        c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1);
      } else {
        c1StopTraversal = c1Intersection && shapecastTraverse(
          c1,
          geometry,
          intersectsBoundsFunc,
          intersectsRangeFunc,
          nodeScoreFunc,
          nodeIndexByteOffset,
          depth + 1
        );
      }
      if (c1StopTraversal)
        return true;
      box2 = _box22;
      arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);
      const isC2Leaf = IS_LEAF(c2 * 2, uint16Array);
      const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);
      let c2StopTraversal;
      if (c2Intersection === CONTAINED) {
        const offset = getLeftOffset(c2);
        const end = getRightEndOffset(c2);
        const count = end - offset;
        c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2);
      } else {
        c2StopTraversal = c2Intersection && shapecastTraverse(
          c2,
          geometry,
          intersectsBoundsFunc,
          intersectsRangeFunc,
          nodeScoreFunc,
          nodeIndexByteOffset,
          depth + 1
        );
      }
      if (c2StopTraversal)
        return true;
      return false;
    }
  }
}();
var intersectsGeometry = function() {
  const triangle = new ExtendedTriangle();
  const triangle2 = new ExtendedTriangle();
  const invertedMat = new Matrix4();
  const obb3 = new OrientedBox();
  const obb22 = new OrientedBox();
  return function intersectsGeometry2(nodeIndex32, geometry, otherGeometry, geometryToBvh, cachedObb = null) {
    let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
    if (cachedObb === null) {
      if (!otherGeometry.boundingBox) {
        otherGeometry.computeBoundingBox();
      }
      obb3.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);
      cachedObb = obb3;
    }
    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
    if (isLeaf) {
      const thisGeometry = geometry;
      const thisIndex = thisGeometry.index;
      const thisPos = thisGeometry.attributes.position;
      const index = otherGeometry.index;
      const pos = otherGeometry.attributes.position;
      const offset = OFFSET(nodeIndex32, uint32Array);
      const count = COUNT(nodeIndex16, uint16Array);
      invertedMat.copy(geometryToBvh).invert();
      if (otherGeometry.boundsTree) {
        arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb22);
        obb22.matrix.copy(invertedMat);
        obb22.needsUpdate = true;
        const res = otherGeometry.boundsTree.shapecast({
          intersectsBounds: (box) => obb22.intersectsBox(box),
          intersectsTriangle: (tri) => {
            tri.a.applyMatrix4(geometryToBvh);
            tri.b.applyMatrix4(geometryToBvh);
            tri.c.applyMatrix4(geometryToBvh);
            tri.needsUpdate = true;
            for (let i2 = offset * 3, l = (count + offset) * 3; i2 < l; i2 += 3) {
              setTriangle(triangle2, i2, thisIndex, thisPos);
              triangle2.needsUpdate = true;
              if (tri.intersectsTriangle(triangle2)) {
                return true;
              }
            }
            return false;
          }
        });
        return res;
      } else {
        for (let i2 = offset * 3, l = count + offset * 3; i2 < l; i2 += 3) {
          setTriangle(triangle, i2, thisIndex, thisPos);
          triangle.a.applyMatrix4(invertedMat);
          triangle.b.applyMatrix4(invertedMat);
          triangle.c.applyMatrix4(invertedMat);
          triangle.needsUpdate = true;
          for (let i22 = 0, l2 = index.count; i22 < l2; i22 += 3) {
            setTriangle(triangle2, i22, index, pos);
            triangle2.needsUpdate = true;
            if (triangle.intersectsTriangle(triangle2)) {
              return true;
            }
          }
        }
      }
    } else {
      const left = nodeIndex32 + 8;
      const right = uint32Array[nodeIndex32 + 6];
      arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox);
      const leftIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry2(left, geometry, otherGeometry, geometryToBvh, cachedObb);
      if (leftIntersection)
        return true;
      arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox);
      const rightIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry2(right, geometry, otherGeometry, geometryToBvh, cachedObb);
      if (rightIntersection)
        return true;
      return false;
    }
  };
}();
function intersectRay(nodeIndex32, array, ray4, target2) {
  arrayToBox(nodeIndex32, array, boundingBox);
  return ray4.intersectBox(boundingBox, target2);
}
var bufferStack = [];
var _prevBuffer;
var _float32Array;
var _uint16Array;
var _uint32Array;
function setBuffer(buffer) {
  if (_prevBuffer) {
    bufferStack.push(_prevBuffer);
  }
  _prevBuffer = buffer;
  _float32Array = new Float32Array(buffer);
  _uint16Array = new Uint16Array(buffer);
  _uint32Array = new Uint32Array(buffer);
}
function clearBuffer() {
  _prevBuffer = null;
  _float32Array = null;
  _uint16Array = null;
  _uint32Array = null;
  if (bufferStack.length) {
    setBuffer(bufferStack.pop());
  }
}

// node_modules/three-mesh-bvh/src/core/MeshBVH.js
var SKIP_GENERATION = Symbol("skip tree generation");
var aabb = new Box3();
var aabb2 = new Box3();
var tempMatrix = new Matrix4();
var obb = new OrientedBox();
var obb2 = new OrientedBox();
var temp = new Vector3();
var temp1 = new Vector3();
var temp2 = new Vector3();
var temp3 = new Vector3();
var temp4 = new Vector3();
var tempBox = new Box3();
var trianglePool = new PrimitivePool(() => new ExtendedTriangle());
var MeshBVH = class {
  static serialize(bvh, options = {}) {
    if (options.isBufferGeometry) {
      console.warn("MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.");
      return MeshBVH.serialize(
        arguments[0],
        {
          cloneBuffers: arguments[2] === void 0 ? true : arguments[2]
        }
      );
    }
    options = {
      cloneBuffers: true,
      ...options
    };
    const geometry = bvh.geometry;
    const rootData = bvh._roots;
    const indexAttribute = geometry.getIndex();
    let result;
    if (options.cloneBuffers) {
      result = {
        roots: rootData.map((root) => root.slice()),
        index: indexAttribute.array.slice()
      };
    } else {
      result = {
        roots: rootData,
        index: indexAttribute.array
      };
    }
    return result;
  }
  static deserialize(data, geometry, options = {}) {
    if (typeof options === "boolean") {
      console.warn("MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.");
      return MeshBVH.deserialize(
        arguments[0],
        arguments[1],
        {
          setIndex: arguments[2] === void 0 ? true : arguments[2]
        }
      );
    }
    options = {
      setIndex: true,
      ...options
    };
    const { index, roots } = data;
    const bvh = new MeshBVH(geometry, { ...options, [SKIP_GENERATION]: true });
    bvh._roots = roots;
    if (options.setIndex) {
      const indexAttribute = geometry.getIndex();
      if (indexAttribute === null) {
        const newIndex = new BufferAttribute(data.index, 1, false);
        geometry.setIndex(newIndex);
      } else if (indexAttribute.array !== index) {
        indexAttribute.array.set(index);
        indexAttribute.needsUpdate = true;
      }
    }
    return bvh;
  }
  constructor(geometry, options = {}) {
    if (!geometry.isBufferGeometry) {
      throw new Error("MeshBVH: Only BufferGeometries are supported.");
    } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {
      throw new Error("MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.");
    }
    options = Object.assign({
      strategy: CENTER,
      maxDepth: 40,
      maxLeafTris: 10,
      verbose: true,
      useSharedArrayBuffer: false,
      setBoundingBox: true,
      onProgress: null,
      // undocumented options
      // Whether to skip generating the tree. Used for deserialization.
      [SKIP_GENERATION]: false
    }, options);
    if (options.useSharedArrayBuffer && typeof SharedArrayBuffer === "undefined") {
      throw new Error("MeshBVH: SharedArrayBuffer is not available.");
    }
    this._roots = null;
    if (!options[SKIP_GENERATION]) {
      this._roots = buildPackedTree(geometry, options);
      if (!geometry.boundingBox && options.setBoundingBox) {
        geometry.boundingBox = this.getBoundingBox(new Box3());
      }
    }
    this.geometry = geometry;
  }
  refit(nodeIndices = null) {
    if (nodeIndices && Array.isArray(nodeIndices)) {
      nodeIndices = new Set(nodeIndices);
    }
    const geometry = this.geometry;
    const indexArr = geometry.index.array;
    const posAttr = geometry.attributes.position;
    let buffer, uint32Array, uint16Array, float32Array;
    let byteOffset = 0;
    const roots = this._roots;
    for (let i2 = 0, l = roots.length; i2 < l; i2++) {
      buffer = roots[i2];
      uint32Array = new Uint32Array(buffer);
      uint16Array = new Uint16Array(buffer);
      float32Array = new Float32Array(buffer);
      _traverse(0, byteOffset);
      byteOffset += buffer.byteLength;
    }
    function _traverse(node32Index, byteOffset2, force = false) {
      const node16Index = node32Index * 2;
      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;
      if (isLeaf) {
        const offset = uint32Array[node32Index + 6];
        const count = uint16Array[node16Index + 14];
        let minx = Infinity;
        let miny = Infinity;
        let minz = Infinity;
        let maxx = -Infinity;
        let maxy = -Infinity;
        let maxz = -Infinity;
        for (let i2 = 3 * offset, l = 3 * (offset + count); i2 < l; i2++) {
          const index = indexArr[i2];
          const x = posAttr.getX(index);
          const y = posAttr.getY(index);
          const z = posAttr.getZ(index);
          if (x < minx)
            minx = x;
          if (x > maxx)
            maxx = x;
          if (y < miny)
            miny = y;
          if (y > maxy)
            maxy = y;
          if (z < minz)
            minz = z;
          if (z > maxz)
            maxz = z;
        }
        if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {
          float32Array[node32Index + 0] = minx;
          float32Array[node32Index + 1] = miny;
          float32Array[node32Index + 2] = minz;
          float32Array[node32Index + 3] = maxx;
          float32Array[node32Index + 4] = maxy;
          float32Array[node32Index + 5] = maxz;
          return true;
        } else {
          return false;
        }
      } else {
        const left = node32Index + 8;
        const right = uint32Array[node32Index + 6];
        const offsetLeft = left + byteOffset2;
        const offsetRight = right + byteOffset2;
        let forceChildren = force;
        let includesLeft = false;
        let includesRight = false;
        if (nodeIndices) {
          if (!forceChildren) {
            includesLeft = nodeIndices.has(offsetLeft);
            includesRight = nodeIndices.has(offsetRight);
            forceChildren = !includesLeft && !includesRight;
          }
        } else {
          includesLeft = true;
          includesRight = true;
        }
        const traverseLeft = forceChildren || includesLeft;
        const traverseRight = forceChildren || includesRight;
        let leftChange = false;
        if (traverseLeft) {
          leftChange = _traverse(left, byteOffset2, forceChildren);
        }
        let rightChange = false;
        if (traverseRight) {
          rightChange = _traverse(right, byteOffset2, forceChildren);
        }
        const didChange = leftChange || rightChange;
        if (didChange) {
          for (let i2 = 0; i2 < 3; i2++) {
            const lefti = left + i2;
            const righti = right + i2;
            const minLeftValue = float32Array[lefti];
            const maxLeftValue = float32Array[lefti + 3];
            const minRightValue = float32Array[righti];
            const maxRightValue = float32Array[righti + 3];
            float32Array[node32Index + i2] = minLeftValue < minRightValue ? minLeftValue : minRightValue;
            float32Array[node32Index + i2 + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;
          }
        }
        return didChange;
      }
    }
  }
  traverse(callback, rootIndex = 0) {
    const buffer = this._roots[rootIndex];
    const uint32Array = new Uint32Array(buffer);
    const uint16Array = new Uint16Array(buffer);
    _traverse(0);
    function _traverse(node32Index, depth = 0) {
      const node16Index = node32Index * 2;
      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;
      if (isLeaf) {
        const offset = uint32Array[node32Index + 6];
        const count = uint16Array[node16Index + 14];
        callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);
      } else {
        const left = node32Index + BYTES_PER_NODE / 4;
        const right = uint32Array[node32Index + 6];
        const splitAxis = uint32Array[node32Index + 7];
        const stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);
        if (!stopTraversal) {
          _traverse(left, depth + 1);
          _traverse(right, depth + 1);
        }
      }
    }
  }
  /* Core Cast Functions */
  raycast(ray4, materialOrSide = FrontSide) {
    const roots = this._roots;
    const geometry = this.geometry;
    const intersects = [];
    const isMaterial = materialOrSide.isMaterial;
    const isArrayMaterial = Array.isArray(materialOrSide);
    const groups = geometry.groups;
    const side = isMaterial ? materialOrSide.side : materialOrSide;
    for (let i2 = 0, l = roots.length; i2 < l; i2++) {
      const materialSide = isArrayMaterial ? materialOrSide[groups[i2].materialIndex].side : side;
      const startCount = intersects.length;
      setBuffer(roots[i2]);
      raycast(0, geometry, materialSide, ray4, intersects);
      clearBuffer();
      if (isArrayMaterial) {
        const materialIndex = groups[i2].materialIndex;
        for (let j = startCount, jl = intersects.length; j < jl; j++) {
          intersects[j].face.materialIndex = materialIndex;
        }
      }
    }
    return intersects;
  }
  raycastFirst(ray4, materialOrSide = FrontSide) {
    const roots = this._roots;
    const geometry = this.geometry;
    const isMaterial = materialOrSide.isMaterial;
    const isArrayMaterial = Array.isArray(materialOrSide);
    let closestResult = null;
    const groups = geometry.groups;
    const side = isMaterial ? materialOrSide.side : materialOrSide;
    for (let i2 = 0, l = roots.length; i2 < l; i2++) {
      const materialSide = isArrayMaterial ? materialOrSide[groups[i2].materialIndex].side : side;
      setBuffer(roots[i2]);
      const result = raycastFirst(0, geometry, materialSide, ray4);
      clearBuffer();
      if (result != null && (closestResult == null || result.distance < closestResult.distance)) {
        closestResult = result;
        if (isArrayMaterial) {
          result.face.materialIndex = groups[i2].materialIndex;
        }
      }
    }
    return closestResult;
  }
  intersectsGeometry(otherGeometry, geomToMesh) {
    const geometry = this.geometry;
    let result = false;
    for (const root of this._roots) {
      setBuffer(root);
      result = intersectsGeometry(0, geometry, otherGeometry, geomToMesh);
      clearBuffer();
      if (result) {
        break;
      }
    }
    return result;
  }
  shapecast(callbacks, _intersectsTriangleFunc, _orderNodesFunc) {
    const geometry = this.geometry;
    if (callbacks instanceof Function) {
      if (_intersectsTriangleFunc) {
        const originalTriangleFunc = _intersectsTriangleFunc;
        _intersectsTriangleFunc = (tri, index, contained, depth) => {
          const i3 = index * 3;
          return originalTriangleFunc(tri, i3, i3 + 1, i3 + 2, contained, depth);
        };
      }
      callbacks = {
        boundsTraverseOrder: _orderNodesFunc,
        intersectsBounds: callbacks,
        intersectsTriangle: _intersectsTriangleFunc,
        intersectsRange: null
      };
      console.warn("MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.");
    }
    const triangle = trianglePool.getPrimitive();
    let {
      boundsTraverseOrder,
      intersectsBounds,
      intersectsRange,
      intersectsTriangle
    } = callbacks;
    if (intersectsRange && intersectsTriangle) {
      const originalIntersectsRange = intersectsRange;
      intersectsRange = (offset, count, contained, depth, nodeIndex) => {
        if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {
          return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);
        }
        return true;
      };
    } else if (!intersectsRange) {
      if (intersectsTriangle) {
        intersectsRange = (offset, count, contained, depth) => {
          return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);
        };
      } else {
        intersectsRange = (offset, count, contained) => {
          return contained;
        };
      }
    }
    let result = false;
    let byteOffset = 0;
    for (const root of this._roots) {
      setBuffer(root);
      result = shapecast(0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);
      clearBuffer();
      if (result) {
        break;
      }
      byteOffset += root.byteLength;
    }
    trianglePool.releasePrimitive(triangle);
    return result;
  }
  bvhcast(otherBvh, matrixToLocal, callbacks) {
    let {
      intersectsRanges,
      intersectsTriangles
    } = callbacks;
    const indexAttr = this.geometry.index;
    const positionAttr = this.geometry.attributes.position;
    const otherIndexAttr = otherBvh.geometry.index;
    const otherPositionAttr = otherBvh.geometry.attributes.position;
    tempMatrix.copy(matrixToLocal).invert();
    const triangle = trianglePool.getPrimitive();
    const triangle2 = trianglePool.getPrimitive();
    if (intersectsTriangles) {
      let iterateOverDoubleTriangles = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {
        for (let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2++) {
          setTriangle(triangle2, i2 * 3, otherIndexAttr, otherPositionAttr);
          triangle2.a.applyMatrix4(matrixToLocal);
          triangle2.b.applyMatrix4(matrixToLocal);
          triangle2.c.applyMatrix4(matrixToLocal);
          triangle2.needsUpdate = true;
          for (let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++) {
            setTriangle(triangle, i1 * 3, indexAttr, positionAttr);
            triangle.needsUpdate = true;
            if (intersectsTriangles(triangle, triangle2, i1, i2, depth1, index1, depth2, index2)) {
              return true;
            }
          }
        }
        return false;
      };
      if (intersectsRanges) {
        const originalIntersectsRanges = intersectsRanges;
        intersectsRanges = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {
          if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {
            return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);
          }
          return true;
        };
      } else {
        intersectsRanges = iterateOverDoubleTriangles;
      }
    }
    otherBvh.getBoundingBox(aabb2);
    aabb2.applyMatrix4(matrixToLocal);
    const result = this.shapecast({
      intersectsBounds: (box) => aabb2.intersectsBox(box),
      intersectsRange: (offset1, count1, contained, depth1, nodeIndex1, box) => {
        aabb.copy(box);
        aabb.applyMatrix4(tempMatrix);
        return otherBvh.shapecast({
          intersectsBounds: (box2) => aabb.intersectsBox(box2),
          intersectsRange: (offset2, count2, contained2, depth2, nodeIndex2) => {
            return intersectsRanges(offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2);
          }
        });
      }
    });
    trianglePool.releasePrimitive(triangle);
    trianglePool.releasePrimitive(triangle2);
    return result;
  }
  /* Derived Cast Functions */
  intersectsBox(box, boxToMesh) {
    obb.set(box.min, box.max, boxToMesh);
    obb.needsUpdate = true;
    return this.shapecast(
      {
        intersectsBounds: (box2) => obb.intersectsBox(box2),
        intersectsTriangle: (tri) => obb.intersectsTriangle(tri)
      }
    );
  }
  intersectsSphere(sphere) {
    return this.shapecast(
      {
        intersectsBounds: (box) => sphere.intersectsBox(box),
        intersectsTriangle: (tri) => tri.intersectsSphere(sphere)
      }
    );
  }
  closestPointToGeometry(otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {
    if (!otherGeometry.boundingBox) {
      otherGeometry.computeBoundingBox();
    }
    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);
    obb.needsUpdate = true;
    const geometry = this.geometry;
    const pos = geometry.attributes.position;
    const index = geometry.index;
    const otherPos = otherGeometry.attributes.position;
    const otherIndex = otherGeometry.index;
    const triangle = trianglePool.getPrimitive();
    const triangle2 = trianglePool.getPrimitive();
    let tempTarget1 = temp1;
    let tempTargetDest1 = temp2;
    let tempTarget2 = null;
    let tempTargetDest2 = null;
    if (target2) {
      tempTarget2 = temp3;
      tempTargetDest2 = temp4;
    }
    let closestDistance = Infinity;
    let closestDistanceTriIndex = null;
    let closestDistanceOtherTriIndex = null;
    tempMatrix.copy(geometryToBvh).invert();
    obb2.matrix.copy(tempMatrix);
    this.shapecast(
      {
        boundsTraverseOrder: (box) => {
          return obb.distanceToBox(box);
        },
        intersectsBounds: (box, isLeaf, score) => {
          if (score < closestDistance && score < maxThreshold) {
            if (isLeaf) {
              obb2.min.copy(box.min);
              obb2.max.copy(box.max);
              obb2.needsUpdate = true;
            }
            return true;
          }
          return false;
        },
        intersectsRange: (offset, count) => {
          if (otherGeometry.boundsTree) {
            return otherGeometry.boundsTree.shapecast({
              boundsTraverseOrder: (box) => {
                return obb2.distanceToBox(box);
              },
              intersectsBounds: (box, isLeaf, score) => {
                return score < closestDistance && score < maxThreshold;
              },
              intersectsRange: (otherOffset, otherCount) => {
                for (let i2 = otherOffset * 3, l2 = (otherOffset + otherCount) * 3; i2 < l2; i2 += 3) {
                  setTriangle(triangle2, i2, otherIndex, otherPos);
                  triangle2.a.applyMatrix4(geometryToBvh);
                  triangle2.b.applyMatrix4(geometryToBvh);
                  triangle2.c.applyMatrix4(geometryToBvh);
                  triangle2.needsUpdate = true;
                  for (let i3 = offset * 3, l = (offset + count) * 3; i3 < l; i3 += 3) {
                    setTriangle(triangle, i3, index, pos);
                    triangle.needsUpdate = true;
                    const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);
                    if (dist < closestDistance) {
                      tempTargetDest1.copy(tempTarget1);
                      if (tempTargetDest2) {
                        tempTargetDest2.copy(tempTarget2);
                      }
                      closestDistance = dist;
                      closestDistanceTriIndex = i3 / 3;
                      closestDistanceOtherTriIndex = i2 / 3;
                    }
                    if (dist < minThreshold) {
                      return true;
                    }
                  }
                }
              }
            });
          } else {
            const triCount = otherIndex ? otherIndex.count : otherPos.count;
            for (let i2 = 0, l2 = triCount; i2 < l2; i2 += 3) {
              setTriangle(triangle2, i2, otherIndex, otherPos);
              triangle2.a.applyMatrix4(geometryToBvh);
              triangle2.b.applyMatrix4(geometryToBvh);
              triangle2.c.applyMatrix4(geometryToBvh);
              triangle2.needsUpdate = true;
              for (let i3 = offset * 3, l = (offset + count) * 3; i3 < l; i3 += 3) {
                setTriangle(triangle, i3, index, pos);
                triangle.needsUpdate = true;
                const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);
                if (dist < closestDistance) {
                  tempTargetDest1.copy(tempTarget1);
                  if (tempTargetDest2) {
                    tempTargetDest2.copy(tempTarget2);
                  }
                  closestDistance = dist;
                  closestDistanceTriIndex = i3 / 3;
                  closestDistanceOtherTriIndex = i2 / 3;
                }
                if (dist < minThreshold) {
                  return true;
                }
              }
            }
          }
        }
      }
    );
    trianglePool.releasePrimitive(triangle);
    trianglePool.releasePrimitive(triangle2);
    if (closestDistance === Infinity)
      return null;
    if (!target1.point)
      target1.point = tempTargetDest1.clone();
    else
      target1.point.copy(tempTargetDest1);
    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;
    if (target2) {
      if (!target2.point)
        target2.point = tempTargetDest2.clone();
      else
        target2.point.copy(tempTargetDest2);
      target2.point.applyMatrix4(tempMatrix);
      tempTargetDest1.applyMatrix4(tempMatrix);
      target2.distance = tempTargetDest1.sub(target2.point).length();
      target2.faceIndex = closestDistanceOtherTriIndex;
    }
    return target1;
  }
  closestPointToPoint(point, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {
    const minThresholdSq = minThreshold * minThreshold;
    const maxThresholdSq = maxThreshold * maxThreshold;
    let closestDistanceSq = Infinity;
    let closestDistanceTriIndex = null;
    this.shapecast(
      {
        boundsTraverseOrder: (box) => {
          temp.copy(point).clamp(box.min, box.max);
          return temp.distanceToSquared(point);
        },
        intersectsBounds: (box, isLeaf, score) => {
          return score < closestDistanceSq && score < maxThresholdSq;
        },
        intersectsTriangle: (tri, triIndex) => {
          tri.closestPointToPoint(point, temp);
          const distSq = point.distanceToSquared(temp);
          if (distSq < closestDistanceSq) {
            temp1.copy(temp);
            closestDistanceSq = distSq;
            closestDistanceTriIndex = triIndex;
          }
          if (distSq < minThresholdSq) {
            return true;
          } else {
            return false;
          }
        }
      }
    );
    if (closestDistanceSq === Infinity)
      return null;
    const closestDistance = Math.sqrt(closestDistanceSq);
    if (!target2.point)
      target2.point = temp1.clone();
    else
      target2.point.copy(temp1);
    target2.distance = closestDistance, target2.faceIndex = closestDistanceTriIndex;
    return target2;
  }
  getBoundingBox(target2) {
    target2.makeEmpty();
    const roots = this._roots;
    roots.forEach((buffer) => {
      arrayToBox(0, new Float32Array(buffer), tempBox);
      target2.union(tempBox);
    });
    return target2;
  }
};

// node_modules/three-mesh-bvh/src/objects/MeshBVHVisualizer.js
var boundingBox2 = new Box3();

// node_modules/three-mesh-bvh/src/debug/Debug.js
var _box1 = new Box3();
var _box2 = new Box3();
var _vec = new Vector3();

// node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js
var ray = new Ray();
var tmpInverseMatrix = new Matrix4();
var origMeshRaycastFunc = Mesh.prototype.raycast;
function acceleratedRaycast(raycaster, intersects) {
  if (this.geometry.boundsTree) {
    if (this.material === void 0)
      return;
    tmpInverseMatrix.copy(this.matrixWorld).invert();
    ray.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);
    const bvh = this.geometry.boundsTree;
    if (raycaster.firstHitOnly === true) {
      const hit = convertRaycastIntersect(bvh.raycastFirst(ray, this.material), this, raycaster);
      if (hit) {
        intersects.push(hit);
      }
    } else {
      const hits = bvh.raycast(ray, this.material);
      for (let i2 = 0, l = hits.length; i2 < l; i2++) {
        const hit = convertRaycastIntersect(hits[i2], this, raycaster);
        if (hit) {
          intersects.push(hit);
        }
      }
    }
  } else {
    origMeshRaycastFunc.call(this, raycaster, intersects);
  }
}
function computeBoundsTree(options) {
  this.boundsTree = new MeshBVH(this, options);
  return this.boundsTree;
}
function disposeBoundsTree() {
  this.boundsTree = null;
}

// node_modules/three-mesh-bvh/src/gpu/VertexAttributeTexture.js
function countToStringFormat(count) {
  switch (count) {
    case 1:
      return "R";
    case 2:
      return "RG";
    case 3:
      return "RGBA";
    case 4:
      return "RGBA";
  }
  throw new Error();
}
function countToFormat(count) {
  switch (count) {
    case 1:
      return RedFormat;
    case 2:
      return RGFormat;
    case 3:
      return RGBAFormat;
    case 4:
      return RGBAFormat;
  }
}
function countToIntFormat(count) {
  switch (count) {
    case 1:
      return RedIntegerFormat;
    case 2:
      return RGIntegerFormat;
    case 3:
      return RGBAIntegerFormat;
    case 4:
      return RGBAIntegerFormat;
  }
}
var VertexAttributeTexture = class extends DataTexture {
  constructor() {
    super();
    this.minFilter = NearestFilter;
    this.magFilter = NearestFilter;
    this.generateMipmaps = false;
    this.overrideItemSize = null;
    this._forcedType = null;
  }
  updateFrom(attr) {
    const overrideItemSize = this.overrideItemSize;
    const originalItemSize = attr.itemSize;
    const originalCount = attr.count;
    if (overrideItemSize !== null) {
      if (originalItemSize * originalCount % overrideItemSize !== 0) {
        throw new Error("VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.");
      }
      attr.itemSize = overrideItemSize;
      attr.count = originalCount * originalItemSize / overrideItemSize;
    }
    const itemSize = attr.itemSize;
    const count = attr.count;
    const normalized = attr.normalized;
    const originalBufferCons = attr.array.constructor;
    const byteCount = originalBufferCons.BYTES_PER_ELEMENT;
    let targetType = this._forcedType;
    let finalStride = itemSize;
    if (targetType === null) {
      switch (originalBufferCons) {
        case Float32Array:
          targetType = FloatType;
          break;
        case Uint8Array:
        case Uint16Array:
        case Uint32Array:
          targetType = UnsignedIntType;
          break;
        case Int8Array:
        case Int16Array:
        case Int32Array:
          targetType = IntType;
          break;
      }
    }
    let type, format, normalizeValue, targetBufferCons;
    let internalFormat = countToStringFormat(itemSize);
    switch (targetType) {
      case FloatType:
        normalizeValue = 1;
        format = countToFormat(itemSize);
        if (normalized && byteCount === 1) {
          targetBufferCons = originalBufferCons;
          internalFormat += "8";
          if (originalBufferCons === Uint8Array) {
            type = UnsignedByteType;
          } else {
            type = ByteType;
            internalFormat += "_SNORM";
          }
        } else {
          targetBufferCons = Float32Array;
          internalFormat += "32F";
          type = FloatType;
        }
        break;
      case IntType:
        internalFormat += byteCount * 8 + "I";
        normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1;
        format = countToIntFormat(itemSize);
        if (byteCount === 1) {
          targetBufferCons = Int8Array;
          type = ByteType;
        } else if (byteCount === 2) {
          targetBufferCons = Int16Array;
          type = ShortType;
        } else {
          targetBufferCons = Int32Array;
          type = IntType;
        }
        break;
      case UnsignedIntType:
        internalFormat += byteCount * 8 + "UI";
        normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1;
        format = countToIntFormat(itemSize);
        if (byteCount === 1) {
          targetBufferCons = Uint8Array;
          type = UnsignedByteType;
        } else if (byteCount === 2) {
          targetBufferCons = Uint16Array;
          type = UnsignedShortType;
        } else {
          targetBufferCons = Uint32Array;
          type = UnsignedIntType;
        }
        break;
    }
    if (finalStride === 3 && (format === RGBAFormat || format === RGBAIntegerFormat)) {
      finalStride = 4;
    }
    const dimension = Math.ceil(Math.sqrt(count));
    const length = finalStride * dimension * dimension;
    const dataArray = new targetBufferCons(length);
    const originalNormalized = attr.normalized;
    attr.normalized = false;
    for (let i2 = 0; i2 < count; i2++) {
      const ii = finalStride * i2;
      dataArray[ii] = attr.getX(i2) / normalizeValue;
      if (itemSize >= 2) {
        dataArray[ii + 1] = attr.getY(i2) / normalizeValue;
      }
      if (itemSize >= 3) {
        dataArray[ii + 2] = attr.getZ(i2) / normalizeValue;
        if (finalStride === 4) {
          dataArray[ii + 3] = 1;
        }
      }
      if (itemSize >= 4) {
        dataArray[ii + 3] = attr.getW(i2) / normalizeValue;
      }
    }
    attr.normalized = originalNormalized;
    this.internalFormat = internalFormat;
    this.format = format;
    this.type = type;
    this.image.width = dimension;
    this.image.height = dimension;
    this.image.data = dataArray;
    this.needsUpdate = true;
    this.dispose();
    attr.itemSize = originalItemSize;
    attr.count = originalCount;
  }
};
var UIntVertexAttributeTexture = class extends VertexAttributeTexture {
  constructor() {
    super();
    this._forcedType = UnsignedIntType;
  }
};
var FloatVertexAttributeTexture = class extends VertexAttributeTexture {
  constructor() {
    super();
    this._forcedType = FloatType;
  }
};

// node_modules/three-mesh-bvh/src/gpu/MeshBVHUniformStruct.js
function bvhToTextures(bvh, boundsTexture, contentsTexture) {
  const roots = bvh._roots;
  if (roots.length !== 1) {
    throw new Error("MeshBVHUniformStruct: Multi-root BVHs not supported.");
  }
  const root = roots[0];
  const uint16Array = new Uint16Array(root);
  const uint32Array = new Uint32Array(root);
  const float32Array = new Float32Array(root);
  const nodeCount = root.byteLength / BYTES_PER_NODE;
  const boundsDimension = 2 * Math.ceil(Math.sqrt(nodeCount / 2));
  const boundsArray = new Float32Array(4 * boundsDimension * boundsDimension);
  const contentsDimension = Math.ceil(Math.sqrt(nodeCount));
  const contentsArray = new Uint32Array(2 * contentsDimension * contentsDimension);
  for (let i2 = 0; i2 < nodeCount; i2++) {
    const nodeIndex32 = i2 * BYTES_PER_NODE / 4;
    const nodeIndex16 = nodeIndex32 * 2;
    const boundsIndex = BOUNDING_DATA_INDEX(nodeIndex32);
    for (let b = 0; b < 3; b++) {
      boundsArray[8 * i2 + 0 + b] = float32Array[boundsIndex + 0 + b];
      boundsArray[8 * i2 + 4 + b] = float32Array[boundsIndex + 3 + b];
    }
    if (IS_LEAF(nodeIndex16, uint16Array)) {
      const count = COUNT(nodeIndex16, uint16Array);
      const offset = OFFSET(nodeIndex32, uint32Array);
      const mergedLeafCount = 4294901760 | count;
      contentsArray[i2 * 2 + 0] = mergedLeafCount;
      contentsArray[i2 * 2 + 1] = offset;
    } else {
      const rightIndex = 4 * RIGHT_NODE(nodeIndex32, uint32Array) / BYTES_PER_NODE;
      const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);
      contentsArray[i2 * 2 + 0] = splitAxis;
      contentsArray[i2 * 2 + 1] = rightIndex;
    }
  }
  boundsTexture.image.data = boundsArray;
  boundsTexture.image.width = boundsDimension;
  boundsTexture.image.height = boundsDimension;
  boundsTexture.format = RGBAFormat;
  boundsTexture.type = FloatType;
  boundsTexture.internalFormat = "RGBA32F";
  boundsTexture.minFilter = NearestFilter;
  boundsTexture.magFilter = NearestFilter;
  boundsTexture.generateMipmaps = false;
  boundsTexture.needsUpdate = true;
  boundsTexture.dispose();
  contentsTexture.image.data = contentsArray;
  contentsTexture.image.width = contentsDimension;
  contentsTexture.image.height = contentsDimension;
  contentsTexture.format = RGIntegerFormat;
  contentsTexture.type = UnsignedIntType;
  contentsTexture.internalFormat = "RG32UI";
  contentsTexture.minFilter = NearestFilter;
  contentsTexture.magFilter = NearestFilter;
  contentsTexture.generateMipmaps = false;
  contentsTexture.needsUpdate = true;
  contentsTexture.dispose();
}
var MeshBVHUniformStruct = class {
  constructor() {
    this.autoDispose = true;
    this.index = new UIntVertexAttributeTexture();
    this.position = new FloatVertexAttributeTexture();
    this.bvhBounds = new DataTexture();
    this.bvhContents = new DataTexture();
    this.index.overrideItemSize = 3;
  }
  updateFrom(bvh) {
    const { geometry } = bvh;
    bvhToTextures(bvh, this.bvhBounds, this.bvhContents);
    this.index.updateFrom(geometry.index);
    this.position.updateFrom(geometry.attributes.position);
  }
  dispose() {
    const { index, position: position2, bvhBounds, bvhContents } = this;
    if (index)
      index.dispose();
    if (position2)
      position2.dispose();
    if (bvhBounds)
      bvhBounds.dispose();
    if (bvhContents)
      bvhContents.dispose();
  }
};

// node_modules/three-mesh-bvh/src/gpu/shaderFunctions.js
var shaderStructs = (
  /* glsl */
  `
#ifndef TRI_INTERSECT_EPSILON
#define TRI_INTERSECT_EPSILON 1e-5
#endif

#ifndef INFINITY
#define INFINITY 1e20
#endif

struct BVH {

	usampler2D index;
	sampler2D position;

	sampler2D bvhBounds;
	usampler2D bvhContents;

};
`
);
var shaderIntersectFunction = (
  /* glsl */
  `

// Utilities
uvec4 uTexelFetch1D( usampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

ivec4 iTexelFetch1D( isampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 texelFetch1D( sampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 textureSampleBarycoord( sampler2D tex, vec3 barycoord, uvec3 faceIndices ) {

	return
		barycoord.x * texelFetch1D( tex, faceIndices.x ) +
		barycoord.y * texelFetch1D( tex, faceIndices.y ) +
		barycoord.z * texelFetch1D( tex, faceIndices.z );

}

void ndcToCameraRay(
	vec2 coord, mat4 cameraWorld, mat4 invProjectionMatrix,
	out vec3 rayOrigin, out vec3 rayDirection
) {

	// get camera look direction and near plane for camera clipping
	vec4 lookDirection = cameraWorld * vec4( 0.0, 0.0, - 1.0, 0.0 );
	vec4 nearVector = invProjectionMatrix * vec4( 0.0, 0.0, - 1.0, 1.0 );
	float near = abs( nearVector.z / nearVector.w );

	// get the camera direction and position from camera matrices
	vec4 origin = cameraWorld * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec4 direction = invProjectionMatrix * vec4( coord, 0.5, 1.0 );
	direction /= direction.w;
	direction = cameraWorld * direction - origin;

	// slide the origin along the ray until it sits at the near clip plane position
	origin.xyz += direction.xyz * near / dot( direction, lookDirection );

	rayOrigin = origin.xyz;
	rayDirection = direction.xyz;

}

// Raycasting
float intersectsBounds( vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax ) {

	// https://www.reddit.com/r/opengl/comments/8ntzz5/fast_glsl_ray_box_intersection/
	// https://tavianator.com/2011/ray_box.html
	vec3 invDir = 1.0 / rayDirection;

	// find intersection distances for each plane
	vec3 tMinPlane = invDir * ( boundsMin - rayOrigin );
	vec3 tMaxPlane = invDir * ( boundsMax - rayOrigin );

	// get the min and max distances from each intersection
	vec3 tMinHit = min( tMaxPlane, tMinPlane );
	vec3 tMaxHit = max( tMaxPlane, tMinPlane );

	// get the furthest hit distance
	vec2 t = max( tMinHit.xx, tMinHit.yz );
	float t0 = max( t.x, t.y );

	// get the minimum hit distance
	t = min( tMaxHit.xx, tMaxHit.yz );
	float t1 = min( t.x, t.y );

	// set distance to 0.0 if the ray starts inside the box
	float dist = max( t0, 0.0 );

	return t1 >= dist ? dist : INFINITY;

}

bool intersectsTriangle(
	vec3 rayOrigin, vec3 rayDirection, vec3 a, vec3 b, vec3 c,
	out vec3 barycoord, out vec3 norm, out float dist, out float side
) {

	// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d
	vec3 edge1 = b - a;
	vec3 edge2 = c - a;
	norm = cross( edge1, edge2 );

	float det = - dot( rayDirection, norm );
	float invdet = 1.0 / det;

	vec3 AO = rayOrigin - a;
	vec3 DAO = cross( AO, rayDirection );

	vec4 uvt;
	uvt.x = dot( edge2, DAO ) * invdet;
	uvt.y = - dot( edge1, DAO ) * invdet;
	uvt.z = dot( AO, norm ) * invdet;
	uvt.w = 1.0 - uvt.x - uvt.y;

	// set the hit information
	barycoord = uvt.wxy; // arranged in A, B, C order
	dist = uvt.z;
	side = sign( det );
	norm = side * normalize( norm );

	// add an epsilon to avoid misses between triangles
	uvt += vec4( TRI_INTERSECT_EPSILON );

	return all( greaterThanEqual( uvt, vec4( 0.0 ) ) );

}

bool intersectTriangles(
	BVH bvh, vec3 rayOrigin, vec3 rayDirection, uint offset, uint count,
	inout float minDistance,

	// output variables
	out uvec4 faceIndices, out vec3 faceNormal, out vec3 barycoord,
	out float side, out float dist
) {

	bool found = false;
	vec3 localBarycoord, localNormal;
	float localDist, localSide;
	for ( uint i = offset, l = offset + count; i < l; i ++ ) {

		uvec3 indices = uTexelFetch1D( bvh.index, i ).xyz;
		vec3 a = texelFetch1D( bvh.position, indices.x ).rgb;
		vec3 b = texelFetch1D( bvh.position, indices.y ).rgb;
		vec3 c = texelFetch1D( bvh.position, indices.z ).rgb;

		if (
			intersectsTriangle( rayOrigin, rayDirection, a, b, c, localBarycoord, localNormal, localDist, localSide )
			&& localDist < minDistance
		) {

			found = true;
			minDistance = localDist;

			faceIndices = uvec4( indices.xyz, i );
			faceNormal = localNormal;

			side = localSide;
			barycoord = localBarycoord;
			dist = localDist;

		}

	}

	return found;

}

float intersectsBVHNodeBounds( vec3 rayOrigin, vec3 rayDirection, BVH bvh, uint currNodeIndex ) {

	vec3 boundsMin = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 0u ).xyz;
	vec3 boundsMax = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 1u ).xyz;
	return intersectsBounds( rayOrigin, rayDirection, boundsMin, boundsMax );

}

bool bvhIntersectFirstHit(
	BVH bvh, vec3 rayOrigin, vec3 rayDirection,

	// output variables
	out uvec4 faceIndices, out vec3 faceNormal, out vec3 barycoord,
	out float side, out float dist
) {

	// stack needs to be twice as long as the deepest tree we expect because
	// we push both the left and right child onto the stack every traversal
	int ptr = 0;
	uint stack[ 60 ];
	stack[ 0 ] = 0u;

	float triangleDistance = 1e20;
	bool found = false;
	while ( ptr > - 1 && ptr < 60 ) {

		uint currNodeIndex = stack[ ptr ];
		ptr --;

		// check if we intersect the current bounds
		float boundsHitDistance = intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh, currNodeIndex );
		if ( boundsHitDistance == INFINITY || boundsHitDistance > triangleDistance ) {

			continue;

		}

		uvec2 boundsInfo = uTexelFetch1D( bvh.bvhContents, currNodeIndex ).xy;
		bool isLeaf = bool( boundsInfo.x & 0xffff0000u );

		if ( isLeaf ) {

			uint count = boundsInfo.x & 0x0000ffffu;
			uint offset = boundsInfo.y;

			found = intersectTriangles(
				bvh, rayOrigin, rayDirection, offset, count, triangleDistance,
				faceIndices, faceNormal, barycoord, side, dist
			) || found;

		} else {

			uint leftIndex = currNodeIndex + 1u;
			uint splitAxis = boundsInfo.x & 0x0000ffffu;
			uint rightIndex = boundsInfo.y;

			bool leftToRight = rayDirection[ splitAxis ] >= 0.0;
			uint c1 = leftToRight ? leftIndex : rightIndex;
			uint c2 = leftToRight ? rightIndex : leftIndex;

			// set c2 in the stack so we traverse it later. We need to keep track of a pointer in
			// the stack while we traverse. The second pointer added is the one that will be
			// traversed first
			ptr ++;
			stack[ ptr ] = c2;

			ptr ++;
			stack[ ptr ] = c1;

		}

	}

	return found;

}
`
);

// node_modules/three-mesh-bvh/src/utils/StaticGeometryGenerator.js
var _positionVector = new Vector3();
var _normalVector = new Vector3();
var _tangentVector = new Vector3();
var _tangentVector4 = new Vector4();
var _morphVector = new Vector3();
var _temp = new Vector3();
var _skinIndex = new Vector4();
var _skinWeight = new Vector4();
var _matrix = new Matrix4();
var _boneMatrix = new Matrix4();

// node_modules/@react-three/drei/core/useBVH.js
function useBVH(mesh, options) {
  React52.useEffect(() => {
    if (mesh.current) {
      mesh.current.raycast = acceleratedRaycast;
      const geometry = mesh.current.geometry;
      geometry.computeBoundsTree = computeBoundsTree;
      geometry.disposeBoundsTree = disposeBoundsTree;
      geometry.computeBoundsTree(options);
      return () => {
        if (geometry.boundsTree) {
          geometry.disposeBoundsTree();
        }
      };
    }
  }, [mesh, options]);
}

// node_modules/@react-three/drei/core/useContextBridge.js
var React53 = __toESM(require_react());
function useContextBridge(...contexts) {
  const cRef = React53.useRef([]);
  cRef.current = contexts.map((context10) => React53.useContext(context10));
  return React53.useMemo(() => ({
    children
  }) => contexts.reduceRight(
    (acc, Context2, i2) => React53.createElement(Context2.Provider, {
      value: cRef.current[i2],
      children: acc
    }),
    children
    /*
     * done this way in reference to:
     * https://github.com/DefinitelyTyped/DefinitelyTyped/issues/44572#issuecomment-625878049
     * https://github.com/microsoft/TypeScript/issues/14729
     */
  ), []);
}

// node_modules/@react-three/drei/core/useAnimations.js
var React54 = __toESM(require_react());
function useAnimations(clips, root) {
  const ref = React54.useRef();
  const [actualRef] = React54.useState(() => root ? root instanceof Object3D ? {
    current: root
  } : root : ref);
  const [mixer] = React54.useState(() => new AnimationMixer(void 0));
  const lazyActions = React54.useRef({});
  const [api] = React54.useState(() => {
    const actions = {};
    clips.forEach((clip) => Object.defineProperty(actions, clip.name, {
      enumerable: true,
      get() {
        if (actualRef.current) {
          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));
        }
      }
    }));
    return {
      ref: actualRef,
      clips,
      actions,
      names: clips.map((c) => c.name),
      mixer
    };
  });
  useFrame((state, delta) => mixer.update(delta));
  React54.useEffect(() => {
    const currentRoot = actualRef.current;
    return () => {
      lazyActions.current = {};
      Object.values(api.actions).forEach((action) => {
        if (currentRoot) {
          mixer.uncacheAction(action, currentRoot);
        }
      });
    };
  }, [clips]);
  React54.useEffect(() => {
    return () => {
      mixer.stopAllAction();
    };
  }, [mixer]);
  return api;
}

// node_modules/@react-three/drei/core/useIntersect.js
var React55 = __toESM(require_react());
function useIntersect(onChange) {
  const ref = React55.useRef(null);
  const check = React55.useRef(false);
  const temp5 = React55.useRef(false);
  const callback = React55.useRef(onChange);
  React55.useLayoutEffect(() => void (callback.current = onChange), [onChange]);
  React55.useEffect(() => {
    const obj = ref.current;
    if (obj) {
      const unsub1 = addEffect(() => {
        check.current = false;
        return true;
      });
      const oldOnRender = obj.onBeforeRender;
      obj.onBeforeRender = () => check.current = true;
      const unsub2 = addAfterEffect(() => {
        if (check.current !== temp5.current)
          callback.current == null ? void 0 : callback.current(temp5.current = check.current);
        return true;
      });
      return () => {
        obj.onBeforeRender = oldOnRender;
        unsub1();
        unsub2();
      };
    }
  }, []);
  return ref;
}

// node_modules/@react-three/drei/core/useBoxProjectedEnv.js
var React56 = __toESM(require_react());
var worldposReplace = (
  /* glsl */
  `
#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )
  vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );
  #ifdef BOX_PROJECTED_ENV_MAP
    vWorldPosition = worldPosition.xyz;
  #endif
#endif
`
);
var boxProjectDefinitions = (
  /*glsl */
  `
#ifdef BOX_PROJECTED_ENV_MAP
  uniform vec3 envMapSize;
  uniform vec3 envMapPosition;
  varying vec3 vWorldPosition;
    
  vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {
    vec3 nDir = normalize( v );
    vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;
    vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;
    vec3 rbminmax;
    rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;
    rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;
    rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;
    float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );
    vec3 boxIntersection = vWorldPosition + nDir * correction;    
    return boxIntersection - cubePos;
  }
#endif
`
);
var getIBLIrradiance_patch = (
  /* glsl */
  `
#ifdef BOX_PROJECTED_ENV_MAP
  worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );
#endif
`
);
var getIBLRadiance_patch = (
  /* glsl */
  `
#ifdef BOX_PROJECTED_ENV_MAP
  reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );
#endif
`
);
function boxProjectedEnvMap(shader, envMapPosition, envMapSize) {
  shader.defines.BOX_PROJECTED_ENV_MAP = true;
  shader.uniforms.envMapPosition = {
    value: envMapPosition
  };
  shader.uniforms.envMapSize = {
    value: envMapSize
  };
  shader.vertexShader = `
  varying vec3 vWorldPosition;
  ${shader.vertexShader.replace("#include <worldpos_vertex>", worldposReplace)}`;
  shader.fragmentShader = `
    ${boxProjectDefinitions}
    ${shader.fragmentShader.replace("#include <envmap_physical_pars_fragment>", ShaderChunk.envmap_physical_pars_fragment).replace("vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );", `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
         ${getIBLIrradiance_patch}
         `).replace("reflectVec = inverseTransformDirection( reflectVec, viewMatrix );", `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
         ${getIBLRadiance_patch}
        `)}`;
}
function useBoxProjectedEnv(position2 = new Vector3(), size = new Vector3()) {
  const [config] = React56.useState(() => ({
    position: new Vector3(),
    size: new Vector3()
  }));
  applyProps(config, {
    position: position2,
    size
  });
  const ref = React56.useRef(null);
  const spread = React56.useMemo(() => ({
    ref,
    onBeforeCompile: (shader) => boxProjectedEnvMap(shader, config.position, config.size),
    customProgramCacheKey: () => JSON.stringify(config.position.toArray()) + JSON.stringify(config.size.toArray())
  }), [...config.position.toArray(), ...config.size.toArray()]);
  React56.useLayoutEffect(() => void (ref.current.needsUpdate = true), [config]);
  return spread;
}

// node_modules/@react-three/drei/core/BBAnchor.js
var React57 = __toESM(require_react());
var boundingBox3 = new Box3();
var boundingBoxSize = new Vector3();
var BBAnchor = ({
  anchor,
  ...props
}) => {
  const ref = React57.useRef(null);
  const parentRef = React57.useRef(null);
  React57.useEffect(() => {
    var _ref$current, _ref$current$parent;
    if ((_ref$current = ref.current) != null && (_ref$current$parent = _ref$current.parent) != null && _ref$current$parent.parent) {
      parentRef.current = ref.current.parent;
      ref.current.parent.parent.add(ref.current);
    }
  }, []);
  useFrame(() => {
    if (parentRef.current) {
      boundingBox3.setFromObject(parentRef.current);
      boundingBox3.getSize(boundingBoxSize);
      ref.current.position.set(parentRef.current.position.x + boundingBoxSize.x * anchor[0] / 2, parentRef.current.position.y + boundingBoxSize.y * anchor[1] / 2, parentRef.current.position.z + boundingBoxSize.z * anchor[2] / 2);
    }
  });
  return React57.createElement("group", _extends({
    ref
  }, props));
};

// node_modules/@react-three/drei/core/useTrailTexture.js
var import_react8 = __toESM(require_react());
function smoothAverage(current, measurement, smoothing = 0.9) {
  return measurement * smoothing + current * (1 - smoothing);
}
var easeCircleOut = (x) => Math.sqrt(1 - Math.pow(x - 1, 2));
var TrailTexture = class {
  constructor({
    size = 256,
    maxAge = 750,
    radius = 0.3,
    intensity = 0.2,
    interpolate = 0,
    smoothing = 0,
    minForce = 0.3,
    blend = "screen",
    // source-over is canvas default. Others are slower
    ease = easeCircleOut
  } = {}) {
    this.size = size;
    this.maxAge = maxAge;
    this.radius = radius;
    this.intensity = intensity;
    this.ease = ease;
    this.interpolate = interpolate;
    this.smoothing = smoothing;
    this.minForce = minForce;
    this.blend = blend;
    this.trail = [];
    this.force = 0;
    this.initTexture();
  }
  initTexture() {
    this.canvas = document.createElement("canvas");
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext("2d");
    this.ctx.fillStyle = "black";
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    this.texture = new Texture(this.canvas);
    this.canvas.id = "touchTexture";
    this.canvas.style.width = this.canvas.style.height = `${this.canvas.width}px`;
  }
  update(delta) {
    this.clear();
    this.trail.forEach((point, i2) => {
      point.age += delta * 1e3;
      if (point.age > this.maxAge) {
        this.trail.splice(i2, 1);
      }
    });
    if (!this.trail.length)
      this.force = 0;
    this.trail.forEach((point) => {
      this.drawTouch(point);
    });
    this.texture.needsUpdate = true;
  }
  clear() {
    this.ctx.globalCompositeOperation = "source-over";
    this.ctx.fillStyle = "black";
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  }
  addTouch(point) {
    const last = this.trail[this.trail.length - 1];
    if (last) {
      const dx = last.x - point.x;
      const dy = last.y - point.y;
      const dd = dx * dx + dy * dy;
      const force = Math.max(this.minForce, Math.min(dd * 1e4, 1));
      this.force = smoothAverage(force, this.force, this.smoothing);
      if (!!this.interpolate) {
        const lines = Math.ceil(dd / Math.pow(this.radius * 0.5 / this.interpolate, 2));
        if (lines > 1) {
          for (let i2 = 1; i2 < lines; i2++) {
            this.trail.push({
              x: last.x - dx / lines * i2,
              y: last.y - dy / lines * i2,
              age: 0,
              force
            });
          }
        }
      }
    }
    this.trail.push({
      x: point.x,
      y: point.y,
      age: 0,
      force: this.force
    });
  }
  drawTouch(point) {
    const pos = {
      x: point.x * this.size,
      y: (1 - point.y) * this.size
    };
    let intensity = 1;
    if (point.age < this.maxAge * 0.3) {
      intensity = this.ease(point.age / (this.maxAge * 0.3));
    } else {
      intensity = this.ease(1 - (point.age - this.maxAge * 0.3) / (this.maxAge * 0.7));
    }
    intensity *= point.force;
    this.ctx.globalCompositeOperation = this.blend;
    const radius = this.size * this.radius * intensity;
    const grd = this.ctx.createRadialGradient(pos.x, pos.y, Math.max(0, radius * 0.25), pos.x, pos.y, Math.max(0, radius));
    grd.addColorStop(0, `rgba(255, 255, 255, ${this.intensity})`);
    grd.addColorStop(1, `rgba(0, 0, 0, 0.0)`);
    this.ctx.beginPath();
    this.ctx.fillStyle = grd;
    this.ctx.arc(pos.x, pos.y, Math.max(0, radius), 0, Math.PI * 2);
    this.ctx.fill();
  }
};
function useTrailTexture(config = {}) {
  const {
    size,
    maxAge,
    radius,
    intensity,
    interpolate,
    smoothing,
    minForce,
    blend,
    ease
  } = config;
  const trail = (0, import_react8.useMemo)(() => new TrailTexture(config), [size, maxAge, radius, intensity, interpolate, smoothing, minForce, blend, ease]);
  useFrame((_, delta) => void trail.update(delta));
  const onMove = (0, import_react8.useCallback)((e) => trail.addTouch(e.uv), [trail]);
  return [trail.texture, onMove];
}

// node_modules/@react-three/drei/core/CurveModifier.js
var React58 = __toESM(require_react());
var CurveModifier = React58.forwardRef(({
  children,
  curve
}, ref) => {
  const [scene] = React58.useState(() => new Scene());
  const [obj, set] = React58.useState();
  const modifier = React58.useRef();
  React58.useEffect(() => {
    modifier.current = new Flow(scene.children[0]);
    set(modifier.current.object3D);
  }, [children]);
  React58.useEffect(() => {
    var _modifier$current;
    if (curve)
      (_modifier$current = modifier.current) == null ? void 0 : _modifier$current.updateCurve(0, curve);
  }, [curve]);
  React58.useImperativeHandle(ref, () => ({
    moveAlongCurve: (val) => {
      var _modifier$current2;
      (_modifier$current2 = modifier.current) == null ? void 0 : _modifier$current2.moveAlongCurve(val);
    }
  }));
  return React58.createElement(React58.Fragment, null, createPortal(children, scene), obj && React58.createElement("primitive", {
    object: obj
  }));
});

// node_modules/@react-three/drei/core/MeshDistortMaterial.js
var React59 = __toESM(require_react());

// node_modules/@react-three/drei/helpers/glsl/distort.vert.glsl.js
var distort = "#define GLSLIFY 1\nvec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}";

// node_modules/@react-three/drei/core/MeshDistortMaterial.js
var DistortMaterialImpl = class extends MeshPhysicalMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this.setValues(parameters);
    this._time = {
      value: 0
    };
    this._distort = {
      value: 0.4
    };
    this._radius = {
      value: 1
    };
  }
  onBeforeCompile(shader) {
    shader.uniforms.time = this._time;
    shader.uniforms.radius = this._radius;
    shader.uniforms.distort = this._distort;
    shader.vertexShader = `
      uniform float time;
      uniform float radius;
      uniform float distort;
      ${distort}
      ${shader.vertexShader}
    `;
    shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", `
        float updateTime = time / 50.0;
        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));
        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));
        `);
  }
  get time() {
    return this._time.value;
  }
  set time(v4) {
    this._time.value = v4;
  }
  get distort() {
    return this._distort.value;
  }
  set distort(v4) {
    this._distort.value = v4;
  }
  get radius() {
    return this._radius.value;
  }
  set radius(v4) {
    this._radius.value = v4;
  }
};
var MeshDistortMaterial = React59.forwardRef(({
  speed = 1,
  ...props
}, ref) => {
  const [material] = React59.useState(() => new DistortMaterialImpl());
  useFrame((state) => material && (material.time = state.clock.getElapsedTime() * speed));
  return React59.createElement("primitive", _extends({
    object: material,
    ref,
    attach: "material"
  }, props));
});

// node_modules/@react-three/drei/core/MeshWobbleMaterial.js
var React60 = __toESM(require_react());
var WobbleMaterialImpl = class extends MeshStandardMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this.setValues(parameters);
    this._time = {
      value: 0
    };
    this._factor = {
      value: 1
    };
  }
  onBeforeCompile(shader) {
    shader.uniforms.time = this._time;
    shader.uniforms.factor = this._factor;
    shader.vertexShader = `
      uniform float time;
      uniform float factor;
      ${shader.vertexShader}
    `;
    shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", `float theta = sin( time + position.y ) / 2.0 * factor;
        float c = cos( theta );
        float s = sin( theta );
        mat3 m = mat3( c, 0, s, 0, 1, 0, -s, 0, c );
        vec3 transformed = vec3( position ) * m;
        vNormal = vNormal * m;`);
  }
  get time() {
    return this._time.value;
  }
  set time(v4) {
    this._time.value = v4;
  }
  get factor() {
    return this._factor.value;
  }
  set factor(v4) {
    this._factor.value = v4;
  }
};
var MeshWobbleMaterial = React60.forwardRef(({
  speed = 1,
  ...props
}, ref) => {
  const [material] = React60.useState(() => new WobbleMaterialImpl());
  useFrame((state) => material && (material.time = state.clock.getElapsedTime() * speed));
  return React60.createElement("primitive", _extends({
    object: material,
    ref,
    attach: "material"
  }, props));
});

// node_modules/@react-three/drei/core/MeshReflectorMaterial.js
var React61 = __toESM(require_react());

// node_modules/@react-three/drei/materials/ConvolutionMaterial.js
var ConvolutionMaterial = class extends ShaderMaterial {
  constructor(texelSize = new Vector2()) {
    super({
      uniforms: {
        inputBuffer: new Uniform(null),
        depthBuffer: new Uniform(null),
        resolution: new Uniform(new Vector2()),
        texelSize: new Uniform(new Vector2()),
        halfTexelSize: new Uniform(new Vector2()),
        kernel: new Uniform(0),
        scale: new Uniform(1),
        cameraNear: new Uniform(0),
        cameraFar: new Uniform(1),
        minDepthThreshold: new Uniform(0),
        maxDepthThreshold: new Uniform(1),
        depthScale: new Uniform(0),
        depthToBlurRatioBias: new Uniform(0.25)
      },
      fragmentShader: `#include <common>
        #include <dithering_pars_fragment>      
        uniform sampler2D inputBuffer;
        uniform sampler2D depthBuffer;
        uniform float cameraNear;
        uniform float cameraFar;
        uniform float minDepthThreshold;
        uniform float maxDepthThreshold;
        uniform float depthScale;
        uniform float depthToBlurRatioBias;
        varying vec2 vUv;
        varying vec2 vUv0;
        varying vec2 vUv1;
        varying vec2 vUv2;
        varying vec2 vUv3;

        void main() {
          float depthFactor = 0.0;
          
          #ifdef USE_DEPTH
            vec4 depth = texture2D(depthBuffer, vUv);
            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));
            depthFactor *= depthScale;
            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));
          #endif
          
          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));
          gl_FragColor = sum * 0.25 ;

          #include <dithering_fragment>
          #include <tonemapping_fragment>
          #include <encodings_fragment>
        }`,
      vertexShader: `uniform vec2 texelSize;
        uniform vec2 halfTexelSize;
        uniform float kernel;
        uniform float scale;
        varying vec2 vUv;
        varying vec2 vUv0;
        varying vec2 vUv1;
        varying vec2 vUv2;
        varying vec2 vUv3;

        void main() {
          vec2 uv = position.xy * 0.5 + 0.5;
          vUv = uv;

          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;
          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);
          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);
          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);
          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);

          gl_Position = vec4(position.xy, 1.0, 1.0);
        }`,
      blending: NoBlending,
      depthWrite: false,
      depthTest: false
    });
    this.toneMapped = false;
    this.setTexelSize(texelSize.x, texelSize.y);
    this.kernel = new Float32Array([0, 1, 2, 2, 3]);
  }
  setTexelSize(x, y) {
    this.uniforms.texelSize.value.set(x, y);
    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);
  }
  setResolution(resolution) {
    this.uniforms.resolution.value.copy(resolution);
  }
};

// node_modules/@react-three/drei/materials/BlurPass.js
var BlurPass = class {
  constructor({
    gl,
    resolution,
    width = 500,
    height = 500,
    minDepthThreshold = 0,
    maxDepthThreshold = 1,
    depthScale = 0,
    depthToBlurRatioBias = 0.25
  }) {
    this.renderToScreen = false;
    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      stencilBuffer: false,
      depthBuffer: false,
      encoding: gl.outputEncoding
    });
    this.renderTargetB = this.renderTargetA.clone();
    this.convolutionMaterial = new ConvolutionMaterial();
    this.convolutionMaterial.setTexelSize(1 / width, 1 / height);
    this.convolutionMaterial.setResolution(new Vector2(width, height));
    this.scene = new Scene();
    this.camera = new Camera();
    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;
    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;
    this.convolutionMaterial.uniforms.depthScale.value = depthScale;
    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;
    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;
    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);
    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new BufferAttribute(vertices, 3));
    geometry.setAttribute("uv", new BufferAttribute(uvs, 2));
    this.screen = new Mesh(geometry, this.convolutionMaterial);
    this.screen.frustumCulled = false;
    this.scene.add(this.screen);
  }
  render(renderer, inputBuffer, outputBuffer) {
    const scene = this.scene;
    const camera = this.camera;
    const renderTargetA = this.renderTargetA;
    const renderTargetB = this.renderTargetB;
    let material = this.convolutionMaterial;
    let uniforms = material.uniforms;
    uniforms.depthBuffer.value = inputBuffer.depthTexture;
    const kernel = material.kernel;
    let lastRT = inputBuffer;
    let destRT;
    let i2, l;
    for (i2 = 0, l = kernel.length - 1; i2 < l; ++i2) {
      destRT = (i2 & 1) === 0 ? renderTargetA : renderTargetB;
      uniforms.kernel.value = kernel[i2];
      uniforms.inputBuffer.value = lastRT.texture;
      renderer.setRenderTarget(destRT);
      renderer.render(scene, camera);
      lastRT = destRT;
    }
    uniforms.kernel.value = kernel[i2];
    uniforms.inputBuffer.value = lastRT.texture;
    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);
    renderer.render(scene, camera);
  }
};

// node_modules/@react-three/drei/materials/MeshReflectorMaterial.js
var MeshReflectorMaterial = class extends MeshStandardMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this._tDepth = {
      value: null
    };
    this._distortionMap = {
      value: null
    };
    this._tDiffuse = {
      value: null
    };
    this._tDiffuseBlur = {
      value: null
    };
    this._textureMatrix = {
      value: null
    };
    this._hasBlur = {
      value: false
    };
    this._mirror = {
      value: 0
    };
    this._mixBlur = {
      value: 0
    };
    this._blurStrength = {
      value: 0.5
    };
    this._minDepthThreshold = {
      value: 0.9
    };
    this._maxDepthThreshold = {
      value: 1
    };
    this._depthScale = {
      value: 0
    };
    this._depthToBlurRatioBias = {
      value: 0.25
    };
    this._distortion = {
      value: 1
    };
    this._mixContrast = {
      value: 1
    };
    this.setValues(parameters);
  }
  onBeforeCompile(shader) {
    var _shader$defines;
    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {
      shader.defines.USE_UV = "";
    }
    shader.uniforms.hasBlur = this._hasBlur;
    shader.uniforms.tDiffuse = this._tDiffuse;
    shader.uniforms.tDepth = this._tDepth;
    shader.uniforms.distortionMap = this._distortionMap;
    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;
    shader.uniforms.textureMatrix = this._textureMatrix;
    shader.uniforms.mirror = this._mirror;
    shader.uniforms.mixBlur = this._mixBlur;
    shader.uniforms.mixStrength = this._blurStrength;
    shader.uniforms.minDepthThreshold = this._minDepthThreshold;
    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;
    shader.uniforms.depthScale = this._depthScale;
    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;
    shader.uniforms.distortion = this._distortion;
    shader.uniforms.mixContrast = this._mixContrast;
    shader.vertexShader = `
        uniform mat4 textureMatrix;
        varying vec4 my_vUv;
      ${shader.vertexShader}`;
    shader.vertexShader = shader.vertexShader.replace("#include <project_vertex>", `#include <project_vertex>
        my_vUv = textureMatrix * vec4( position, 1.0 );
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);
    shader.fragmentShader = `
        uniform sampler2D tDiffuse;
        uniform sampler2D tDiffuseBlur;
        uniform sampler2D tDepth;
        uniform sampler2D distortionMap;
        uniform float distortion;
        uniform float cameraNear;
			  uniform float cameraFar;
        uniform bool hasBlur;
        uniform float mixBlur;
        uniform float mirror;
        uniform float mixStrength;
        uniform float minDepthThreshold;
        uniform float maxDepthThreshold;
        uniform float mixContrast;
        uniform float depthScale;
        uniform float depthToBlurRatioBias;
        varying vec4 my_vUv;
        ${shader.fragmentShader}`;
    shader.fragmentShader = shader.fragmentShader.replace("#include <emissivemap_fragment>", `#include <emissivemap_fragment>

      float distortionFactor = 0.0;
      #ifdef USE_DISTORTION
        distortionFactor = texture2D(distortionMap, vUv).r * distortion;
      #endif

      vec4 new_vUv = my_vUv;
      new_vUv.x += distortionFactor;
      new_vUv.y += distortionFactor;

      vec4 base = texture2DProj(tDiffuse, new_vUv);
      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);

      vec4 merge = base;

      #ifdef USE_NORMALMAP
        vec2 normal_uv = vec2(0.0);
        vec4 normalColor = texture2D(normalMap, vUv * normalScale);
        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );
        vec3 coord = new_vUv.xyz / new_vUv.w;
        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;
        vec4 base_normal = texture2D(tDiffuse, normal_uv);
        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);
        merge = base_normal;
        blur = blur_normal;
      #endif

      float depthFactor = 0.0001;
      float blurFactor = 0.0;

      #ifdef USE_DEPTH
        vec4 depth = texture2DProj(tDepth, new_vUv);
        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));
        depthFactor *= depthScale;
        depthFactor = max(0.0001, min(1.0, depthFactor));

        #ifdef USE_BLUR
          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);
          merge = merge * min(1.0, depthFactor + 0.5);
        #else
          merge = merge * depthFactor;
        #endif

      #endif

      float reflectorRoughnessFactor = roughness;
      #ifdef USE_ROUGHNESSMAP
        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );
        reflectorRoughnessFactor *= reflectorTexelRoughness.g;
      #endif

      #ifdef USE_BLUR
        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);
        merge = mix(merge, blur, blurFactor);
      #endif

      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);
      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;
      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;
      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;

      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);
      `);
  }
  get tDiffuse() {
    return this._tDiffuse.value;
  }
  set tDiffuse(v4) {
    this._tDiffuse.value = v4;
  }
  get tDepth() {
    return this._tDepth.value;
  }
  set tDepth(v4) {
    this._tDepth.value = v4;
  }
  get distortionMap() {
    return this._distortionMap.value;
  }
  set distortionMap(v4) {
    this._distortionMap.value = v4;
  }
  get tDiffuseBlur() {
    return this._tDiffuseBlur.value;
  }
  set tDiffuseBlur(v4) {
    this._tDiffuseBlur.value = v4;
  }
  get textureMatrix() {
    return this._textureMatrix.value;
  }
  set textureMatrix(v4) {
    this._textureMatrix.value = v4;
  }
  get hasBlur() {
    return this._hasBlur.value;
  }
  set hasBlur(v4) {
    this._hasBlur.value = v4;
  }
  get mirror() {
    return this._mirror.value;
  }
  set mirror(v4) {
    this._mirror.value = v4;
  }
  get mixBlur() {
    return this._mixBlur.value;
  }
  set mixBlur(v4) {
    this._mixBlur.value = v4;
  }
  get mixStrength() {
    return this._blurStrength.value;
  }
  set mixStrength(v4) {
    this._blurStrength.value = v4;
  }
  get minDepthThreshold() {
    return this._minDepthThreshold.value;
  }
  set minDepthThreshold(v4) {
    this._minDepthThreshold.value = v4;
  }
  get maxDepthThreshold() {
    return this._maxDepthThreshold.value;
  }
  set maxDepthThreshold(v4) {
    this._maxDepthThreshold.value = v4;
  }
  get depthScale() {
    return this._depthScale.value;
  }
  set depthScale(v4) {
    this._depthScale.value = v4;
  }
  get depthToBlurRatioBias() {
    return this._depthToBlurRatioBias.value;
  }
  set depthToBlurRatioBias(v4) {
    this._depthToBlurRatioBias.value = v4;
  }
  get distortion() {
    return this._distortion.value;
  }
  set distortion(v4) {
    this._distortion.value = v4;
  }
  get mixContrast() {
    return this._mixContrast.value;
  }
  set mixContrast(v4) {
    this._mixContrast.value = v4;
  }
};

// node_modules/@react-three/drei/core/MeshReflectorMaterial.js
extend({
  MeshReflectorMaterialImpl: MeshReflectorMaterial
});
var MeshReflectorMaterial2 = React61.forwardRef(({
  mixBlur = 0,
  mixStrength = 1,
  resolution = 256,
  blur = [0, 0],
  minDepthThreshold = 0.9,
  maxDepthThreshold = 1,
  depthScale = 0,
  depthToBlurRatioBias = 0.25,
  mirror = 0,
  distortion = 1,
  mixContrast = 1,
  distortionMap,
  reflectorOffset = 0,
  ...props
}, ref) => {
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  blur = Array.isArray(blur) ? blur : [blur, blur];
  const hasBlur = blur[0] + blur[1] > 0;
  const materialRef = React61.useRef(null);
  const [reflectorPlane] = React61.useState(() => new Plane());
  const [normal] = React61.useState(() => new Vector3());
  const [reflectorWorldPosition] = React61.useState(() => new Vector3());
  const [cameraWorldPosition] = React61.useState(() => new Vector3());
  const [rotationMatrix] = React61.useState(() => new Matrix4());
  const [lookAtPosition] = React61.useState(() => new Vector3(0, 0, -1));
  const [clipPlane] = React61.useState(() => new Vector4());
  const [view] = React61.useState(() => new Vector3());
  const [target2] = React61.useState(() => new Vector3());
  const [q] = React61.useState(() => new Vector4());
  const [textureMatrix] = React61.useState(() => new Matrix4());
  const [virtualCamera] = React61.useState(() => new PerspectiveCamera());
  const beforeRender = React61.useCallback(() => {
    var _materialRef$current;
    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);
    if (!parent)
      return;
    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);
    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
    rotationMatrix.extractRotation(parent.matrixWorld);
    normal.set(0, 0, 1);
    normal.applyMatrix4(rotationMatrix);
    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);
    view.subVectors(reflectorWorldPosition, cameraWorldPosition);
    if (view.dot(normal) > 0)
      return;
    view.reflect(normal).negate();
    view.add(reflectorWorldPosition);
    rotationMatrix.extractRotation(camera.matrixWorld);
    lookAtPosition.set(0, 0, -1);
    lookAtPosition.applyMatrix4(rotationMatrix);
    lookAtPosition.add(cameraWorldPosition);
    target2.subVectors(reflectorWorldPosition, lookAtPosition);
    target2.reflect(normal).negate();
    target2.add(reflectorWorldPosition);
    virtualCamera.position.copy(view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(rotationMatrix);
    virtualCamera.up.reflect(normal);
    virtualCamera.lookAt(target2);
    virtualCamera.far = camera.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
    textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    textureMatrix.multiply(virtualCamera.projectionMatrix);
    textureMatrix.multiply(virtualCamera.matrixWorldInverse);
    textureMatrix.multiply(parent.matrixWorld);
    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);
    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    q.z = -1;
    q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(2 / clipPlane.dot(q));
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z + 1;
    projectionMatrix.elements[14] = clipPlane.w;
  }, [camera, reflectorOffset]);
  const [fbo1, fbo2, blurpass, reflectorProps] = React61.useMemo(() => {
    const parameters = {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      encoding: gl.outputEncoding,
      type: HalfFloatType
    };
    const fbo12 = new WebGLRenderTarget(resolution, resolution, parameters);
    fbo12.depthBuffer = true;
    fbo12.depthTexture = new DepthTexture(resolution, resolution);
    fbo12.depthTexture.format = DepthFormat;
    fbo12.depthTexture.type = UnsignedShortType;
    const fbo22 = new WebGLRenderTarget(resolution, resolution, parameters);
    const blurpass2 = new BlurPass({
      gl,
      resolution,
      width: blur[0],
      height: blur[1],
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias
    });
    const reflectorProps2 = {
      mirror,
      textureMatrix,
      mixBlur,
      tDiffuse: fbo12.texture,
      tDepth: fbo12.depthTexture,
      tDiffuseBlur: fbo22.texture,
      hasBlur,
      mixStrength,
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias,
      distortion,
      distortionMap,
      mixContrast,
      "defines-USE_BLUR": hasBlur ? "" : void 0,
      "defines-USE_DEPTH": depthScale > 0 ? "" : void 0,
      "defines-USE_DISTORTION": distortionMap ? "" : void 0
    };
    return [fbo12, fbo22, blurpass2, reflectorProps2];
  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);
  useFrame(() => {
    var _materialRef$current2;
    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);
    if (!parent)
      return;
    parent.visible = false;
    const currentXrEnabled = gl.xr.enabled;
    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;
    beforeRender();
    gl.xr.enabled = false;
    gl.shadowMap.autoUpdate = false;
    gl.setRenderTarget(fbo1);
    gl.state.buffers.depth.setMask(true);
    if (!gl.autoClear)
      gl.clear();
    gl.render(scene, virtualCamera);
    if (hasBlur)
      blurpass.render(gl, fbo1, fbo2);
    gl.xr.enabled = currentXrEnabled;
    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;
    parent.visible = true;
    gl.setRenderTarget(null);
  });
  return React61.createElement("meshReflectorMaterialImpl", _extends({
    attach: "material",
    key: "key" + reflectorProps["defines-USE_BLUR"] + reflectorProps["defines-USE_DEPTH"] + reflectorProps["defines-USE_DISTORTION"],
    ref: react_merge_refs_esm_default([materialRef, ref])
  }, reflectorProps, props));
});

// node_modules/@react-three/drei/core/MeshRefractionMaterial.js
var React62 = __toESM(require_react());
var import_react9 = __toESM(require_react());

// node_modules/@react-three/drei/materials/MeshRefractionMaterial.js
var MeshRefractionMaterial = shaderMaterial(
  {
    envMap: null,
    bounces: 3,
    ior: 2.4,
    correctMips: true,
    aberrationStrength: 0.01,
    fresnel: 0,
    bvh: new MeshBVHUniformStruct(),
    color: new Color("white"),
    resolution: new Vector2()
  },
  /*glsl*/
  `
  #ifndef USE_COLOR
    uniform vec3 color;
  #endif
  varying vec3 vWorldPosition;  
  varying vec3 vNormal;
  varying mat4 projectionMatrixInv;
  varying mat4 viewMatrixInv;
  varying vec3 viewDirection;
  varying mat4 vInstanceMatrix;
  varying vec3 vColor;
  
  void main() {        
    vec4 transformedNormal = vec4(normal, 0.0);
    vec4 transformedPosition = vec4(position, 1.0);
    #ifdef USE_INSTANCING
      vInstanceMatrix = instanceMatrix;
      transformedNormal = instanceMatrix * transformedNormal;
      transformedPosition = instanceMatrix * transformedPosition;
    #else
      vInstanceMatrix = mat4(1.0);
    #endif

    vColor = color;
    #ifdef USE_INSTANCING_COLOR
      vColor *= instanceColor.rgb;
    #endif
  
    projectionMatrixInv = inverse(projectionMatrix);
    viewMatrixInv = inverse(viewMatrix);

    vWorldPosition = (modelMatrix * transformedPosition).xyz;
    vNormal = normalize((viewMatrixInv * vec4(normalMatrix * transformedNormal.xyz, 0.0)).xyz);
    viewDirection = normalize(vWorldPosition - cameraPosition);
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * transformedPosition;
  }`,
  /*glsl*/
  `
  #define ENVMAP_TYPE_CUBE_UV
  precision highp isampler2D;
  precision highp usampler2D;
  varying vec3 vWorldPosition;
  varying vec3 vNormal;
    
  #ifdef ENVMAP_TYPE_CUBEM
    uniform samplerCube envMap;
  #else
    uniform sampler2D envMap;
  #endif
    
  uniform float bounces;
  ${shaderStructs}
  ${shaderIntersectFunction}
  uniform BVH bvh;
  uniform float ior;
  uniform bool correctMips;
  uniform vec2 resolution;
  uniform float fresnel;
  uniform mat4 modelMatrix;
    
  uniform float aberrationStrength;
  varying mat4 projectionMatrixInv;
  varying mat4 viewMatrixInv;
  varying vec3 viewDirection;  
  varying mat4 vInstanceMatrix;
  varying vec3 vColor;
  
  float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {
    return pow( 1.0 + dot( viewDirection, worldNormal), 10.0 );
  }
    
  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 normal, float ior, mat4 modelMatrixInverse) {
    vec3 rayOrigin = ro;
    vec3 rayDirection = rd;
    rayDirection = refract(rayDirection, normal, 1.0 / ior);
    rayOrigin = vWorldPosition + rayDirection * 0.001;
    rayOrigin = (modelMatrixInverse * vec4(rayOrigin, 1.0)).xyz;
    rayDirection = normalize((modelMatrixInverse * vec4(rayDirection, 0.0)).xyz);
    for(float i = 0.0; i < bounces; i++) {
      uvec4 faceIndices = uvec4( 0u );
      vec3 faceNormal = vec3( 0.0, 0.0, 1.0 );
      vec3 barycoord = vec3( 0.0 );
      float side = 1.0;
      float dist = 0.0;
      bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );
      vec3 hitPos = rayOrigin + rayDirection * max(dist - 0.001, 0.0);      
      vec3 tempDir = refract(rayDirection, faceNormal, ior);
      if (length(tempDir) != 0.0) {
        rayDirection = tempDir;
        break;
      }
      rayDirection = reflect(rayDirection, faceNormal);
      rayOrigin = hitPos + rayDirection * 0.01;
    }
    rayDirection = normalize((modelMatrix * vec4(rayDirection, 0.0)).xyz);
    return rayDirection;
  }
    
  #include <common>
  #include <cube_uv_reflection_fragment>
    
  #ifdef ENVMAP_TYPE_CUBEM
    vec4 textureGradient(samplerCube envMap, vec3 rayDirection, vec3 directionCamPerfect) {
      return textureGrad(envMap, rayDirection, dFdx(correctMips ? directionCamPerfect: rayDirection), dFdy(correctMips ? directionCamPerfect: rayDirection));
    }
  #else
    vec4 textureGradient(sampler2D envMap, vec3 rayDirection, vec3 directionCamPerfect) {
      vec2 uvv = equirectUv( rayDirection );
      vec2 smoothUv = equirectUv( directionCamPerfect );
      return textureGrad(envMap, uvv, dFdx(correctMips ? smoothUv : uvv), dFdy(correctMips ? smoothUv : uvv));
    }
  #endif
  
  void main() {
    mat4 modelMatrixInverse = inverse(modelMatrix * vInstanceMatrix);
    vec2 uv = gl_FragCoord.xy / resolution;
    vec3 directionCamPerfect = (projectionMatrixInv * vec4(uv * 2.0 - 1.0, 0.0, 1.0)).xyz;
    directionCamPerfect = (viewMatrixInv * vec4(directionCamPerfect, 0.0)).xyz;
    directionCamPerfect = normalize(directionCamPerfect);
    vec3 normal = vNormal;
    vec3 rayOrigin = cameraPosition;
    vec3 rayDirection = normalize(vWorldPosition - cameraPosition);
    vec3 finalColor;
    #ifdef CHROMATIC_ABERRATIONS
      vec3 rayDirectionG = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior, 1.0), modelMatrixInverse);
      #ifdef FAST_CHROMA 
        vec3 rayDirectionR = normalize(rayDirectionG + 1.0 * vec3(aberrationStrength / 2.0));
        vec3 rayDirectionB = normalize(rayDirectionG - 1.0 * vec3(aberrationStrength / 2.0));
      #else
        vec3 rayDirectionR = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior * (1.0 - aberrationStrength), 1.0), modelMatrixInverse);
        vec3 rayDirectionB = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior * (1.0 + aberrationStrength), 1.0), modelMatrixInverse);
      #endif
      float finalColorR = textureGradient(envMap, rayDirectionR, directionCamPerfect).r;
      float finalColorG = textureGradient(envMap, rayDirectionG, directionCamPerfect).g;
      float finalColorB = textureGradient(envMap, rayDirectionB, directionCamPerfect).b;
      finalColor = vec3(finalColorR, finalColorG, finalColorB) * vColor;
    #else
      rayDirection = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior, 1.0), modelMatrixInverse);
      finalColor = textureGradient(envMap, rayDirection, directionCamPerfect).rgb;    
      finalColor *= vColor;
    #endif
    float nFresnel = fresnelFunc(viewDirection, normal) * fresnel;
    gl_FragColor = vec4(mix(finalColor, vec3(1.0), nFresnel), 1.0);      
    #include <tonemapping_fragment>
    #include <encodings_fragment>
  }`
);

// node_modules/@react-three/drei/core/MeshRefractionMaterial.js
var isCubeTexture = (def) => def && def.isCubeTexture;
function MeshRefractionMaterial2({
  aberrationStrength = 0,
  fastChroma = true,
  envMap,
  ...props
}) {
  extend({
    MeshRefractionMaterial
  });
  const material = (0, import_react9.useRef)();
  const {
    size
  } = useThree();
  const defines = (0, import_react9.useMemo)(() => {
    var _ref, _envMap$image$;
    const temp5 = {};
    const isCubeMap = isCubeTexture(envMap);
    const w = (_ref = isCubeMap ? (_envMap$image$ = envMap.image[0]) == null ? void 0 : _envMap$image$.width : envMap.image.width) !== null && _ref !== void 0 ? _ref : 1024;
    const cubeSize = w / 4;
    const _lodMax = Math.floor(Math.log2(cubeSize));
    const _cubeSize = Math.pow(2, _lodMax);
    const width = 3 * Math.max(_cubeSize, 16 * 7);
    const height = 4 * _cubeSize;
    if (isCubeMap)
      temp5.ENVMAP_TYPE_CUBEM = "";
    temp5.CUBEUV_TEXEL_WIDTH = `${1 / width}`;
    temp5.CUBEUV_TEXEL_HEIGHT = `${1 / height}`;
    temp5.CUBEUV_MAX_MIP = `${_lodMax}.0`;
    if (aberrationStrength > 0)
      temp5.CHROMATIC_ABERRATIONS = "";
    if (fastChroma)
      temp5.FAST_CHROMA = "";
    return temp5;
  }, [aberrationStrength, fastChroma]);
  (0, import_react9.useLayoutEffect)(() => {
    var _material$current, _material$current$__r, _material$current$__r2;
    const geometry = (_material$current = material.current) == null ? void 0 : (_material$current$__r = _material$current.__r3f) == null ? void 0 : (_material$current$__r2 = _material$current$__r.parent) == null ? void 0 : _material$current$__r2.geometry;
    if (geometry)
      material.current.bvh.updateFrom(new MeshBVH(geometry.toNonIndexed(), {
        lazyGeneration: false,
        strategy: SAH
      }));
  }, []);
  return React62.createElement("meshRefractionMaterial", _extends({
    // @ts-ignore
    key: JSON.stringify(defines),
    defines,
    ref: material,
    resolution: [size.width, size.height],
    aberrationStrength,
    envMap
  }, props));
}

// node_modules/@react-three/drei/core/PointMaterial.js
var React63 = __toESM(require_react());
var PointMaterialImpl = class extends PointsMaterial {
  constructor(props) {
    super(props);
    this.onBeforeCompile = (shader, renderer) => {
      const {
        isWebGL2
      } = renderer.capabilities;
      shader.fragmentShader = shader.fragmentShader.replace("#include <output_fragment>", `
        ${!isWebGL2 ? "#extension GL_OES_standard_derivatives : enable\n#include <output_fragment>" : "#include <output_fragment>"}
      vec2 cxy = 2.0 * gl_PointCoord - 1.0;
      float r = dot(cxy, cxy);
      float delta = fwidth(r);     
      float mask = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);
      gl_FragColor = vec4(gl_FragColor.rgb, mask * gl_FragColor.a );
      `);
    };
  }
};
var PointMaterial = React63.forwardRef((props, ref) => {
  const [material] = React63.useState(() => new PointMaterialImpl(null));
  return React63.createElement("primitive", _extends({}, props, {
    object: material,
    ref,
    attach: "material"
  }));
});

// node_modules/@react-three/drei/core/softShadows.js
var pcss = ({
  frustum = 3.75,
  size = 5e-3,
  near = 9.5,
  samples = 17,
  rings = 11
} = {}) => `#define LIGHT_WORLD_SIZE ${size}
#define LIGHT_FRUSTUM_WIDTH ${frustum}
#define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)
#define NEAR_PLANE ${near}

#define NUM_SAMPLES ${samples}
#define NUM_RINGS ${rings}
#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES
#define PCF_NUM_SAMPLES NUM_SAMPLES

vec2 poissonDisk[NUM_SAMPLES];

void initPoissonSamples(const in vec2 randomSeed) {
  float ANGLE_STEP = PI2 * float(NUM_RINGS) / float(NUM_SAMPLES);
  float INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);
  float angle = rand(randomSeed) * PI2;
  float radius = INV_NUM_SAMPLES;
  float radiusStep = radius;
  for (int i = 0; i < NUM_SAMPLES; i++) {
    poissonDisk[i] = vec2(cos(angle), sin(angle)) * pow(radius, 0.75);
    radius += radiusStep;
    angle += ANGLE_STEP;
  }
}

float penumbraSize(const in float zReceiver, const in float zBlocker) { // Parallel plane estimation
  return (zReceiver - zBlocker) / zBlocker;
}

float findBlocker(sampler2D shadowMap, const in vec2 uv, const in float zReceiver) {
  float searchRadius = LIGHT_SIZE_UV * (zReceiver - NEAR_PLANE) / zReceiver;
  float blockerDepthSum = 0.0;
  int numBlockers = 0;
  for (int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++) {
    float shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));
    if (shadowMapDepth < zReceiver) {
      blockerDepthSum += shadowMapDepth;
      numBlockers++;
    }
  }
  if (numBlockers == 0) return -1.0;
  return blockerDepthSum / float(numBlockers);
}

float PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius) {
  float sum = 0.0;
  for (int i = 0; i < PCF_NUM_SAMPLES; i++) {
    float depth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[ i ] * filterRadius));
    if (zReceiver <= depth) sum += 1.0;
  }
  for (int i = 0; i < PCF_NUM_SAMPLES; i++) {
    float depth = unpackRGBAToDepth(texture2D(shadowMap, uv + -poissonDisk[ i ].yx * filterRadius));
    if (zReceiver <= depth) sum += 1.0;
  }
  return sum / (2.0 * float(PCF_NUM_SAMPLES));
}

float PCSS(sampler2D shadowMap, vec4 coords) {
  vec2 uv = coords.xy;
  float zReceiver = coords.z; // Assumed to be eye-space z in this code
  initPoissonSamples(uv);
  float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver);
  if (avgBlockerDepth == -1.0) return 1.0;
  float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);
  float filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;
  return PCF_Filter(shadowMap, uv, zReceiver, filterRadius);
}`;
var deployed = false;
var softShadows = (props) => {
  if (!deployed) {
    deployed = true;
    let shader = ShaderChunk.shadowmap_pars_fragment;
    shader = shader.replace("#ifdef USE_SHADOWMAP", "#ifdef USE_SHADOWMAP\n" + pcss({
      ...props
    }));
    shader = shader.replace("#if defined( SHADOWMAP_TYPE_PCF )", "\nreturn PCSS(shadowMap, shadowCoord);\n#if defined( SHADOWMAP_TYPE_PCF )");
    ShaderChunk.shadowmap_pars_fragment = shader;
  }
};

// node_modules/@react-three/drei/core/shapes.js
var React64 = __toESM(require_react());
function create2(type) {
  const El = type + "Geometry";
  return React64.forwardRef(({
    args,
    children,
    ...props
  }, ref) => React64.createElement("mesh", _extends({
    ref
  }, props), React64.createElement(El, {
    attach: "geometry",
    args
  }), children));
}
var Box = create2("box");
var Circle = create2("circle");
var Cone = create2("cone");
var Cylinder = create2("cylinder");
var Sphere2 = create2("sphere");
var Plane2 = create2("plane");
var Tube = create2("tube");
var Torus = create2("torus");
var TorusKnot = create2("torusKnot");
var Tetrahedron = create2("tetrahedron");
var Ring = create2("ring");
var Polyhedron = create2("polyhedron");
var Icosahedron = create2("icosahedron");
var Octahedron = create2("octahedron");
var Dodecahedron = create2("dodecahedron");
var Extrude = create2("extrude");
var Lathe = create2("lathe");
var Capsule = create2("capsule");

// node_modules/@react-three/drei/core/RoundedBox.js
var React65 = __toESM(require_react());
var eps = 1e-5;
function createShape(width, height, radius0) {
  const shape = new Shape();
  const radius = radius0 - eps;
  shape.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);
  shape.absarc(eps, height - radius * 2, eps, Math.PI, Math.PI / 2, true);
  shape.absarc(width - radius * 2, height - radius * 2, eps, Math.PI / 2, 0, true);
  shape.absarc(width - radius * 2, eps, eps, 0, -Math.PI / 2, true);
  return shape;
}
var RoundedBox = React65.forwardRef(function RoundedBox2({
  args: [width = 1, height = 1, depth = 1] = [],
  radius = 0.05,
  steps = 1,
  smoothness = 4,
  children,
  ...rest
}, ref) {
  const shape = React65.useMemo(() => createShape(width, height, radius), [width, height, radius]);
  const params = React65.useMemo(() => ({
    depth: depth - radius * 2,
    bevelEnabled: true,
    bevelSegments: smoothness * 2,
    steps,
    bevelSize: radius - eps,
    bevelThickness: radius,
    curveSegments: smoothness
  }), [depth, radius, smoothness]);
  const geomRef = React65.useRef();
  React65.useLayoutEffect(() => {
    if (geomRef.current) {
      geomRef.current.center();
    }
  }, [shape, params]);
  return React65.createElement("mesh", _extends({
    ref
  }, rest), React65.createElement("extrudeGeometry", {
    ref: geomRef,
    args: [shape, params]
  }), children);
});

// node_modules/@react-three/drei/core/ScreenQuad.js
var React66 = __toESM(require_react());
function createScreenQuadGeometry() {
  const geometry = new BufferGeometry();
  const vertices = new Float32Array([-1, -1, 3, -1, -1, 3]);
  geometry.setAttribute("position", new BufferAttribute(vertices, 2));
  return geometry;
}
var ScreenQuad = React66.forwardRef(function ScreenQuad2({
  children,
  ...restProps
}, ref) {
  const geometry = React66.useMemo(createScreenQuadGeometry, []);
  return React66.createElement("mesh", _extends({
    ref,
    geometry,
    frustumCulled: false
  }, restProps), children);
});

// node_modules/@react-three/drei/core/Center.js
var React67 = __toESM(require_react());
var Center = React67.forwardRef(function Center2({
  children,
  disableX,
  disableY,
  disableZ,
  left,
  right,
  top,
  bottom,
  front,
  back,
  onCentered,
  precise = true,
  ...props
}, fRef) {
  const ref = React67.useRef(null);
  const outer = React67.useRef(null);
  const inner = React67.useRef(null);
  React67.useLayoutEffect(() => {
    outer.current.matrixWorld.identity();
    const box3 = new Box3().setFromObject(inner.current, precise);
    const center = new Vector3();
    const sphere = new Sphere();
    const width = box3.max.x - box3.min.x;
    const height = box3.max.y - box3.min.y;
    const depth = box3.max.z - box3.min.z;
    box3.getCenter(center);
    box3.getBoundingSphere(sphere);
    const vAlign = top ? height / 2 : bottom ? -height / 2 : 0;
    const hAlign = left ? -width / 2 : right ? width / 2 : 0;
    const dAlign = front ? depth / 2 : back ? -depth / 2 : 0;
    outer.current.position.set(disableX ? 0 : -center.x + hAlign, disableY ? 0 : -center.y + vAlign, disableZ ? 0 : -center.z + dAlign);
    if (typeof onCentered !== "undefined") {
      onCentered({
        parent: ref.current.parent,
        container: ref.current,
        width,
        height,
        depth,
        boundingBox: box3,
        boundingSphere: sphere,
        center,
        verticalAlignment: vAlign,
        horizontalAlignment: hAlign,
        depthAlignment: dAlign
      });
    }
  }, [children]);
  React67.useImperativeHandle(fRef, () => ref.current, []);
  return React67.createElement("group", _extends({
    ref
  }, props), React67.createElement("group", {
    ref: outer
  }, React67.createElement("group", {
    ref: inner
  }, children)));
});

// node_modules/@react-three/drei/core/Bounds.js
var React68 = __toESM(require_react());
var isOrthographic = (def) => def && def.isOrthographicCamera;
var isBox3 = (def) => def && def.isBox3;
var context5 = React68.createContext(null);
function Bounds({
  children,
  damping = 6,
  fit,
  clip,
  observe,
  margin = 1.2,
  eps: eps2 = 0.01,
  onFit
}) {
  const ref = React68.useRef(null);
  const {
    camera,
    invalidate,
    size,
    controls: controlsImpl
  } = useThree();
  const controls = controlsImpl;
  const onFitRef = React68.useRef(onFit);
  onFitRef.current = onFit;
  function equals(a, b) {
    return Math.abs(a.x - b.x) < eps2 && Math.abs(a.y - b.y) < eps2 && Math.abs(a.z - b.z) < eps2;
  }
  function damp(v4, t, lambda, delta) {
    v4.x = MathUtils.damp(v4.x, t.x, lambda, delta);
    v4.y = MathUtils.damp(v4.y, t.y, lambda, delta);
    v4.z = MathUtils.damp(v4.z, t.z, lambda, delta);
  }
  const [current] = React68.useState(() => ({
    animating: false,
    focus: new Vector3(),
    camera: new Vector3(),
    zoom: 1
  }));
  const [goal] = React68.useState(() => ({
    focus: new Vector3(),
    camera: new Vector3(),
    zoom: 1
  }));
  const [box] = React68.useState(() => new Box3());
  const api = React68.useMemo(() => {
    function getSize() {
      const size2 = box.getSize(new Vector3());
      const center = box.getCenter(new Vector3());
      const maxSize = Math.max(size2.x, size2.y, size2.z);
      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));
      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;
      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);
      return {
        box,
        size: size2,
        center,
        distance
      };
    }
    return {
      getSize,
      refresh(object) {
        if (isBox3(object))
          box.copy(object);
        else {
          const target2 = object || ref.current;
          target2.updateWorldMatrix(true, true);
          box.setFromObject(target2);
        }
        if (box.isEmpty()) {
          const max = camera.position.length() || 10;
          box.setFromCenterAndSize(new Vector3(), new Vector3(max, max, max));
        }
        if ((controls == null ? void 0 : controls.constructor.name) === "OrthographicTrackballControls") {
          const {
            distance
          } = getSize();
          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);
          const newPos = controls.target.clone().add(direction);
          camera.position.copy(newPos);
        }
        return this;
      },
      clip() {
        const {
          distance
        } = getSize();
        if (controls)
          controls.maxDistance = distance * 10;
        camera.near = distance / 100;
        camera.far = distance * 100;
        camera.updateProjectionMatrix();
        if (controls)
          controls.update();
        invalidate();
        return this;
      },
      to({
        position: position2,
        target: target2
      }) {
        current.camera.copy(camera.position);
        const {
          center
        } = getSize();
        goal.camera.set(...position2);
        if (target2) {
          goal.focus.set(...target2);
        } else {
          goal.focus.copy(center);
        }
        if (damping) {
          current.animating = true;
        } else {
          camera.position.set(...position2);
        }
        return this;
      },
      fit() {
        current.camera.copy(camera.position);
        if (controls)
          current.focus.copy(controls.target);
        const {
          center,
          distance
        } = getSize();
        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);
        goal.camera.copy(center).sub(direction);
        goal.focus.copy(center);
        if (isOrthographic(camera)) {
          current.zoom = camera.zoom;
          let maxHeight = 0, maxWidth = 0;
          const vertices = [new Vector3(box.min.x, box.min.y, box.min.z), new Vector3(box.min.x, box.max.y, box.min.z), new Vector3(box.min.x, box.min.y, box.max.z), new Vector3(box.min.x, box.max.y, box.max.z), new Vector3(box.max.x, box.max.y, box.max.z), new Vector3(box.max.x, box.max.y, box.min.z), new Vector3(box.max.x, box.min.y, box.max.z), new Vector3(box.max.x, box.min.y, box.min.z)];
          center.applyMatrix4(camera.matrixWorldInverse);
          for (const v4 of vertices) {
            v4.applyMatrix4(camera.matrixWorldInverse);
            maxHeight = Math.max(maxHeight, Math.abs(v4.y - center.y));
            maxWidth = Math.max(maxWidth, Math.abs(v4.x - center.x));
          }
          maxHeight *= 2;
          maxWidth *= 2;
          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;
          const zoomForWidth = (camera.right - camera.left) / maxWidth;
          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;
          if (!damping) {
            camera.zoom = goal.zoom;
            camera.updateProjectionMatrix();
          }
        }
        if (damping) {
          current.animating = true;
        } else {
          camera.position.copy(goal.camera);
          camera.lookAt(goal.focus);
          if (controls) {
            controls.target.copy(goal.focus);
            controls.update();
          }
        }
        if (onFitRef.current)
          onFitRef.current(this.getSize());
        invalidate();
        return this;
      }
    };
  }, [box, camera, controls, margin, damping, invalidate]);
  React68.useLayoutEffect(() => {
    if (controls) {
      const callback = () => current.animating = false;
      controls.addEventListener("start", callback);
      return () => controls.removeEventListener("start", callback);
    }
  }, [controls]);
  const count = React68.useRef(0);
  React68.useLayoutEffect(() => {
    if (observe || count.current++ === 0) {
      api.refresh();
      if (fit)
        api.fit();
      if (clip)
        api.clip();
    }
  }, [size, clip, fit, observe, camera, controls]);
  useFrame((state, delta) => {
    if (current.animating) {
      damp(current.focus, goal.focus, damping, delta);
      damp(current.camera, goal.camera, damping, delta);
      current.zoom = MathUtils.damp(current.zoom, goal.zoom, damping, delta);
      camera.position.copy(current.camera);
      if (isOrthographic(camera)) {
        camera.zoom = current.zoom;
        camera.updateProjectionMatrix();
      }
      if (!controls) {
        camera.lookAt(current.focus);
      } else {
        controls.target.copy(current.focus);
        controls.update();
      }
      invalidate();
      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps2))
        return;
      if (!isOrthographic(camera) && !equals(current.camera, goal.camera))
        return;
      if (controls && !equals(current.focus, goal.focus))
        return;
      current.animating = false;
    }
  });
  return React68.createElement("group", {
    ref
  }, React68.createElement(context5.Provider, {
    value: api
  }, children));
}
function useBounds() {
  return React68.useContext(context5);
}

// node_modules/@react-three/drei/core/CameraShake.js
var React69 = __toESM(require_react());
var CameraShake = React69.forwardRef(({
  intensity = 1,
  decay,
  decayRate = 0.65,
  maxYaw = 0.1,
  maxPitch = 0.1,
  maxRoll = 0.1,
  yawFrequency = 0.1,
  pitchFrequency = 0.1,
  rollFrequency = 0.1
}, ref) => {
  const camera = useThree((state) => state.camera);
  const defaultControls = useThree((state) => state.controls);
  const intensityRef = React69.useRef(intensity);
  const initialRotation = React69.useRef(camera.rotation.clone());
  const [yawNoise] = React69.useState(() => new SimplexNoise());
  const [pitchNoise] = React69.useState(() => new SimplexNoise());
  const [rollNoise] = React69.useState(() => new SimplexNoise());
  const constrainIntensity = () => {
    if (intensityRef.current < 0 || intensityRef.current > 1) {
      intensityRef.current = intensityRef.current < 0 ? 0 : 1;
    }
  };
  React69.useImperativeHandle(ref, () => ({
    getIntensity: () => intensityRef.current,
    setIntensity: (val) => {
      intensityRef.current = val;
      constrainIntensity();
    }
  }), []);
  React69.useEffect(() => {
    if (defaultControls) {
      const callback = () => void (initialRotation.current = camera.rotation.clone());
      defaultControls.addEventListener("change", callback);
      callback();
      return () => void defaultControls.removeEventListener("change", callback);
    }
  }, [camera, defaultControls]);
  useFrame((state, delta) => {
    const shake = Math.pow(intensityRef.current, 2);
    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);
    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);
    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);
    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);
    if (decay && intensityRef.current > 0) {
      intensityRef.current -= decayRate * delta;
      constrainIntensity();
    }
  });
  return null;
});

// node_modules/@react-three/drei/core/Float.js
var React70 = __toESM(require_react());
var Float = React70.forwardRef(({
  children,
  speed = 1,
  rotationIntensity = 1,
  floatIntensity = 1,
  floatingRange = [-0.1, 0.1],
  ...props
}, forwardRef56) => {
  const ref = React70.useRef(null);
  const offset = React70.useRef(Math.random() * 1e4);
  useFrame((state) => {
    var _floatingRange$, _floatingRange$2;
    const t = offset.current + state.clock.getElapsedTime();
    ref.current.rotation.x = Math.cos(t / 4 * speed) / 8 * rotationIntensity;
    ref.current.rotation.y = Math.sin(t / 4 * speed) / 8 * rotationIntensity;
    ref.current.rotation.z = Math.sin(t / 4 * speed) / 20 * rotationIntensity;
    let yPosition = Math.sin(t / 4 * speed) / 10;
    yPosition = MathUtils.mapLinear(yPosition, -0.1, 0.1, (_floatingRange$ = floatingRange == null ? void 0 : floatingRange[0]) !== null && _floatingRange$ !== void 0 ? _floatingRange$ : -0.1, (_floatingRange$2 = floatingRange == null ? void 0 : floatingRange[1]) !== null && _floatingRange$2 !== void 0 ? _floatingRange$2 : 0.1);
    ref.current.position.y = yPosition * floatIntensity;
  });
  return React70.createElement("group", props, React70.createElement("group", {
    ref: react_merge_refs_esm_default([ref, forwardRef56])
  }, children));
});

// node_modules/@react-three/drei/core/Stage.js
var React74 = __toESM(require_react());

// node_modules/@react-three/drei/core/Environment.js
var React71 = __toESM(require_react());

// node_modules/@react-three/drei/helpers/environment-assets.js
var presetsObj = {
  sunset: "venice/venice_sunset_1k.hdr",
  dawn: "kiara/kiara_1_dawn_1k.hdr",
  night: "dikhololo/dikhololo_night_1k.hdr",
  warehouse: "empty-wharehouse/empty_warehouse_01_1k.hdr",
  forest: "forrest-slope/forest_slope_1k.hdr",
  apartment: "lebombo/lebombo_1k.hdr",
  studio: "studio-small-3/studio_small_03_1k.hdr",
  city: "potsdamer-platz/potsdamer_platz_1k.hdr",
  park: "rooitou/rooitou_park_1k.hdr",
  lobby: "st-fagans/st_fagans_interior_1k.hdr"
};

// node_modules/@react-three/drei/core/Environment.js
var CUBEMAP_ROOT = "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/hdris/";
var isRef = (obj) => obj.current && obj.current.isScene;
var resolveScene = (scene) => isRef(scene) ? scene.current : scene;
function setEnvProps(background, scene, defaultScene, texture, blur = 0) {
  const target2 = resolveScene(scene || defaultScene);
  const oldbg = target2.background;
  const oldenv = target2.environment;
  const oldBlur = target2.backgroundBlurriness || 0;
  if (background !== "only")
    target2.environment = texture;
  if (background)
    target2.background = texture;
  if (background && target2.backgroundBlurriness !== void 0)
    target2.backgroundBlurriness = blur;
  return () => {
    if (background !== "only")
      target2.environment = oldenv;
    if (background)
      target2.background = oldbg;
    if (background && target2.backgroundBlurriness !== void 0)
      target2.backgroundBlurriness = oldBlur;
  };
}
function EnvironmentMap({
  scene,
  background = false,
  blur,
  map
}) {
  const defaultScene = useThree((state) => state.scene);
  React71.useLayoutEffect(() => {
    if (map)
      return setEnvProps(background, scene, defaultScene, map, blur);
  }, [defaultScene, scene, map, background, blur]);
  return null;
}
function useEnvironment({
  files = ["/px.png", "/nx.png", "/py.png", "/ny.png", "/pz.png", "/nz.png"],
  path = "",
  preset = void 0,
  encoding = void 0,
  extensions: extensions2
}) {
  if (preset) {
    if (!(preset in presetsObj))
      throw new Error("Preset must be one of: " + Object.keys(presetsObj).join(", "));
    files = presetsObj[preset];
    path = CUBEMAP_ROOT;
  }
  const isCubeMap = Array.isArray(files);
  const loader = isCubeMap ? CubeTextureLoader : RGBELoader;
  const loaderResult = useLoader(
    // @ts-expect-error
    loader,
    isCubeMap ? [files] : files,
    (loader2) => {
      loader2.setPath(path);
      if (extensions2)
        extensions2(loader2);
    }
  );
  const texture = isCubeMap ? (
    // @ts-ignore
    loaderResult[0]
  ) : loaderResult;
  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;
  texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;
  return texture;
}
function EnvironmentCube({
  background = false,
  scene,
  blur,
  ...rest
}) {
  const texture = useEnvironment(rest);
  const defaultScene = useThree((state) => state.scene);
  React71.useLayoutEffect(() => {
    return setEnvProps(background, scene, defaultScene, texture, blur);
  }, [texture, background, scene, defaultScene, blur]);
  return null;
}
function EnvironmentPortal({
  children,
  near = 1,
  far = 1e3,
  resolution = 256,
  frames = 1,
  map,
  background = false,
  blur,
  scene,
  files,
  path,
  preset = void 0,
  extensions: extensions2
}) {
  const gl = useThree((state) => state.gl);
  const defaultScene = useThree((state) => state.scene);
  const camera = React71.useRef(null);
  const [virtualScene] = React71.useState(() => new Scene());
  const fbo = React71.useMemo(() => {
    const fbo2 = new WebGLCubeRenderTarget(resolution);
    fbo2.texture.type = HalfFloatType;
    return fbo2;
  }, [resolution]);
  React71.useLayoutEffect(() => {
    if (frames === 1)
      camera.current.update(gl, virtualScene);
    return setEnvProps(background, scene, defaultScene, fbo.texture, blur);
  }, [children, virtualScene, fbo.texture, scene, defaultScene, background, frames, gl]);
  let count = 1;
  useFrame(() => {
    if (frames === Infinity || count < frames) {
      camera.current.update(gl, virtualScene);
      count++;
    }
  });
  return React71.createElement(React71.Fragment, null, createPortal(React71.createElement(React71.Fragment, null, children, React71.createElement("cubeCamera", {
    ref: camera,
    args: [near, far, fbo]
  }), files || preset ? React71.createElement(EnvironmentCube, {
    background: true,
    files,
    preset,
    path,
    extensions: extensions2
  }) : map ? React71.createElement(EnvironmentMap, {
    background: true,
    map,
    extensions: extensions2
  }) : null), virtualScene));
}
function EnvironmentGround(props) {
  var _props$ground, _props$ground2, _scale, _props$ground3;
  const textureDefault = useEnvironment(props);
  const texture = props.map || textureDefault;
  React71.useMemo(() => extend({
    GroundProjectedEnvImpl: GroundProjectedEnv
  }), []);
  const args = React71.useMemo(() => [texture], [texture]);
  const height = (_props$ground = props.ground) == null ? void 0 : _props$ground.height;
  const radius = (_props$ground2 = props.ground) == null ? void 0 : _props$ground2.radius;
  const scale2 = (_scale = (_props$ground3 = props.ground) == null ? void 0 : _props$ground3.scale) !== null && _scale !== void 0 ? _scale : 1e3;
  return React71.createElement(React71.Fragment, null, React71.createElement(EnvironmentMap, _extends({}, props, {
    map: texture
  })), React71.createElement("groundProjectedEnvImpl", {
    args,
    scale: scale2,
    height,
    radius
  }));
}
function Environment(props) {
  return props.ground ? React71.createElement(EnvironmentGround, props) : props.map ? React71.createElement(EnvironmentMap, props) : props.children ? React71.createElement(EnvironmentPortal, props) : React71.createElement(EnvironmentCube, props);
}

// node_modules/@react-three/drei/core/ContactShadows.js
var React72 = __toESM(require_react());
var ContactShadows = React72.forwardRef(({
  scale: scale2 = 10,
  frames = Infinity,
  opacity = 1,
  width = 1,
  height = 1,
  blur = 1,
  far = 10,
  resolution = 512,
  smooth = true,
  color = "#000000",
  depthWrite = false,
  renderOrder,
  ...props
}, ref) => {
  const scene = useThree((state) => state.scene);
  const gl = useThree((state) => state.gl);
  const shadowCamera = React72.useRef(null);
  width = width * (Array.isArray(scale2) ? scale2[0] : scale2 || 1);
  height = height * (Array.isArray(scale2) ? scale2[1] : scale2 || 1);
  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React72.useMemo(() => {
    const renderTarget2 = new WebGLRenderTarget(resolution, resolution);
    const renderTargetBlur2 = new WebGLRenderTarget(resolution, resolution);
    renderTargetBlur2.texture.generateMipmaps = renderTarget2.texture.generateMipmaps = false;
    const planeGeometry2 = new PlaneGeometry(width, height).rotateX(Math.PI / 2);
    const blurPlane2 = new Mesh(planeGeometry2);
    const depthMaterial2 = new MeshDepthMaterial();
    depthMaterial2.depthTest = depthMaterial2.depthWrite = false;
    depthMaterial2.onBeforeCompile = (shader) => {
      shader.uniforms = {
        ...shader.uniforms,
        ucolor: {
          value: new Color(color)
        }
      };
      shader.fragmentShader = shader.fragmentShader.replace(
        `void main() {`,
        //
        `uniform vec3 ucolor;
           void main() {
          `
      );
      shader.fragmentShader = shader.fragmentShader.replace(
        "vec4( vec3( 1.0 - fragCoordZ ), opacity );",
        // Colorize the shadow, multiply by the falloff so that the center can remain darker
        "vec4( ucolor * fragCoordZ * 2.0, ( 1.0 - fragCoordZ ) * 1.0 );"
      );
    };
    const horizontalBlurMaterial2 = new ShaderMaterial(HorizontalBlurShader);
    const verticalBlurMaterial2 = new ShaderMaterial(VerticalBlurShader);
    verticalBlurMaterial2.depthTest = horizontalBlurMaterial2.depthTest = false;
    return [renderTarget2, planeGeometry2, depthMaterial2, blurPlane2, horizontalBlurMaterial2, verticalBlurMaterial2, renderTargetBlur2];
  }, [resolution, width, height, scale2, color]);
  const blurShadows = (blur2) => {
    blurPlane.visible = true;
    blurPlane.material = horizontalBlurMaterial;
    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;
    horizontalBlurMaterial.uniforms.h.value = blur2 * 1 / 256;
    gl.setRenderTarget(renderTargetBlur);
    gl.render(blurPlane, shadowCamera.current);
    blurPlane.material = verticalBlurMaterial;
    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;
    verticalBlurMaterial.uniforms.v.value = blur2 * 1 / 256;
    gl.setRenderTarget(renderTarget);
    gl.render(blurPlane, shadowCamera.current);
    blurPlane.visible = false;
  };
  let count = 0;
  useFrame(() => {
    if (shadowCamera.current && (frames === Infinity || count < frames)) {
      const initialBackground = scene.background;
      scene.background = null;
      const initialOverrideMaterial = scene.overrideMaterial;
      scene.overrideMaterial = depthMaterial;
      gl.setRenderTarget(renderTarget);
      gl.render(scene, shadowCamera.current);
      scene.overrideMaterial = initialOverrideMaterial;
      blurShadows(blur);
      if (smooth)
        blurShadows(blur * 0.4);
      gl.setRenderTarget(null);
      scene.background = initialBackground;
      count++;
    }
  });
  return React72.createElement("group", _extends({
    "rotation-x": Math.PI / 2
  }, props, {
    ref
  }), React72.createElement("mesh", {
    renderOrder,
    geometry: planeGeometry,
    scale: [1, -1, 1],
    rotation: [-Math.PI / 2, 0, 0]
  }, React72.createElement("meshBasicMaterial", {
    map: renderTarget.texture,
    "map-encoding": gl.outputEncoding,
    transparent: true,
    opacity,
    depthWrite
  })), React72.createElement("orthographicCamera", {
    ref: shadowCamera,
    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]
  }));
});

// node_modules/@react-three/drei/core/AccumulativeShadows.js
var React73 = __toESM(require_react());
function isLight(object) {
  return object.isLight;
}
function isGeometry(object) {
  return !!object.geometry;
}
var accumulativeContext = React73.createContext(null);
var SoftShadowMaterial = shaderMaterial({
  color: new Color(),
  blend: 2,
  alphaTest: 0.75,
  opacity: 0,
  map: null
}, `varying vec2 vUv;
   void main() {
     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
     vUv = uv;
   }`, `varying vec2 vUv;
   uniform sampler2D map;
   uniform vec3 color;
   uniform float opacity;
   uniform float alphaTest;
   uniform float blend;
   void main() {
     vec4 sampledDiffuseColor = texture2D(map, vUv);
     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);
     #include <tonemapping_fragment>
     #include <encodings_fragment>
   }`);
var DiscardMaterial = shaderMaterial({}, "void main() { gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }", "void main() { discard; }");
var AccumulativeShadows = React73.forwardRef(({
  children,
  temporal,
  frames = 40,
  limit = Infinity,
  blend = 20,
  scale: scale2 = 10,
  opacity = 1,
  alphaTest = 0.75,
  color = "black",
  colorBlend = 2,
  resolution = 1024,
  toneMapped = true,
  ...props
}, forwardRef56) => {
  extend({
    SoftShadowMaterial
  });
  const gl = useThree((state) => state.gl);
  const scene = useThree((state) => state.scene);
  const camera = useThree((state) => state.camera);
  const gPlane = React73.useRef(null);
  const gLights = React73.useRef(null);
  const [plm] = React73.useState(() => new ProgressiveLightMap(gl, scene, resolution));
  React73.useLayoutEffect(() => {
    plm.configure(gPlane.current);
  }, []);
  const api = React73.useMemo(() => ({
    lights: /* @__PURE__ */ new Map(),
    temporal: !!temporal,
    frames: Math.max(2, frames),
    blend: Math.max(2, frames === Infinity ? blend : frames),
    count: 0,
    getMesh: () => gPlane.current,
    reset: () => {
      plm.clear();
      const material = gPlane.current.material;
      material.opacity = 0;
      material.alphaTest = 0;
      api.count = 0;
    },
    update: (frames2 = 1) => {
      const material = gPlane.current.material;
      if (!api.temporal) {
        material.opacity = opacity;
        material.alphaTest = alphaTest;
      } else {
        material.opacity = Math.min(opacity, material.opacity + opacity / api.blend);
        material.alphaTest = Math.min(alphaTest, material.alphaTest + alphaTest / api.blend);
      }
      gLights.current.visible = true;
      plm.prepare();
      for (let i2 = 0; i2 < frames2; i2++) {
        api.lights.forEach((light) => light.update());
        plm.update(camera, api.blend);
      }
      gLights.current.visible = false;
      plm.finish();
    }
  }), [plm, camera, scene, temporal, frames, blend, opacity, alphaTest]);
  React73.useLayoutEffect(() => {
    api.reset();
    if (!api.temporal && api.frames !== Infinity)
      api.update(api.blend);
  });
  React73.useImperativeHandle(forwardRef56, () => api, [api]);
  useFrame(() => {
    if ((api.temporal || api.frames === Infinity) && api.count < api.frames && api.count < limit) {
      api.update();
      api.count++;
    }
  });
  return React73.createElement("group", props, React73.createElement("group", {
    traverse: () => null,
    ref: gLights
  }, React73.createElement(accumulativeContext.Provider, {
    value: api
  }, children)), React73.createElement("mesh", {
    receiveShadow: true,
    ref: gPlane,
    scale: scale2,
    rotation: [-Math.PI / 2, 0, 0]
  }, React73.createElement("planeGeometry", null), React73.createElement("softShadowMaterial", {
    transparent: true,
    depthWrite: false,
    toneMapped,
    color,
    blend: colorBlend,
    map: plm.progressiveLightMap2.texture
  })));
});
var RandomizedLight = React73.forwardRef(({
  castShadow = true,
  bias = 1e-3,
  mapSize = 512,
  size = 5,
  near = 0.5,
  far = 500,
  frames = 1,
  position: position2 = [0, 0, 0],
  radius = 1,
  amount = 8,
  intensity = 1,
  ambient = 0.5,
  ...props
}, forwardRef56) => {
  const gLights = React73.useRef(null);
  const length = new Vector3(...position2).length();
  const parent = React73.useContext(accumulativeContext);
  const update = React73.useCallback(() => {
    let light;
    if (gLights.current) {
      for (let l = 0; l < gLights.current.children.length; l++) {
        light = gLights.current.children[l];
        if (Math.random() > ambient) {
          light.position.set(position2[0] + MathUtils.randFloatSpread(radius), position2[1] + MathUtils.randFloatSpread(radius), position2[2] + MathUtils.randFloatSpread(radius));
        } else {
          let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2;
          let phi = 2 * Math.PI * Math.random();
          light.position.set(Math.cos(lambda) * Math.cos(phi) * length, Math.abs(Math.cos(lambda) * Math.sin(phi) * length), Math.sin(lambda) * length);
        }
      }
    }
  }, [radius, ambient, length, ...position2]);
  const api = React73.useMemo(() => ({
    update
  }), [update]);
  React73.useImperativeHandle(forwardRef56, () => api, [api]);
  React73.useLayoutEffect(() => {
    const group = gLights.current;
    if (parent)
      parent.lights.set(group.uuid, api);
    return () => void parent.lights.delete(group.uuid);
  }, [parent, api]);
  return React73.createElement("group", _extends({
    ref: gLights
  }, props), Array.from({
    length: amount
  }, (_, index) => React73.createElement("directionalLight", {
    key: index,
    castShadow,
    "shadow-bias": bias,
    "shadow-mapSize": [mapSize, mapSize],
    intensity: intensity / amount
  }, React73.createElement("orthographicCamera", {
    attach: "shadow-camera",
    args: [-size, size, size, -size, near, far]
  }))));
});
var ProgressiveLightMap = class {
  constructor(renderer, scene, res = 1024) {
    this.renderer = renderer;
    this.res = res;
    this.scene = scene;
    this.buffer1Active = false;
    this.lights = [];
    this.meshes = [];
    this.object = null;
    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? HalfFloatType : FloatType;
    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {
      type: format,
      encoding: renderer.outputEncoding
    });
    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {
      type: format,
      encoding: renderer.outputEncoding
    });
    this.discardMat = new DiscardMaterial();
    this.targetMat = new MeshPhongMaterial({
      shininess: 0
    });
    this.previousShadowMap = {
      value: this.progressiveLightMap1.texture
    };
    this.averagingWindow = {
      value: 100
    };
    this.targetMat.onBeforeCompile = (shader) => {
      shader.vertexShader = "varying vec2 vUv;\n" + shader.vertexShader.slice(0, -1) + "vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }";
      const bodyStart = shader.fragmentShader.indexOf("void main() {");
      shader.fragmentShader = shader.fragmentShader.replace("#include <clipping_planes_pars_fragment>", "#include <clipping_planes_pars_fragment>\n#include <shadowmask_pars_fragment>\n");
      shader.fragmentShader = "varying vec2 vUv;\n" + shader.fragmentShader.slice(0, bodyStart) + "	uniform sampler2D previousShadowMap;\n	uniform float averagingWindow;\n" + shader.fragmentShader.slice(bodyStart - 1, -1) + `
vec3 texelOld = texture2D(previousShadowMap, vUv).rgb;
        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);
      }`;
      shader.uniforms.previousShadowMap = this.previousShadowMap;
      shader.uniforms.averagingWindow = this.averagingWindow;
    };
  }
  clear() {
    this.renderer.setRenderTarget(this.progressiveLightMap1);
    this.renderer.clear();
    this.renderer.setRenderTarget(this.progressiveLightMap2);
    this.renderer.clear();
    this.lights = [];
    this.meshes = [];
    this.scene.traverse((object) => {
      if (isGeometry(object)) {
        this.meshes.push({
          object,
          material: object.material
        });
      } else if (isLight(object)) {
        this.lights.push({
          object,
          intensity: object.intensity
        });
      }
    });
  }
  prepare() {
    this.lights.forEach((light) => light.object.intensity = 0);
    this.meshes.forEach((mesh) => mesh.object.material = this.discardMat);
  }
  finish() {
    this.lights.forEach((light) => light.object.intensity = light.intensity);
    this.meshes.forEach((mesh) => mesh.object.material = mesh.material);
  }
  configure(object) {
    this.object = object;
  }
  update(camera, blendWindow = 100) {
    if (!this.object)
      return;
    this.averagingWindow.value = blendWindow;
    this.object.material = this.targetMat;
    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;
    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1;
    const oldBg = this.scene.background;
    this.scene.background = null;
    this.renderer.setRenderTarget(activeMap);
    this.previousShadowMap.value = inactiveMap.texture;
    this.buffer1Active = !this.buffer1Active;
    this.renderer.render(this.scene, camera);
    this.renderer.setRenderTarget(null);
    this.scene.background = oldBg;
  }
};

// node_modules/@react-three/drei/core/Stage.js
var presets = {
  rembrandt: {
    main: [1, 2, 1],
    fill: [-2, -0.5, -2]
  },
  portrait: {
    main: [-1, 2, 0.5],
    fill: [-1, 0.5, -1.5]
  },
  upfront: {
    main: [0, 2, 1],
    fill: [-1, 0.5, -1.5]
  },
  soft: {
    main: [-2, 4, 4],
    fill: [-1, 0.5, -1.5]
  }
};
function Refit({
  radius,
  adjustCamera
}) {
  const api = useBounds();
  React74.useEffect(() => {
    if (adjustCamera)
      api.refresh().clip().fit();
  }, [radius, adjustCamera]);
  return null;
}
function Stage({
  children,
  center,
  adjustCamera = true,
  intensity = 0.5,
  shadows = "contact",
  environment = "city",
  preset = "rembrandt",
  ...props
}) {
  var _bias, _normalBias, _size, _offset, _amount, _radius, _ambient, _intensity;
  const config = typeof preset === "string" ? presets[preset] : preset;
  const [{
    radius,
    height
  }, set] = React74.useState({
    radius: 0,
    width: 0,
    height: 0,
    depth: 0
  });
  const shadowBias = (_bias = shadows == null ? void 0 : shadows.bias) !== null && _bias !== void 0 ? _bias : -1e-4;
  const normalBias = (_normalBias = shadows == null ? void 0 : shadows.normalBias) !== null && _normalBias !== void 0 ? _normalBias : 0;
  const shadowSize = (_size = shadows == null ? void 0 : shadows.size) !== null && _size !== void 0 ? _size : 1024;
  const shadowOffset = (_offset = shadows == null ? void 0 : shadows.offset) !== null && _offset !== void 0 ? _offset : 0;
  const contactShadow = shadows === "contact" || (shadows == null ? void 0 : shadows.type) === "contact";
  const accumulativeShadow = shadows === "accumulative" || (shadows == null ? void 0 : shadows.type) === "accumulative";
  const shadowSpread = {
    ...typeof shadows === "object" ? shadows : {}
  };
  const environmentProps = !environment ? null : typeof environment === "string" ? {
    preset: environment
  } : environment;
  return React74.createElement(React74.Fragment, null, React74.createElement("ambientLight", {
    intensity: intensity / 3
  }), React74.createElement("spotLight", {
    penumbra: 1,
    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],
    intensity: intensity * 2,
    castShadow: !!shadows,
    "shadow-bias": shadowBias,
    "shadow-normalBias": normalBias,
    "shadow-mapSize": shadowSize
  }), React74.createElement("pointLight", {
    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],
    intensity
  }), React74.createElement(Bounds, _extends({
    fit: !!adjustCamera,
    clip: !!adjustCamera,
    margin: Number(adjustCamera),
    observe: true
  }, props), React74.createElement(Refit, {
    radius,
    adjustCamera
  }), React74.createElement(Center, _extends({}, center, {
    position: [0, shadowOffset / 2, 0],
    onCentered: (props2) => {
      const {
        width,
        height: height2,
        depth,
        boundingSphere
      } = props2;
      set({
        radius: boundingSphere.radius,
        width,
        height: height2,
        depth
      });
      if (center != null && center.onCentered)
        center.onCentered(props2);
    }
  }), children)), React74.createElement("group", {
    position: [0, -height / 2 - shadowOffset / 2, 0]
  }, contactShadow && React74.createElement(ContactShadows, _extends({
    scale: radius * 4,
    far: radius,
    blur: 2
  }, shadowSpread)), accumulativeShadow && React74.createElement(AccumulativeShadows, _extends({
    temporal: true,
    frames: 100,
    alphaTest: 0.9,
    toneMapped: true,
    scale: radius * 4
  }, shadowSpread), React74.createElement(RandomizedLight, {
    amount: (_amount = shadowSpread.amount) !== null && _amount !== void 0 ? _amount : 8,
    radius: (_radius = shadowSpread.radius) !== null && _radius !== void 0 ? _radius : radius,
    ambient: (_ambient = shadowSpread.ambient) !== null && _ambient !== void 0 ? _ambient : 0.5,
    intensity: (_intensity = shadowSpread.intensity) !== null && _intensity !== void 0 ? _intensity : 1,
    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],
    size: radius * 4,
    bias: -shadowBias,
    mapSize: shadowSize
  }))), environment && React74.createElement(Environment, environmentProps));
}

// node_modules/@react-three/drei/core/Backdrop.js
var React75 = __toESM(require_react());
var easeInExpo = (x) => x === 0 ? 0 : Math.pow(2, 10 * x - 10);
function Backdrop({
  children,
  floor = 0.25,
  segments = 20,
  receiveShadow,
  ...props
}) {
  const ref = React75.useRef(null);
  React75.useLayoutEffect(() => {
    let i2 = 0;
    const offset = segments / segments / 2;
    const position2 = ref.current.attributes.position;
    for (let x = 0; x < segments + 1; x++) {
      for (let y = 0; y < segments + 1; y++) {
        position2.setXYZ(i2++, x / segments - offset + (x === 0 ? -floor : 0), y / segments - offset, easeInExpo(x / segments));
      }
    }
    position2.needsUpdate = true;
    ref.current.computeVertexNormals();
  }, [segments, floor]);
  return React75.createElement("group", props, React75.createElement("mesh", {
    receiveShadow,
    rotation: [-Math.PI / 2, 0, Math.PI / 2]
  }, React75.createElement("planeGeometry", {
    ref,
    args: [1, 1, segments, segments]
  }), children));
}

// node_modules/@react-three/drei/core/Shadow.js
var React76 = __toESM(require_react());
var Shadow = React76.forwardRef(({
  fog = false,
  renderOrder,
  depthWrite = false,
  colorStop = 0,
  color = "black",
  opacity = 0.5,
  ...props
}, ref) => {
  const canvas = React76.useMemo(() => {
    const canvas2 = document.createElement("canvas");
    canvas2.width = 128;
    canvas2.height = 128;
    const context10 = canvas2.getContext("2d");
    const gradient = context10.createRadialGradient(canvas2.width / 2, canvas2.height / 2, 0, canvas2.width / 2, canvas2.height / 2, canvas2.width / 2);
    gradient.addColorStop(colorStop, new Color(color).getStyle());
    gradient.addColorStop(1, "rgba(0,0,0,0)");
    context10.fillStyle = gradient;
    context10.fillRect(0, 0, canvas2.width, canvas2.height);
    return canvas2;
  }, [color, colorStop]);
  return React76.createElement("mesh", _extends({
    renderOrder,
    ref,
    "rotation-x": -Math.PI / 2
  }, props), React76.createElement("planeGeometry", null), React76.createElement("meshBasicMaterial", {
    transparent: true,
    opacity,
    fog,
    depthWrite,
    side: DoubleSide
  }, React76.createElement("canvasTexture", {
    attach: "map",
    args: [canvas]
  })));
});

// node_modules/@react-three/drei/core/Reflector.js
var React77 = __toESM(require_react());
extend({
  MeshReflectorMaterial
});
var Reflector = React77.forwardRef(({
  mixBlur = 0,
  mixStrength = 0.5,
  resolution = 256,
  blur = [0, 0],
  args = [1, 1],
  minDepthThreshold = 0.9,
  maxDepthThreshold = 1,
  depthScale = 0,
  depthToBlurRatioBias = 0.25,
  mirror = 0,
  children,
  debug = 0,
  distortion = 1,
  mixContrast = 1,
  distortionMap,
  ...props
}, ref) => {
  React77.useEffect(() => {
    console.warn("Reflector has been deprecated and will be removed next major. Replace it with <MeshReflectorMaterial />!");
  }, []);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  blur = Array.isArray(blur) ? blur : [blur, blur];
  const hasBlur = blur[0] + blur[1] > 0;
  const meshRef = React77.useRef(null);
  const [reflectorPlane] = React77.useState(() => new Plane());
  const [normal] = React77.useState(() => new Vector3());
  const [reflectorWorldPosition] = React77.useState(() => new Vector3());
  const [cameraWorldPosition] = React77.useState(() => new Vector3());
  const [rotationMatrix] = React77.useState(() => new Matrix4());
  const [lookAtPosition] = React77.useState(() => new Vector3(0, 0, -1));
  const [clipPlane] = React77.useState(() => new Vector4());
  const [view] = React77.useState(() => new Vector3());
  const [target2] = React77.useState(() => new Vector3());
  const [q] = React77.useState(() => new Vector4());
  const [textureMatrix] = React77.useState(() => new Matrix4());
  const [virtualCamera] = React77.useState(() => new PerspectiveCamera());
  const beforeRender = React77.useCallback(() => {
    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);
    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
    rotationMatrix.extractRotation(meshRef.current.matrixWorld);
    normal.set(0, 0, 1);
    normal.applyMatrix4(rotationMatrix);
    view.subVectors(reflectorWorldPosition, cameraWorldPosition);
    if (view.dot(normal) > 0)
      return;
    view.reflect(normal).negate();
    view.add(reflectorWorldPosition);
    rotationMatrix.extractRotation(camera.matrixWorld);
    lookAtPosition.set(0, 0, -1);
    lookAtPosition.applyMatrix4(rotationMatrix);
    lookAtPosition.add(cameraWorldPosition);
    target2.subVectors(reflectorWorldPosition, lookAtPosition);
    target2.reflect(normal).negate();
    target2.add(reflectorWorldPosition);
    virtualCamera.position.copy(view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(rotationMatrix);
    virtualCamera.up.reflect(normal);
    virtualCamera.lookAt(target2);
    virtualCamera.far = camera.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
    textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    textureMatrix.multiply(virtualCamera.projectionMatrix);
    textureMatrix.multiply(virtualCamera.matrixWorldInverse);
    textureMatrix.multiply(meshRef.current.matrixWorld);
    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);
    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    q.z = -1;
    q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(2 / clipPlane.dot(q));
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z + 1;
    projectionMatrix.elements[14] = clipPlane.w;
  }, []);
  const [fbo1, fbo2, blurpass, reflectorProps] = React77.useMemo(() => {
    const parameters = {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      encoding: gl.outputEncoding
    };
    const fbo12 = new WebGLRenderTarget(resolution, resolution, parameters);
    fbo12.depthBuffer = true;
    fbo12.depthTexture = new DepthTexture(resolution, resolution);
    fbo12.depthTexture.format = DepthFormat;
    fbo12.depthTexture.type = UnsignedShortType;
    const fbo22 = new WebGLRenderTarget(resolution, resolution, parameters);
    const blurpass2 = new BlurPass({
      gl,
      resolution,
      width: blur[0],
      height: blur[1],
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias
    });
    const reflectorProps2 = {
      mirror,
      textureMatrix,
      mixBlur,
      tDiffuse: fbo12.texture,
      tDepth: fbo12.depthTexture,
      tDiffuseBlur: fbo22.texture,
      hasBlur,
      mixStrength,
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias,
      transparent: true,
      debug,
      distortion,
      distortionMap,
      mixContrast,
      "defines-USE_BLUR": hasBlur ? "" : void 0,
      "defines-USE_DEPTH": depthScale > 0 ? "" : void 0,
      "defines-USE_DISTORTION": distortionMap ? "" : void 0
    };
    return [fbo12, fbo22, blurpass2, reflectorProps2];
  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, mixContrast]);
  useFrame(() => {
    if (!(meshRef != null && meshRef.current))
      return;
    meshRef.current.visible = false;
    const currentXrEnabled = gl.xr.enabled;
    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;
    beforeRender();
    gl.xr.enabled = false;
    gl.shadowMap.autoUpdate = false;
    gl.setRenderTarget(fbo1);
    gl.state.buffers.depth.setMask(true);
    if (!gl.autoClear)
      gl.clear();
    gl.render(scene, virtualCamera);
    if (hasBlur)
      blurpass.render(gl, fbo1, fbo2);
    gl.xr.enabled = currentXrEnabled;
    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;
    meshRef.current.visible = true;
    gl.setRenderTarget(null);
  });
  return React77.createElement("mesh", _extends({
    ref: react_merge_refs_esm_default([meshRef, ref])
  }, props), React77.createElement("planeGeometry", {
    args
  }), children ? children("meshReflectorMaterial", reflectorProps) : React77.createElement("meshReflectorMaterial", reflectorProps));
});

// node_modules/@react-three/drei/core/SpotLight.js
var React78 = __toESM(require_react());

// node_modules/@react-three/drei/materials/SpotLightMaterial.js
var SpotLightMaterial = class extends ShaderMaterial {
  constructor() {
    super({
      uniforms: {
        depth: {
          value: null
        },
        opacity: {
          value: 1
        },
        attenuation: {
          value: 2.5
        },
        anglePower: {
          value: 12
        },
        spotPosition: {
          value: new Vector3(0, 0, 0)
        },
        lightColor: {
          value: new Color("white")
        },
        cameraNear: {
          value: 0
        },
        cameraFar: {
          value: 1
        },
        resolution: {
          value: new Vector2(0, 0)
        }
      },
      transparent: true,
      depthWrite: false,
      vertexShader: (
        /* glsl */
        `
      varying vec3 vNormal;
      varying vec3 vWorldPosition;
      varying float vViewZ;
      varying float vIntensity;
      uniform vec3 spotPosition;
      uniform float attenuation;      

      void main() {
        // compute intensity
        vNormal = normalize( normalMatrix * normal );
        vec4 worldPosition	= modelMatrix * vec4( position, 1.0 );
        vWorldPosition = worldPosition.xyz;
        vec4 viewPosition = viewMatrix * worldPosition;
        vViewZ = viewPosition.z;
        float intensity	= distance(worldPosition.xyz, spotPosition) / attenuation;
        intensity	= 1.0 - clamp(intensity, 0.0, 1.0);
        vIntensity = intensity;        
        // set gl_Position
        gl_Position	= projectionMatrix * viewPosition;

      }`
      ),
      fragmentShader: (
        /* glsl */
        `
      #include <packing>

      varying vec3 vNormal;
      varying vec3 vWorldPosition;
      uniform vec3 lightColor;
      uniform vec3 spotPosition;
      uniform float attenuation;
      uniform float anglePower;
      uniform sampler2D depth;
      uniform vec2 resolution;
      uniform float cameraNear;
      uniform float cameraFar;
      varying float vViewZ;
      varying float vIntensity;
      uniform float opacity;

      float readDepth( sampler2D depthSampler, vec2 coord ) {
        float fragCoordZ = texture2D( depthSampler, coord ).x;
        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);
        return viewZ;
      }

      void main() {
        float d = 1.0;
        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;
        if (isSoft) {
          vec2 sUv = gl_FragCoord.xy / resolution;
          d = readDepth(depth, sUv);
        }
        float intensity = vIntensity;
        vec3 normal	= vec3(vNormal.x, vNormal.y, abs(vNormal.z));
        float angleIntensity	= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );
        intensity	*= angleIntensity;
        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry
        if (isSoft) {
          intensity	*= smoothstep(0., 1., vViewZ - d);
        }
        gl_FragColor = vec4(lightColor, intensity * opacity);

        #include <tonemapping_fragment>
	      #include <encodings_fragment>
      }`
      )
    });
  }
};

// node_modules/@react-three/drei/helpers/glsl/DefaultSpotlightShadowShadows.glsl.js
var SpotlightShadowShader = "#define GLSLIFY 1\nvarying vec2 vUv;uniform sampler2D uShadowMap;uniform float uTime;void main(){vec3 color=texture2D(uShadowMap,vUv).xyz;gl_FragColor=vec4(color,1.);}";

// node_modules/@react-three/drei/core/SpotLight.js
var isSpotLight = (child) => {
  return child == null ? void 0 : child.isSpotLight;
};
function VolumetricMesh({
  opacity = 1,
  radiusTop,
  radiusBottom,
  depthBuffer,
  color = "white",
  distance = 5,
  angle = 0.15,
  attenuation = 5,
  anglePower = 5
}) {
  const mesh = React78.useRef(null);
  const size = useThree((state) => state.size);
  const camera = useThree((state) => state.camera);
  const dpr = useThree((state) => state.viewport.dpr);
  const [material] = React78.useState(() => new SpotLightMaterial());
  const [vec] = React78.useState(() => new Vector3());
  radiusTop = radiusTop === void 0 ? 0.1 : radiusTop;
  radiusBottom = radiusBottom === void 0 ? angle * 7 : radiusBottom;
  useFrame(() => {
    material.uniforms.spotPosition.value.copy(mesh.current.getWorldPosition(vec));
    mesh.current.lookAt(mesh.current.parent.target.getWorldPosition(vec));
  });
  const geom = React78.useMemo(() => {
    const geometry = new CylinderGeometry(radiusTop, radiusBottom, distance, 128, 64, true);
    geometry.applyMatrix4(new Matrix4().makeTranslation(0, -distance / 2, 0));
    geometry.applyMatrix4(new Matrix4().makeRotationX(-Math.PI / 2));
    return geometry;
  }, [distance, radiusTop, radiusBottom]);
  return React78.createElement(React78.Fragment, null, React78.createElement("mesh", {
    ref: mesh,
    geometry: geom,
    raycast: () => null
  }, React78.createElement("primitive", {
    object: material,
    attach: "material",
    "uniforms-opacity-value": opacity,
    "uniforms-lightColor-value": color,
    "uniforms-attenuation-value": attenuation,
    "uniforms-anglePower-value": anglePower,
    "uniforms-depth-value": depthBuffer,
    "uniforms-cameraNear-value": camera.near,
    "uniforms-cameraFar-value": camera.far,
    "uniforms-resolution-value": depthBuffer ? [size.width * dpr, size.height * dpr] : [0, 0]
  })));
}
function useCommon(spotlight, mesh, width, height, distance) {
  const [[pos, dir]] = React78.useState(() => [new Vector3(), new Vector3()]);
  React78.useLayoutEffect(() => {
    if (isSpotLight(spotlight.current)) {
      console.log(spotlight.current);
      spotlight.current.shadow.mapSize.set(width, height);
      spotlight.current.shadow.needsUpdate = true;
    } else {
      throw new Error("SpotlightShadow must be a child of a SpotLight");
    }
  }, [spotlight, width, height]);
  useFrame(() => {
    if (!spotlight.current)
      return;
    const A = spotlight.current.position;
    const B = spotlight.current.target.position;
    dir.copy(B).sub(A);
    var len = dir.length();
    dir.normalize().multiplyScalar(len * distance);
    pos.copy(A).add(dir);
    mesh.current.position.copy(pos);
    mesh.current.lookAt(spotlight.current.target.position);
  });
}
function SpotlightShadowWithShader({
  distance = 0.4,
  alphaTest = 0.5,
  map,
  shader = SpotlightShadowShader,
  width = 512,
  height = 512,
  scale: scale2 = 1,
  children,
  ...rest
}) {
  const mesh = React78.useRef(null);
  const spotlight = rest.spotlightRef;
  const debug = rest.debug;
  useCommon(spotlight, mesh, width, height, distance);
  const renderTarget = React78.useMemo(() => new WebGLRenderTarget(width, height, {
    format: RGBAFormat,
    encoding: LinearEncoding,
    stencilBuffer: false
    // depthTexture: null!
  }), [width, height]);
  const uniforms = React78.useRef({
    uShadowMap: {
      value: map
    },
    uTime: {
      value: 0
    }
  });
  React78.useEffect(() => void (uniforms.current.uShadowMap.value = map), [map]);
  const fsQuad = React78.useMemo(() => new FullScreenQuad(new ShaderMaterial({
    uniforms: uniforms.current,
    vertexShader: (
      /* glsl */
      `
          varying vec2 vUv;

          void main() {
            vUv = uv;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          }
          `
    ),
    fragmentShader: shader
  })), [shader]);
  React78.useEffect(() => () => {
    fsQuad.material.dispose();
    fsQuad.dispose();
  }, [fsQuad]);
  React78.useEffect(() => () => renderTarget.dispose(), [renderTarget]);
  useFrame(({
    gl
  }, dt) => {
    uniforms.current.uTime.value += dt;
    gl.setRenderTarget(renderTarget);
    fsQuad.render(gl);
    gl.setRenderTarget(null);
  });
  return React78.createElement(React78.Fragment, null, React78.createElement("mesh", {
    ref: mesh,
    scale: scale2,
    castShadow: true
  }, React78.createElement("planeGeometry", null), React78.createElement("meshBasicMaterial", {
    transparent: true,
    side: DoubleSide,
    alphaTest,
    alphaMap: renderTarget.texture,
    "alphaMap-wrapS": RepeatWrapping,
    "alphaMap-wrapT": RepeatWrapping,
    opacity: debug ? 1 : 0
  }, children)));
}
function SpotlightShadowWithoutShader({
  distance = 0.4,
  alphaTest = 0.5,
  map,
  width = 512,
  height = 512,
  scale: scale2,
  children,
  ...rest
}) {
  const mesh = React78.useRef(null);
  const spotlight = rest.spotlightRef;
  const debug = rest.debug;
  useCommon(spotlight, mesh, width, height, distance);
  return React78.createElement(React78.Fragment, null, React78.createElement("mesh", {
    ref: mesh,
    scale: scale2,
    castShadow: true
  }, React78.createElement("planeGeometry", null), React78.createElement("meshBasicMaterial", {
    transparent: true,
    side: DoubleSide,
    alphaTest,
    alphaMap: map,
    "alphaMap-wrapS": RepeatWrapping,
    "alphaMap-wrapT": RepeatWrapping,
    opacity: debug ? 1 : 0
  }, children)));
}
function SpotLightShadow(props) {
  if (props.shader)
    return React78.createElement(SpotlightShadowWithShader, props);
  return React78.createElement(SpotlightShadowWithoutShader, props);
}
var SpotLight = React78.forwardRef(({
  // Volumetric
  opacity = 1,
  radiusTop,
  radiusBottom,
  depthBuffer,
  color = "white",
  distance = 5,
  angle = 0.15,
  attenuation = 5,
  anglePower = 5,
  volumetric = true,
  debug = false,
  children,
  ...props
}, ref) => {
  const spotlight = React78.useRef(null);
  return React78.createElement("group", null, debug && spotlight.current && React78.createElement("spotLightHelper", {
    args: [spotlight.current]
  }), React78.createElement("spotLight", _extends({
    ref: react_merge_refs_esm_default([ref, spotlight]),
    angle,
    color,
    distance,
    castShadow: true
  }, props), volumetric && React78.createElement(VolumetricMesh, {
    debug,
    opacity,
    radiusTop,
    radiusBottom,
    depthBuffer,
    color,
    distance,
    angle,
    attenuation,
    anglePower
  })), children && React78.cloneElement(children, {
    spotlightRef: spotlight,
    debug
  }));
});

// node_modules/@react-three/drei/core/Lightformer.js
var React79 = __toESM(require_react());
var Lightformer = React79.forwardRef(({
  args,
  map,
  toneMapped = false,
  color = "white",
  form: Form = "rect",
  intensity = 1,
  scale: scale2 = 1,
  target: target2,
  children,
  ...props
}, forwardRef56) => {
  const ref = React79.useRef(null);
  React79.useLayoutEffect(() => {
    if (!children && !props.material) {
      applyProps(ref.current.material, {
        color
      });
      ref.current.material.color.multiplyScalar(intensity);
    }
  }, [color, intensity, children, props.material]);
  React79.useLayoutEffect(() => {
    if (target2)
      ref.current.lookAt(Array.isArray(target2) ? new Vector3(...target2) : target2);
  }, [target2]);
  scale2 = Array.isArray(scale2) && scale2.length === 2 ? [scale2[0], scale2[1], 1] : scale2;
  return React79.createElement("mesh", _extends({
    ref: react_merge_refs_esm_default([ref, forwardRef56]),
    scale: scale2
  }, props), Form === "circle" ? React79.createElement("ringGeometry", {
    args: [0, 1, 64]
  }) : Form === "ring" ? React79.createElement("ringGeometry", {
    args: [0.5, 1, 64]
  }) : Form === "rect" ? React79.createElement("planeGeometry", null) : React79.createElement(Form, {
    args
  }), children ? children : !props.material ? React79.createElement("meshBasicMaterial", {
    toneMapped,
    map,
    side: DoubleSide
  }) : null);
});

// node_modules/@react-three/drei/core/Sky.js
var React80 = __toESM(require_react());
function calcPosFromAngles(inclination, azimuth, vector = new Vector3()) {
  const theta = Math.PI * (inclination - 0.5);
  const phi = 2 * Math.PI * (azimuth - 0.5);
  vector.x = Math.cos(phi);
  vector.y = Math.sin(theta);
  vector.z = Math.sin(phi);
  return vector;
}
var Sky2 = React80.forwardRef(({
  inclination = 0.6,
  azimuth = 0.1,
  distance = 1e3,
  mieCoefficient = 5e-3,
  mieDirectionalG = 0.8,
  rayleigh = 0.5,
  turbidity = 10,
  sunPosition = calcPosFromAngles(inclination, azimuth),
  ...props
}, ref) => {
  const scale2 = React80.useMemo(() => new Vector3().setScalar(distance), [distance]);
  const [sky] = React80.useState(() => new Sky());
  return React80.createElement("primitive", _extends({
    object: sky,
    ref,
    "material-uniforms-mieCoefficient-value": mieCoefficient,
    "material-uniforms-mieDirectionalG-value": mieDirectionalG,
    "material-uniforms-rayleigh-value": rayleigh,
    "material-uniforms-sunPosition-value": sunPosition,
    "material-uniforms-turbidity-value": turbidity,
    scale: scale2
  }, props));
});

// node_modules/@react-three/drei/core/Stars.js
var React81 = __toESM(require_react());
var StarfieldMaterial = class extends ShaderMaterial {
  constructor() {
    super({
      uniforms: {
        time: {
          value: 0
        },
        fade: {
          value: 1
        }
      },
      vertexShader: (
        /* glsl */
        `
      uniform float time;
      attribute float size;
      varying vec3 vColor;
      void main() {
        vColor = color;
        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);
        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));
        gl_Position = projectionMatrix * mvPosition;
      }`
      ),
      fragmentShader: (
        /* glsl */
        `
      uniform sampler2D pointTexture;
      uniform float fade;
      varying vec3 vColor;
      void main() {
        float opacity = 1.0;
        if (fade == 1.0) {
          float d = distance(gl_PointCoord, vec2(0.5, 0.5));
          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));
        }
        gl_FragColor = vec4(vColor, opacity);

        #include <tonemapping_fragment>
	      #include <encodings_fragment>
      }`
      )
    });
  }
};
var genStar = (r) => {
  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));
};
var Stars = React81.forwardRef(({
  radius = 100,
  depth = 50,
  count = 5e3,
  saturation = 0,
  factor = 4,
  fade = false,
  speed = 1
}, ref) => {
  const material = React81.useRef();
  const [position2, color, size] = React81.useMemo(() => {
    const positions = [];
    const colors2 = [];
    const sizes = Array.from({
      length: count
    }, () => (0.5 + 0.5 * Math.random()) * factor);
    const color2 = new Color();
    let r = radius + depth;
    const increment = depth / count;
    for (let i2 = 0; i2 < count; i2++) {
      r -= increment * Math.random();
      positions.push(...genStar(r).toArray());
      color2.setHSL(i2 / count, saturation, 0.9);
      colors2.push(color2.r, color2.g, color2.b);
    }
    return [new Float32Array(positions), new Float32Array(colors2), new Float32Array(sizes)];
  }, [count, depth, factor, radius, saturation]);
  useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));
  const [starfieldMaterial] = React81.useState(() => new StarfieldMaterial());
  return React81.createElement("points", {
    ref
  }, React81.createElement("bufferGeometry", null, React81.createElement("bufferAttribute", {
    attach: "attributes-position",
    args: [position2, 3]
  }), React81.createElement("bufferAttribute", {
    attach: "attributes-color",
    args: [color, 3]
  }), React81.createElement("bufferAttribute", {
    attach: "attributes-size",
    args: [size, 1]
  })), React81.createElement("primitive", {
    ref: material,
    object: starfieldMaterial,
    attach: "material",
    blending: AdditiveBlending,
    "uniforms-fade-value": fade,
    depthWrite: false,
    transparent: true,
    vertexColors: true
  }));
});

// node_modules/@react-three/drei/core/Cloud.js
var React82 = __toESM(require_react());
var CLOUD_URL = "https://rawcdn.githack.com/pmndrs/drei-assets/9225a9f1fbd449d9411125c2f419b843d0308c9f/cloud.png";
function Cloud({
  opacity = 0.5,
  speed = 0.4,
  width = 10,
  depth = 1.5,
  segments = 20,
  texture = CLOUD_URL,
  color = "#ffffff",
  depthTest = true,
  ...props
}) {
  const gl = useThree((state) => state.gl);
  const group = React82.useRef();
  const cloudTexture = useTexture(texture);
  const clouds = React82.useMemo(() => [...new Array(segments)].map((_, index) => ({
    x: width / 2 - Math.random() * width,
    y: width / 2 - Math.random() * width,
    scale: 0.4 + Math.sin((index + 1) / segments * Math.PI) * ((0.2 + Math.random()) * 10),
    density: Math.max(0.2, Math.random()),
    rotation: Math.max(2e-3, 5e-3 * Math.random()) * speed
  })), [width, segments, speed]);
  useFrame((state) => {
    var _group$current;
    return (_group$current = group.current) == null ? void 0 : _group$current.children.forEach((cloud, index) => {
      cloud.children[0].rotation.z += clouds[index].rotation;
      cloud.children[0].scale.setScalar(clouds[index].scale + (1 + Math.sin(state.clock.getElapsedTime() / 10)) / 2 * index / 10);
    });
  });
  return React82.createElement("group", props, React82.createElement("group", {
    position: [0, 0, segments / 2 * depth],
    ref: group
  }, clouds.map(({
    x,
    y,
    scale: scale2,
    density
  }, index) => React82.createElement(Billboard, {
    key: index,
    position: [x, y, -index * depth]
  }, React82.createElement(Plane2, {
    scale: scale2,
    rotation: [0, 0, 0]
  }, React82.createElement("meshStandardMaterial", {
    map: cloudTexture,
    "map-encoding": gl.outputEncoding,
    transparent: true,
    opacity: scale2 / 6 * density * opacity,
    depthTest,
    color
  }))))));
}

// node_modules/@react-three/drei/core/Sparkles.js
var React83 = __toESM(require_react());

// node_modules/@react-three/drei/helpers/glsl/Sparkles.frag.glsl.js
var fragShader = "#define GLSLIFY 1\nvarying vec3 vColor;varying float vOpacity;void main(){float distanceToCenter=distance(gl_PointCoord,vec2(0.5));float strength=0.05/distanceToCenter-0.1;gl_FragColor=vec4(vColor,strength*vOpacity);}";

// node_modules/@react-three/drei/helpers/glsl/Sparkles.vert.glsl.js
var vertShader = "#define GLSLIFY 1\nuniform float pixelRatio;uniform float time;attribute float size;attribute float speed;attribute float opacity;attribute vec3 noise;attribute vec3 color;varying vec3 vColor;varying float vOpacity;void main(){vec4 modelPosition=modelMatrix*vec4(position,1.0);modelPosition.y+=sin(time*speed+modelPosition.x*noise.x*100.0)*0.2;modelPosition.z+=cos(time*speed+modelPosition.x*noise.y*100.0)*0.2;modelPosition.x+=cos(time*speed+modelPosition.x*noise.z*100.0)*0.2;vec4 viewPosition=viewMatrix*modelPosition;vec4 projectionPostion=projectionMatrix*viewPosition;gl_Position=projectionPostion;gl_PointSize=size*25.*pixelRatio;gl_PointSize*=(1.0/-viewPosition.z);vColor=color;vOpacity=opacity;}";

// node_modules/@react-three/drei/core/Sparkles.js
var SparklesMaterial = shaderMaterial({
  time: 0,
  pixelRatio: 1
}, vertShader, fragShader);
var isFloat32Array = (def) => def && def.constructor === Float32Array;
var expandColor = (v4) => [v4.r, v4.g, v4.b];
var isVector = (v4) => v4 instanceof Vector2 || v4 instanceof Vector3 || v4 instanceof Vector4;
var normalizeVector = (v4) => {
  if (Array.isArray(v4))
    return v4;
  else if (isVector(v4))
    return v4.toArray();
  return [v4, v4, v4];
};
function usePropAsIsOrAsAttribute(count, prop, setDefault) {
  return React83.useMemo(() => {
    if (prop !== void 0) {
      if (isFloat32Array(prop)) {
        return prop;
      } else {
        if (prop instanceof Color) {
          const a = Array.from({
            length: count * 3
          }, () => expandColor(prop)).flat();
          return Float32Array.from(a);
        } else if (isVector(prop) || Array.isArray(prop)) {
          const a = Array.from({
            length: count * 3
          }, () => normalizeVector(prop)).flat();
          return Float32Array.from(a);
        }
        return Float32Array.from({
          length: count
        }, () => prop);
      }
    }
    return Float32Array.from({
      length: count
    }, setDefault);
  }, [prop]);
}
var Sparkles = React83.forwardRef(({
  noise = 1,
  count = 100,
  speed = 1,
  opacity = 1,
  scale: scale2 = 1,
  size,
  color,
  ...props
}, forwardRef56) => {
  React83.useMemo(() => extend({
    SparklesMaterial
  }), []);
  const matRef = React83.useRef();
  const dpr = useThree((state) => state.viewport.dpr);
  const positions = React83.useMemo(() => Float32Array.from(Array.from({
    length: count
  }, () => normalizeVector(scale2).map(MathUtils.randFloatSpread)).flat()), [count, scale2]);
  const sizes = usePropAsIsOrAsAttribute(count, size, Math.random);
  const opacities = usePropAsIsOrAsAttribute(count, opacity);
  const speeds = usePropAsIsOrAsAttribute(count, speed);
  const noises = usePropAsIsOrAsAttribute(count * 3, noise);
  const colors2 = usePropAsIsOrAsAttribute(color === void 0 ? count * 3 : count, !isFloat32Array(color) ? new Color(color) : color, () => 1);
  useFrame((state) => matRef.current.uniforms.time.value = state.clock.elapsedTime);
  return React83.createElement("points", _extends({
    key: `particle-${count}-${JSON.stringify(scale2)}`
  }, props, {
    ref: forwardRef56
  }), React83.createElement("bufferGeometry", null, React83.createElement("bufferAttribute", {
    attach: "attributes-position",
    args: [positions, 3]
  }), React83.createElement("bufferAttribute", {
    attach: "attributes-size",
    args: [sizes, 1]
  }), React83.createElement("bufferAttribute", {
    attach: "attributes-opacity",
    args: [opacities, 1]
  }), React83.createElement("bufferAttribute", {
    attach: "attributes-speed",
    args: [speeds, 1]
  }), React83.createElement("bufferAttribute", {
    attach: "attributes-color",
    args: [colors2, 3]
  }), React83.createElement("bufferAttribute", {
    attach: "attributes-noise",
    args: [noises, 3]
  })), React83.createElement("sparklesMaterial", {
    ref: matRef,
    transparent: true,
    pixelRatio: dpr,
    depthWrite: false
  }));
});

// node_modules/@react-three/drei/core/useMatcapTexture.js
var React84 = __toESM(require_react());
function getFormatString(format) {
  switch (format) {
    case 64:
      return "-64px";
    case 128:
      return "-128px";
    case 256:
      return "-256px";
    case 512:
      return "-512px";
    default:
      return "";
  }
}
var LIST_URL = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/matcaps.json";
var MATCAP_ROOT = "https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d";
function useMatcapTexture(id = 0, format = 1024, onLoad) {
  const matcapList = suspend(() => fetch(LIST_URL).then((res) => res.json()), ["matcapList"]);
  const DEFAULT_MATCAP = matcapList[0];
  const numTot = React84.useMemo(() => Object.keys(matcapList).length, []);
  const fileHash = React84.useMemo(() => {
    if (typeof id === "string") {
      return id;
    } else if (typeof id === "number") {
      return matcapList[id];
    }
    return null;
  }, [id]);
  const fileName = `${fileHash || DEFAULT_MATCAP}${getFormatString(format)}.png`;
  const url = `${MATCAP_ROOT}/${format}/${fileName}`;
  const matcapTexture = useTexture(url, onLoad);
  return [matcapTexture, url, numTot];
}

// node_modules/@react-three/drei/core/useNormalTexture.js
var React85 = __toESM(require_react());
var NORMAL_ROOT = "https://rawcdn.githack.com/pmndrs/drei-assets/7a3104997e1576f83472829815b00880d88b32fb";
var LIST_URL2 = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/normals/normals.json";
function useNormalTexture(id = 0, settings = {}, onLoad) {
  const {
    repeat = [1, 1],
    anisotropy = 1,
    offset = [0, 0]
  } = settings;
  const normalsList = suspend(() => fetch(LIST_URL2).then((res) => res.json()), ["normalsList"]);
  const numTot = React85.useMemo(() => Object.keys(normalsList).length, []);
  const DEFAULT_NORMAL = normalsList[0];
  const imageName = normalsList[id] || DEFAULT_NORMAL;
  const url = `${NORMAL_ROOT}/normals/${imageName}`;
  const normalTexture = useTexture(url, onLoad);
  React85.useLayoutEffect(() => {
    if (!normalTexture)
      return;
    normalTexture.wrapS = normalTexture.wrapT = RepeatWrapping;
    normalTexture.repeat = new Vector2(repeat[0], repeat[1]);
    normalTexture.offset = new Vector2(offset[0], offset[1]);
    normalTexture.anisotropy = anisotropy;
  }, [normalTexture, anisotropy, repeat, offset]);
  return [normalTexture, url, numTot];
}

// node_modules/@react-three/drei/core/Points.js
var React86 = __toESM(require_react());
var _inverseMatrix = new Matrix4();
var _ray = new Ray();
var _sphere = new Sphere();
var _position = new Vector3();
var PositionPoint = class extends Group {
  constructor() {
    super();
    this.size = 0;
    this.color = new Color("white");
    this.instance = {
      current: void 0
    };
    this.instanceKey = {
      current: void 0
    };
  }
  // This will allow the virtual instance have bounds
  get geometry() {
    var _this$instance$curren;
    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;
  }
  raycast(raycaster, intersects) {
    var _raycaster$params$Poi, _raycaster$params$Poi2;
    const parent = this.instance.current;
    if (!parent || !parent.geometry)
      return;
    const instanceId = parent.userData.instances.indexOf(this.instanceKey);
    if (instanceId === -1 || instanceId > parent.geometry.drawRange.count)
      return;
    const threshold = (_raycaster$params$Poi = (_raycaster$params$Poi2 = raycaster.params.Points) == null ? void 0 : _raycaster$params$Poi2.threshold) !== null && _raycaster$params$Poi !== void 0 ? _raycaster$params$Poi : 1;
    _sphere.set(this.getWorldPosition(_position), threshold);
    if (raycaster.ray.intersectsSphere(_sphere) === false)
      return;
    _inverseMatrix.copy(parent.matrixWorld).invert();
    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const rayPointDistanceSq = _ray.distanceSqToPoint(_position);
    if (rayPointDistanceSq < localThresholdSq) {
      const intersectPoint = new Vector3();
      _ray.closestPointToPoint(_position, intersectPoint);
      intersectPoint.applyMatrix4(this.matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far)
        return;
      intersects.push({
        distance,
        distanceToRay: Math.sqrt(rayPointDistanceSq),
        point: intersectPoint,
        index: instanceId,
        face: null,
        object: this
      });
    }
  }
};
var i;
var positionRef;
var context6 = React86.createContext(null);
var parentMatrix = new Matrix4();
var position = new Vector3();
var PointsInstances = React86.forwardRef(({
  children,
  range,
  limit = 1e3,
  ...props
}, ref) => {
  const parentRef = React86.useRef(null);
  const [refs, setRefs] = React86.useState([]);
  const [[positions, colors2, sizes]] = React86.useState(() => [new Float32Array(limit * 3), Float32Array.from({
    length: limit * 3
  }, () => 1), Float32Array.from({
    length: limit
  }, () => 1)]);
  React86.useEffect(() => {
    parentRef.current.geometry.attributes.position.needsUpdate = true;
  });
  useFrame(() => {
    parentRef.current.updateMatrix();
    parentRef.current.updateMatrixWorld();
    parentMatrix.copy(parentRef.current.matrixWorld).invert();
    parentRef.current.geometry.drawRange.count = Math.min(limit, range !== void 0 ? range : limit, refs.length);
    for (i = 0; i < refs.length; i++) {
      positionRef = refs[i].current;
      positionRef.getWorldPosition(position).applyMatrix4(parentMatrix);
      position.toArray(positions, i * 3);
      parentRef.current.geometry.attributes.position.needsUpdate = true;
      positionRef.matrixWorldNeedsUpdate = true;
      positionRef.color.toArray(colors2, i * 3);
      parentRef.current.geometry.attributes.color.needsUpdate = true;
      sizes.set([positionRef.size], i);
      parentRef.current.geometry.attributes.size.needsUpdate = true;
    }
  });
  const api = React86.useMemo(() => ({
    getParent: () => parentRef,
    subscribe: (ref2) => {
      setRefs((refs2) => [...refs2, ref2]);
      return () => setRefs((refs2) => refs2.filter((item) => item.current !== ref2.current));
    }
  }), []);
  return React86.createElement("points", _extends({
    userData: {
      instances: refs
    },
    matrixAutoUpdate: false,
    ref: react_merge_refs_esm_default([ref, parentRef]),
    raycast: () => null
  }, props), React86.createElement("bufferGeometry", null, React86.createElement("bufferAttribute", {
    attach: "attributes-position",
    count: positions.length / 3,
    array: positions,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), React86.createElement("bufferAttribute", {
    attach: "attributes-color",
    count: colors2.length / 3,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), React86.createElement("bufferAttribute", {
    attach: "attributes-size",
    count: sizes.length,
    array: sizes,
    itemSize: 1,
    usage: DynamicDrawUsage
  })), React86.createElement(context6.Provider, {
    value: api
  }, children));
});
var Point = React86.forwardRef(({
  children,
  ...props
}, ref) => {
  React86.useMemo(() => extend({
    PositionPoint
  }), []);
  const group = React86.useRef();
  const {
    subscribe,
    getParent
  } = React86.useContext(context6);
  React86.useLayoutEffect(() => subscribe(group), []);
  return React86.createElement("positionPoint", _extends({
    instance: getParent(),
    instanceKey: group,
    ref: react_merge_refs_esm_default([ref, group])
  }, props), children);
});
var PointsBuffer = React86.forwardRef(({
  children,
  positions,
  colors: colors2,
  sizes,
  stride = 3,
  ...props
}, forwardedRef) => {
  const pointsRef = React86.useRef(null);
  useFrame(() => {
    const attr = pointsRef.current.geometry.attributes;
    attr.position.needsUpdate = true;
    if (colors2)
      attr.color.needsUpdate = true;
    if (sizes)
      attr.size.needsUpdate = true;
  });
  return React86.createElement("points", _extends({
    ref: react_merge_refs_esm_default([forwardedRef, pointsRef])
  }, props), React86.createElement("bufferGeometry", null, React86.createElement("bufferAttribute", {
    attach: "attributes-position",
    count: positions.length / stride,
    array: positions,
    itemSize: stride,
    usage: DynamicDrawUsage
  }), colors2 && React86.createElement("bufferAttribute", {
    attach: "attributes-color",
    count: colors2.length / stride,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), sizes && React86.createElement("bufferAttribute", {
    attach: "attributes-size",
    count: sizes.length / stride,
    array: sizes,
    itemSize: 1,
    usage: DynamicDrawUsage
  })), children);
});
var Points = React86.forwardRef((props, forwardedRef) => {
  if (props.positions instanceof Float32Array) {
    return React86.createElement(PointsBuffer, _extends({}, props, {
      ref: forwardedRef
    }));
  } else
    return React86.createElement(PointsInstances, _extends({}, props, {
      ref: forwardedRef
    }));
});

// node_modules/@react-three/drei/core/Instances.js
var React87 = __toESM(require_react());
var _instanceLocalMatrix = new Matrix4();
var _instanceWorldMatrix = new Matrix4();
var _instanceIntersects = [];
var _mesh = new Mesh();
var PositionMesh = class extends Group {
  constructor() {
    super();
    this.color = new Color("white");
    this.instance = {
      current: void 0
    };
    this.instanceKey = {
      current: void 0
    };
  }
  // This will allow the virtual instance have bounds
  get geometry() {
    var _this$instance$curren;
    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;
  }
  // And this will allow the virtual instance to receive events
  raycast(raycaster, intersects) {
    const parent = this.instance.current;
    if (!parent)
      return;
    if (!parent.geometry || !parent.material)
      return;
    _mesh.geometry = parent.geometry;
    const matrixWorld = parent.matrixWorld;
    const instanceId = parent.userData.instances.indexOf(this.instanceKey);
    if (instanceId === -1 || instanceId > parent.count)
      return;
    parent.getMatrixAt(instanceId, _instanceLocalMatrix);
    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
    _mesh.matrixWorld = _instanceWorldMatrix;
    if (parent.material instanceof Material)
      _mesh.material.side = parent.material.side;
    else
      _mesh.material.side = parent.material[0].side;
    _mesh.raycast(raycaster, _instanceIntersects);
    for (let i2 = 0, l = _instanceIntersects.length; i2 < l; i2++) {
      const intersect = _instanceIntersects[i2];
      intersect.instanceId = instanceId;
      intersect.object = this;
      intersects.push(intersect);
    }
    _instanceIntersects.length = 0;
  }
};
var globalContext2 = React87.createContext(null);
var parentMatrix2 = new Matrix4();
var instanceMatrix = new Matrix4();
var tempMatrix2 = new Matrix4();
var translation = new Vector3();
var rotation = new Quaternion();
var scale = new Vector3();
var Instance = React87.forwardRef(({
  context: context10,
  children,
  ...props
}, ref) => {
  React87.useMemo(() => extend({
    PositionMesh
  }), []);
  const group = React87.useRef();
  const {
    subscribe,
    getParent
  } = React87.useContext(context10 || globalContext2);
  React87.useLayoutEffect(() => subscribe(group), []);
  return React87.createElement("positionMesh", _extends({
    instance: getParent(),
    instanceKey: group,
    ref: react_merge_refs_esm_default([ref, group])
  }, props), children);
});
var Instances = React87.forwardRef(({
  children,
  range,
  limit = 1e3,
  frames = Infinity,
  ...props
}, ref) => {
  const [{
    context: context10,
    instance
  }] = React87.useState(() => {
    const context11 = React87.createContext(null);
    return {
      context: context11,
      instance: React87.forwardRef((props2, ref2) => React87.createElement(Instance, _extends({
        context: context11
      }, props2, {
        ref: ref2
      })))
    };
  });
  const parentRef = React87.useRef(null);
  const [instances, setInstances] = React87.useState([]);
  const [[matrices, colors2]] = React87.useState(() => {
    const mArray = new Float32Array(limit * 16);
    for (let i2 = 0; i2 < limit; i2++)
      tempMatrix2.identity().toArray(mArray, i2 * 16);
    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];
  });
  React87.useEffect(() => {
    parentRef.current.instanceMatrix.needsUpdate = true;
  });
  let count = 0;
  let updateRange = 0;
  useFrame(() => {
    if (frames === Infinity || count < frames) {
      parentRef.current.updateMatrix();
      parentRef.current.updateMatrixWorld();
      parentMatrix2.copy(parentRef.current.matrixWorld).invert();
      updateRange = Math.min(limit, range !== void 0 ? range : limit, instances.length);
      parentRef.current.count = updateRange;
      parentRef.current.instanceMatrix.updateRange.count = updateRange * 16;
      parentRef.current.instanceColor.updateRange.count = updateRange * 3;
      for (let i2 = 0; i2 < instances.length; i2++) {
        const instance2 = instances[i2].current;
        instance2.matrixWorld.decompose(translation, rotation, scale);
        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix2);
        instanceMatrix.toArray(matrices, i2 * 16);
        parentRef.current.instanceMatrix.needsUpdate = true;
        instance2.color.toArray(colors2, i2 * 3);
        parentRef.current.instanceColor.needsUpdate = true;
      }
      count++;
    }
  });
  const api = React87.useMemo(() => ({
    getParent: () => parentRef,
    subscribe: (ref2) => {
      setInstances((instances2) => [...instances2, ref2]);
      return () => setInstances((instances2) => instances2.filter((item) => item.current !== ref2.current));
    }
  }), []);
  return React87.createElement("instancedMesh", _extends({
    userData: {
      instances
    },
    matrixAutoUpdate: false,
    ref: react_merge_refs_esm_default([ref, parentRef]),
    args: [null, null, 0],
    raycast: () => null
  }, props), React87.createElement("instancedBufferAttribute", {
    attach: "instanceMatrix",
    count: matrices.length / 16,
    array: matrices,
    itemSize: 16,
    usage: DynamicDrawUsage
  }), React87.createElement("instancedBufferAttribute", {
    attach: "instanceColor",
    count: colors2.length / 3,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), typeof children === "function" ? React87.createElement(context10.Provider, {
    value: api
  }, children(instance)) : React87.createElement(globalContext2.Provider, {
    value: api
  }, children));
});
var Merged = React87.forwardRef(function Merged2({
  meshes,
  children,
  ...props
}, ref) {
  const isArray2 = Array.isArray(meshes);
  if (!isArray2) {
    for (const key of Object.keys(meshes))
      if (!meshes[key].isMesh)
        delete meshes[key];
  }
  return React87.createElement("group", {
    ref
  }, React87.createElement(Composer, {
    components: (isArray2 ? meshes : Object.values(meshes)).map(({
      geometry,
      material
    }) => React87.createElement(Instances, _extends({
      key: geometry.uuid,
      geometry,
      material
    }, props)))
  }, (args) => isArray2 ? children(...args) : children(Object.keys(meshes).filter((key) => meshes[key].isMesh).reduce((acc, key, i2) => ({
    ...acc,
    [key]: args[i2]
  }), {}))));
});

// node_modules/@react-three/drei/core/Segments.js
var React88 = __toESM(require_react());
var context7 = React88.createContext(null);
var Segments = React88.forwardRef((props, forwardedRef) => {
  React88.useMemo(() => extend({
    SegmentObject
  }), []);
  const {
    limit = 1e3,
    lineWidth = 1,
    children,
    ...rest
  } = props;
  const [segments, setSegments] = React88.useState([]);
  const [line] = React88.useState(() => new Line2());
  const [material] = React88.useState(() => new LineMaterial());
  const [geometry] = React88.useState(() => new LineSegmentsGeometry());
  const [resolution] = React88.useState(() => new Vector2(512, 512));
  const [positions] = React88.useState(() => Array(limit * 6).fill(0));
  const [colors2] = React88.useState(() => Array(limit * 6).fill(0));
  const api = React88.useMemo(() => ({
    subscribe: (ref) => {
      setSegments((segments2) => [...segments2, ref]);
      return () => setSegments((segments2) => segments2.filter((item) => item.current !== ref.current));
    }
  }), []);
  useFrame(() => {
    for (let i2 = 0; i2 < limit; i2++) {
      var _segments$i;
      const segment = (_segments$i = segments[i2]) == null ? void 0 : _segments$i.current;
      if (segment) {
        positions[i2 * 6 + 0] = segment.start.x;
        positions[i2 * 6 + 1] = segment.start.y;
        positions[i2 * 6 + 2] = segment.start.z;
        positions[i2 * 6 + 3] = segment.end.x;
        positions[i2 * 6 + 4] = segment.end.y;
        positions[i2 * 6 + 5] = segment.end.z;
        colors2[i2 * 6 + 0] = segment.color.r;
        colors2[i2 * 6 + 1] = segment.color.g;
        colors2[i2 * 6 + 2] = segment.color.b;
        colors2[i2 * 6 + 3] = segment.color.r;
        colors2[i2 * 6 + 4] = segment.color.g;
        colors2[i2 * 6 + 5] = segment.color.b;
      }
    }
    geometry.setColors(colors2);
    geometry.setPositions(positions);
    line.computeLineDistances();
  });
  return React88.createElement("primitive", {
    object: line,
    ref: forwardedRef
  }, React88.createElement("primitive", {
    object: geometry,
    attach: "geometry"
  }), React88.createElement("primitive", _extends({
    object: material,
    attach: "material",
    vertexColors: true,
    resolution,
    linewidth: lineWidth
  }, rest)), React88.createElement(context7.Provider, {
    value: api
  }, children));
});
var SegmentObject = class {
  constructor() {
    this.color = new Color("white");
    this.start = new Vector3(0, 0, 0);
    this.end = new Vector3(0, 0, 0);
  }
};
var normPos = (pos) => pos instanceof Vector3 ? pos : new Vector3(...typeof pos === "number" ? [pos, pos, pos] : pos);
var Segment = React88.forwardRef(({
  color,
  start,
  end
}, forwardedRef) => {
  const api = React88.useContext(context7);
  if (!api)
    throw "Segment must used inside Segments component.";
  const ref = React88.useRef(null);
  React88.useLayoutEffect(() => api.subscribe(ref), []);
  return React88.createElement("segmentObject", {
    ref: react_merge_refs_esm_default([ref, forwardedRef]),
    color,
    start: normPos(start),
    end: normPos(end)
  });
});

// node_modules/@react-three/drei/core/Detailed.js
var React89 = __toESM(require_react());
var Detailed = React89.forwardRef(({
  children,
  distances,
  ...props
}, ref) => {
  const lodRef = React89.useRef(null);
  React89.useLayoutEffect(() => {
    const {
      current: lod
    } = lodRef;
    lod.levels.length = 0;
    lod.children.forEach((object, index) => lod.levels.push({
      object,
      distance: distances[index]
    }));
  });
  useFrame((state) => {
    var _lodRef$current;
    return (_lodRef$current = lodRef.current) == null ? void 0 : _lodRef$current.update(state.camera);
  });
  return React89.createElement("lOD", _extends({
    ref: react_merge_refs_esm_default([lodRef, ref])
  }, props), children);
});

// node_modules/@react-three/drei/core/Preload.js
var React90 = __toESM(require_react());
function Preload({
  all,
  scene,
  camera
}) {
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const dCamera = useThree(({
    camera: camera2
  }) => camera2);
  const dScene = useThree(({
    scene: scene2
  }) => scene2);
  React90.useLayoutEffect(() => {
    const invisible = [];
    if (all) {
      (scene || dScene).traverse((object) => {
        if (object.visible === false) {
          invisible.push(object);
          object.visible = true;
        }
      });
    }
    gl.compile(scene || dScene, camera || dCamera);
    const cubeRenderTarget = new WebGLCubeRenderTarget(128);
    const cubeCamera = new CubeCamera(0.01, 1e5, cubeRenderTarget);
    cubeCamera.update(gl, scene || dScene);
    cubeRenderTarget.dispose();
    invisible.forEach((object) => object.visible = false);
  }, []);
  return null;
}

// node_modules/@react-three/drei/core/BakeShadows.js
var import_react10 = __toESM(require_react());
function BakeShadows() {
  const gl = useThree((state) => state.gl);
  (0, import_react10.useEffect)(() => {
    gl.shadowMap.autoUpdate = false;
    gl.shadowMap.needsUpdate = true;
    return () => {
      gl.shadowMap.autoUpdate = gl.shadowMap.needsUpdate = true;
    };
  }, [gl.shadowMap]);
  return null;
}

// node_modules/@react-three/drei/core/meshBounds.js
var _inverseMatrix2 = new Matrix4();
var _ray2 = new Ray();
var _sphere2 = new Sphere();
var _vA = new Vector3();
function meshBounds(raycaster, intersects) {
  const geometry = this.geometry;
  const material = this.material;
  const matrixWorld = this.matrixWorld;
  if (material === void 0)
    return;
  if (geometry.boundingSphere === null)
    geometry.computeBoundingSphere();
  _sphere2.copy(geometry.boundingSphere);
  _sphere2.applyMatrix4(matrixWorld);
  if (raycaster.ray.intersectsSphere(_sphere2) === false)
    return;
  _inverseMatrix2.copy(matrixWorld).invert();
  _ray2.copy(raycaster.ray).applyMatrix4(_inverseMatrix2);
  if (geometry.boundingBox !== null && _ray2.intersectBox(geometry.boundingBox, _vA) === null)
    return;
  intersects.push({
    distance: _vA.distanceTo(raycaster.ray.origin),
    point: _vA.clone(),
    object: this
  });
}

// node_modules/@react-three/drei/core/AdaptiveDpr.js
var React91 = __toESM(require_react());
function AdaptiveDpr({
  pixelated
}) {
  const gl = useThree((state) => state.gl);
  const active = useThree((state) => state.internal.active);
  const current = useThree((state) => state.performance.current);
  const initialDpr = useThree((state) => state.viewport.initialDpr);
  const setDpr = useThree((state) => state.setDpr);
  React91.useEffect(() => {
    const domElement = gl.domElement;
    return () => {
      if (active)
        setDpr(initialDpr);
      if (pixelated && domElement)
        domElement.style.imageRendering = "auto";
    };
  }, []);
  React91.useEffect(() => {
    setDpr(current * initialDpr);
    if (pixelated && gl.domElement)
      gl.domElement.style.imageRendering = current === 1 ? "auto" : "pixelated";
  }, [current]);
  return null;
}

// node_modules/@react-three/drei/core/AdaptiveEvents.js
var React92 = __toESM(require_react());
function AdaptiveEvents() {
  const get = useThree((state) => state.get);
  const setEvents = useThree((state) => state.setEvents);
  const current = useThree((state) => state.performance.current);
  React92.useEffect(() => {
    const enabled = get().events.enabled;
    return () => setEvents({
      enabled
    });
  }, []);
  React92.useEffect(() => setEvents({
    enabled: current === 1
  }), [current]);
  return null;
}

// node_modules/@react-three/drei/core/PerformanceMonitor.js
var React93 = __toESM(require_react());
var import_react11 = __toESM(require_react());
var context8 = (0, import_react11.createContext)(null);
function PerformanceMonitor({
  iterations = 10,
  ms = 250,
  threshold = 0.75,
  step = 0.1,
  factor: _factor = 0.5,
  flipflops = Infinity,
  bounds = (refreshrate) => refreshrate > 100 ? [60, 100] : [40, 60],
  onIncline,
  onDecline,
  onChange,
  onFallback,
  children
}) {
  const decimalPlacesRatio = Math.pow(10, 0);
  const [api, _] = (0, import_react11.useState)(() => ({
    fps: 0,
    index: 0,
    factor: _factor,
    flipped: 0,
    refreshrate: 0,
    fallback: false,
    frames: [],
    averages: [],
    subscriptions: /* @__PURE__ */ new Map(),
    subscribe: (ref) => {
      const key = Symbol();
      api.subscriptions.set(key, ref.current);
      return () => void api.subscriptions.delete(key);
    }
  }));
  let lastFactor = 0;
  useFrame(() => {
    const {
      frames,
      averages
    } = api;
    if (api.fallback)
      return;
    if (averages.length < iterations) {
      frames.push(performance.now());
      const msPassed = frames[frames.length - 1] - frames[0];
      if (msPassed >= ms) {
        api.fps = Math.round(frames.length / msPassed * 1e3 * decimalPlacesRatio) / decimalPlacesRatio;
        api.refreshrate = Math.max(api.refreshrate, api.fps);
        averages[api.index++ % iterations] = api.fps;
        if (averages.length === iterations) {
          const [lower, upper] = bounds(api.refreshrate);
          const upperBounds = averages.filter((value) => value >= upper);
          const lowerBounds = averages.filter((value) => value < lower);
          if (upperBounds.length > iterations * threshold) {
            api.factor = Math.min(1, api.factor + step);
            api.flipped++;
            if (onIncline)
              onIncline(api);
            api.subscriptions.forEach((value) => value.onIncline && value.onIncline(api));
          }
          if (lowerBounds.length > iterations * threshold) {
            api.factor = Math.max(0, api.factor - step);
            api.flipped++;
            if (onDecline)
              onDecline(api);
            api.subscriptions.forEach((value) => value.onDecline && value.onDecline(api));
          }
          if (lastFactor !== api.factor) {
            lastFactor = api.factor;
            if (onChange)
              onChange(api);
            api.subscriptions.forEach((value) => value.onChange && value.onChange(api));
          }
          if (api.flipped > flipflops && !api.fallback) {
            api.fallback = true;
            if (onFallback)
              onFallback(api);
            api.subscriptions.forEach((value) => value.onFallback && value.onFallback(api));
          }
          api.averages = [];
        }
        api.frames = [];
      }
    }
  });
  return React93.createElement(context8.Provider, {
    value: api
  }, children);
}
function usePerformanceMonitor({
  onIncline,
  onDecline,
  onChange,
  onFallback
}) {
  const api = (0, import_react11.useContext)(context8);
  const ref = (0, import_react11.useRef)({
    onIncline,
    onDecline,
    onChange,
    onFallback
  });
  (0, import_react11.useLayoutEffect)(() => {
    ref.current.onIncline = onIncline;
    ref.current.onDecline = onDecline;
    ref.current.onChange = onChange;
    ref.current.onFallback = onFallback;
  }, [onIncline, onDecline, onChange, onFallback]);
  (0, import_react11.useLayoutEffect)(() => api.subscribe(ref), [api]);
}

// node_modules/@react-three/drei/core/RenderTexture.js
var React94 = __toESM(require_react());
var RenderTexture = React94.forwardRef(({
  children,
  width,
  height,
  samples = 8,
  renderPriority = 0,
  eventPriority = 0,
  frames = Infinity,
  ...props
}, forwardRef56) => {
  const {
    size,
    viewport
  } = useThree();
  const fbo = useFBO((width || size.width) * viewport.dpr, (height || size.height) * viewport.dpr, {
    samples
  });
  const [vScene] = React94.useState(() => new Scene());
  const compute = React94.useCallback((event, state, previous) => {
    var _fbo$texture, _previous$previousRoo;
    let parent = (_fbo$texture = fbo.texture) == null ? void 0 : _fbo$texture.__r3f.parent;
    while (parent && !(parent instanceof Object3D)) {
      parent = parent.__r3f.parent;
    }
    if (!parent)
      return false;
    if (!previous.raycaster.camera)
      previous.events.compute(event, previous, (_previous$previousRoo = previous.previousRoot) == null ? void 0 : _previous$previousRoo.getState());
    const [intersection3] = previous.raycaster.intersectObject(parent);
    if (!intersection3)
      return false;
    const uv = intersection3.uv;
    if (!uv)
      return false;
    state.raycaster.setFromCamera(state.pointer.set(uv.x * 2 - 1, uv.y * 2 - 1), state.camera);
  }, []);
  React94.useImperativeHandle(forwardRef56, () => fbo.texture, [fbo]);
  return React94.createElement(React94.Fragment, null, createPortal(React94.createElement(Container, {
    renderPriority,
    frames,
    fbo
  }, children), vScene, {
    events: {
      compute,
      priority: eventPriority
    }
  }), React94.createElement("primitive", _extends({
    object: fbo.texture
  }, props)));
});
function Container({
  frames,
  renderPriority,
  children,
  fbo
}) {
  let count = 0;
  useFrame((state) => {
    if (frames === Infinity || count < frames) {
      state.gl.setRenderTarget(fbo);
      state.gl.render(state.scene, state.camera);
      state.gl.setRenderTarget(null);
      count++;
    }
  }, renderPriority);
  return React94.createElement(React94.Fragment, null, children);
}

// node_modules/@react-three/drei/core/Mask.js
var React95 = __toESM(require_react());
function Mask({
  id = 1,
  children,
  colorWrite = false,
  depthWrite = false,
  ...props
}) {
  const spread = React95.useMemo(() => ({
    colorWrite,
    depthWrite,
    stencilWrite: true,
    stencilRef: id,
    stencilFunc: AlwaysStencilFunc,
    stencilFail: ReplaceStencilOp,
    stencilZFail: ReplaceStencilOp,
    stencilZPass: ReplaceStencilOp
  }), [id, colorWrite, depthWrite]);
  return React95.createElement("mesh", _extends({
    renderOrder: -id
  }, props), React95.createElement("meshBasicMaterial", spread), typeof children === "function" ? children(spread) : children);
}
function useMask(id, inverse = false) {
  return {
    stencilWrite: true,
    stencilRef: id,
    stencilFunc: inverse ? NotEqualStencilFunc : EqualStencilFunc,
    stencilFail: KeepStencilOp,
    stencilZFail: KeepStencilOp,
    stencilZPass: KeepStencilOp
  };
}

// node_modules/@react-three/drei/core/Hud.js
var React96 = __toESM(require_react());
function RenderHud({
  defaultScene,
  defaultCamera,
  renderPriority = 1
}) {
  const {
    gl,
    scene,
    camera
  } = useThree();
  useFrame(() => {
    if (renderPriority === 1) {
      gl.autoClear = true;
      gl.render(defaultScene, defaultCamera);
    }
    gl.autoClear = false;
    gl.clearDepth();
    gl.render(scene, camera);
  }, renderPriority);
  return React96.createElement(React96.Fragment, null);
}
function Hud({
  children,
  renderPriority = 1
}) {
  const {
    scene: defaultScene,
    camera: defaultCamera
  } = useThree();
  const [hudScene] = React96.useState(() => new Scene());
  return React96.createElement(React96.Fragment, null, createPortal(React96.createElement(React96.Fragment, null, children, React96.createElement(RenderHud, {
    defaultScene,
    defaultCamera,
    renderPriority
  })), hudScene, {
    events: {
      priority: renderPriority + 1
    }
  }));
}

// node_modules/@react-three/drei/web/View.js
var React97 = __toESM(require_react());
var isOrthographicCamera = (def) => def && def.isOrthographicCamera;
var col = new Color();
function isNonLegacyCanvasSize(size) {
  return "top" in size;
}
function computeContainerPosition(canvasSize, trackRect) {
  const {
    right,
    top,
    left: trackLeft,
    bottom: trackBottom,
    width,
    height
  } = trackRect;
  const isOffscreen = trackRect.bottom < 0 || top > canvasSize.height || right < 0 || trackRect.left > canvasSize.width;
  if (isNonLegacyCanvasSize(canvasSize)) {
    const canvasBottom = canvasSize.top + canvasSize.height;
    const bottom2 = canvasBottom - trackBottom;
    const left = trackLeft - canvasSize.left;
    return {
      position: {
        width,
        height,
        left,
        top,
        bottom: bottom2,
        right
      },
      isOffscreen
    };
  }
  const bottom = canvasSize.height - trackBottom;
  return {
    position: {
      width,
      height,
      top,
      left: trackLeft,
      bottom,
      right
    },
    isOffscreen
  };
}
function Container2({
  canvasSize,
  scene,
  index,
  children,
  frames,
  rect,
  track
}) {
  const get = useThree((state) => state.get);
  const camera = useThree((state) => state.camera);
  const virtualScene = useThree((state) => state.scene);
  const setEvents = useThree((state) => state.setEvents);
  let frameCount = 0;
  useFrame((state) => {
    if (frames === Infinity || frameCount <= frames) {
      var _track$current;
      rect.current = (_track$current = track.current) == null ? void 0 : _track$current.getBoundingClientRect();
      frameCount++;
    }
    if (rect.current) {
      const {
        position: {
          left,
          bottom,
          width,
          height
        },
        isOffscreen
      } = computeContainerPosition(canvasSize, rect.current);
      const aspect = width / height;
      if (isOrthographicCamera(camera)) {
        if (camera.left !== width / -2 || camera.right !== width / 2 || camera.top !== height / 2 || camera.bottom !== height / -2) {
          Object.assign(camera, {
            left: width / -2,
            right: width / 2,
            top: height / 2,
            bottom: height / -2
          });
          camera.updateProjectionMatrix();
        }
      } else if (camera.aspect !== aspect) {
        camera.aspect = aspect;
        camera.updateProjectionMatrix();
      }
      state.gl.setViewport(left, bottom, width, height);
      state.gl.setScissor(left, bottom, width, height);
      state.gl.setScissorTest(true);
      if (isOffscreen) {
        state.gl.getClearColor(col);
        state.gl.setClearColor(col, state.gl.getClearAlpha());
        state.gl.clear(true, true);
        return;
      }
      state.gl.render(children ? virtualScene : scene, camera);
    }
  }, index);
  React97.useEffect(() => {
    const old = get().events.connected;
    setEvents({
      connected: track.current
    });
    return () => setEvents({
      connected: old
    });
  }, []);
  React97.useEffect(() => {
    if (isNonLegacyCanvasSize(canvasSize)) {
      return;
    }
    console.warn("Detected @react-three/fiber canvas size does not include position information. <View /> may not work as expected. Upgrade to @react-three/fiber ^8.1.0 for support.\n See https://github.com/pmndrs/drei/issues/944");
  }, []);
  return React97.createElement(React97.Fragment, null, children);
}
var View = ({
  track,
  index = 1,
  frames = Infinity,
  children
}) => {
  const rect = React97.useRef(null);
  const {
    size,
    scene
  } = useThree();
  const [virtualScene] = React97.useState(() => new Scene());
  const compute = React97.useCallback((event, state) => {
    if (track.current && event.target === track.current) {
      const {
        width,
        height,
        left,
        top
      } = rect.current;
      const x = event.clientX - left;
      const y = event.clientY - top;
      state.pointer.set(x / width * 2 - 1, -(y / height) * 2 + 1);
      state.raycaster.setFromCamera(state.pointer, state.camera);
    }
  }, [rect]);
  const [ready, toggle] = React97.useReducer(() => true, false);
  React97.useEffect(() => {
    var _track$current2;
    rect.current = (_track$current2 = track.current) == null ? void 0 : _track$current2.getBoundingClientRect();
    toggle();
  }, []);
  return React97.createElement(React97.Fragment, null, ready && createPortal(React97.createElement(Container2, {
    canvasSize: size,
    frames,
    scene,
    track,
    rect,
    index
  }, children), virtualScene, {
    events: {
      compute,
      priority: index
    },
    size: {
      width: rect.current.width,
      height: rect.current.height
    }
  }));
};

// node_modules/@react-three/drei/web/pivotControls/index.js
var React102 = __toESM(require_react());

// node_modules/@react-three/drei/web/pivotControls/AxisArrow.js
var React99 = __toESM(require_react());

// node_modules/@react-three/drei/web/pivotControls/context.js
var React98 = __toESM(require_react());
var context9 = React98.createContext(null);

// node_modules/@react-three/drei/web/pivotControls/AxisArrow.js
var vec1 = new Vector3();
var vec2 = new Vector3();
var calculateOffset = (clickPoint, normal, rayStart, rayDir) => {
  const e1 = normal.dot(normal);
  const e2 = normal.dot(clickPoint) - normal.dot(rayStart);
  const e3 = normal.dot(rayDir);
  if (e3 === 0) {
    return -e2 / e1;
  }
  vec1.copy(rayDir).multiplyScalar(e1 / e3).sub(normal);
  vec2.copy(rayDir).multiplyScalar(e2 / e3).add(rayStart).sub(clickPoint);
  const offset = -vec1.dot(vec2) / vec1.dot(vec1);
  return offset;
};
var upV = new Vector3(0, 1, 0);
var offsetMatrix = new Matrix4();
var AxisArrow = ({
  direction,
  axis
}) => {
  const {
    translation: translation2,
    translationLimits,
    annotationsClass,
    depthTest,
    scale: scale2,
    lineWidth,
    fixed,
    axisColors,
    hoveredColor,
    displayValues,
    opacity,
    onDragStart,
    onDrag,
    onDragEnd,
    userData
  } = React99.useContext(context9);
  const camControls = useThree((state) => state.controls);
  const divRef = React99.useRef(null);
  const objRef = React99.useRef(null);
  const clickInfo = React99.useRef(null);
  const offset0 = React99.useRef(0);
  const [isHovered, setIsHovered] = React99.useState(false);
  const onPointerDown = React99.useCallback((e) => {
    if (displayValues) {
      divRef.current.innerText = `${translation2.current[axis].toFixed(2)}`;
      divRef.current.style.display = "block";
    }
    e.stopPropagation();
    const rotation2 = new Matrix4().extractRotation(objRef.current.matrixWorld);
    const clickPoint = e.point.clone();
    const origin = new Vector3().setFromMatrixPosition(objRef.current.matrixWorld);
    const dir = direction.clone().applyMatrix4(rotation2).normalize();
    clickInfo.current = {
      clickPoint,
      dir
    };
    offset0.current = translation2.current[axis];
    onDragStart({
      component: "Arrow",
      axis,
      origin,
      directions: [dir]
    });
    camControls && (camControls.enabled = false);
    e.target.setPointerCapture(e.pointerId);
  }, [direction, camControls, onDragStart, translation2, axis]);
  const onPointerMove = React99.useCallback((e) => {
    e.stopPropagation();
    if (!isHovered)
      setIsHovered(true);
    if (clickInfo.current) {
      const {
        clickPoint,
        dir
      } = clickInfo.current;
      const [min, max] = (translationLimits == null ? void 0 : translationLimits[axis]) || [void 0, void 0];
      let offset = calculateOffset(clickPoint, dir, e.ray.origin, e.ray.direction);
      if (min !== void 0) {
        offset = Math.max(offset, min - offset0.current);
      }
      if (max !== void 0) {
        offset = Math.min(offset, max - offset0.current);
      }
      translation2.current[axis] = offset0.current + offset;
      if (displayValues) {
        divRef.current.innerText = `${translation2.current[axis].toFixed(2)}`;
      }
      offsetMatrix.makeTranslation(dir.x * offset, dir.y * offset, dir.z * offset);
      onDrag(offsetMatrix);
    }
  }, [onDrag, isHovered, translation2, translationLimits, axis]);
  const onPointerUp = React99.useCallback((e) => {
    if (displayValues) {
      divRef.current.style.display = "none";
    }
    e.stopPropagation();
    clickInfo.current = null;
    onDragEnd();
    camControls && (camControls.enabled = true);
    e.target.releasePointerCapture(e.pointerId);
  }, [camControls, onDragEnd]);
  const onPointerOut = React99.useCallback((e) => {
    e.stopPropagation();
    setIsHovered(false);
  }, []);
  const {
    cylinderLength,
    coneWidth,
    coneLength,
    matrixL
  } = React99.useMemo(() => {
    const coneWidth2 = fixed ? lineWidth / scale2 * 1.6 : scale2 / 20;
    const coneLength2 = fixed ? 0.2 : scale2 / 5;
    const cylinderLength2 = fixed ? 1 - coneLength2 : scale2 - coneLength2;
    const quaternion = new Quaternion().setFromUnitVectors(upV, direction.clone().normalize());
    const matrixL2 = new Matrix4().makeRotationFromQuaternion(quaternion);
    return {
      cylinderLength: cylinderLength2,
      coneWidth: coneWidth2,
      coneLength: coneLength2,
      matrixL: matrixL2
    };
  }, [direction, scale2, lineWidth, fixed]);
  const color_ = isHovered ? hoveredColor : axisColors[axis];
  return React99.createElement("group", {
    ref: objRef
  }, React99.createElement("group", {
    matrix: matrixL,
    matrixAutoUpdate: false,
    onPointerDown,
    onPointerMove,
    onPointerUp,
    onPointerOut
  }, React99.createElement(Html, {
    position: [0, -coneLength, 0]
  }, React99.createElement("div", {
    style: {
      display: "none",
      background: "#151520",
      color: "white",
      padding: "6px 8px",
      borderRadius: 7,
      whiteSpace: "nowrap"
    },
    className: annotationsClass,
    ref: divRef
  })), React99.createElement("mesh", {
    visible: false,
    position: [0, (cylinderLength + coneLength) / 2, 0],
    userData
  }, React99.createElement("cylinderGeometry", {
    args: [coneWidth * 1.4, coneWidth * 1.4, cylinderLength + coneLength, 8, 1]
  })), React99.createElement(Line, {
    transparent: true,
    raycast: () => null,
    depthTest,
    points: [0, 0, 0, 0, cylinderLength, 0],
    lineWidth,
    color: color_,
    opacity,
    polygonOffset: true,
    renderOrder: 1,
    polygonOffsetFactor: -10
  }), React99.createElement("mesh", {
    raycast: () => null,
    position: [0, cylinderLength + coneLength / 2, 0],
    renderOrder: 500
  }, React99.createElement("coneGeometry", {
    args: [coneWidth, coneLength, 24, 1]
  }), React99.createElement("meshBasicMaterial", {
    transparent: true,
    depthTest,
    color: color_,
    opacity,
    polygonOffset: true,
    polygonOffsetFactor: -10
  }))));
};

// node_modules/@react-three/drei/web/pivotControls/PlaneSlider.js
var React100 = __toESM(require_react());
var decomposeIntoBasis = (e1, e2, offset) => {
  const i1 = Math.abs(e1.x) >= Math.abs(e1.y) && Math.abs(e1.x) >= Math.abs(e1.z) ? 0 : Math.abs(e1.y) >= Math.abs(e1.x) && Math.abs(e1.y) >= Math.abs(e1.z) ? 1 : 2;
  const e2DegrowthOrder = [0, 1, 2].sort((a, b) => Math.abs(e2.getComponent(b)) - Math.abs(e2.getComponent(a)));
  const i2 = i1 === e2DegrowthOrder[0] ? e2DegrowthOrder[1] : e2DegrowthOrder[0];
  const a1 = e1.getComponent(i1);
  const a2 = e1.getComponent(i2);
  const b1 = e2.getComponent(i1);
  const b2 = e2.getComponent(i2);
  const c1 = offset.getComponent(i1);
  const c2 = offset.getComponent(i2);
  const y = (c2 - c1 * (a2 / a1)) / (b2 - b1 * (a2 / a1));
  const x = (c1 - y * b1) / a1;
  return [x, y];
};
var ray2 = new Ray();
var intersection = new Vector3();
var offsetMatrix2 = new Matrix4();
var PlaneSlider = ({
  dir1,
  dir2,
  axis
}) => {
  const {
    translation: translation2,
    translationLimits,
    annotationsClass,
    depthTest,
    scale: scale2,
    lineWidth,
    fixed,
    axisColors,
    hoveredColor,
    displayValues,
    opacity,
    onDragStart,
    onDrag,
    onDragEnd,
    userData
  } = React100.useContext(context9);
  const camControls = useThree((state) => state.controls);
  const divRef = React100.useRef(null);
  const objRef = React100.useRef(null);
  const clickInfo = React100.useRef(null);
  const offsetX0 = React100.useRef(0);
  const offsetY0 = React100.useRef(0);
  const [isHovered, setIsHovered] = React100.useState(false);
  const onPointerDown = React100.useCallback((e) => {
    if (displayValues) {
      divRef.current.innerText = `${translation2.current[(axis + 1) % 3].toFixed(2)}, ${translation2.current[(axis + 2) % 3].toFixed(2)}`;
      divRef.current.style.display = "block";
    }
    e.stopPropagation();
    const clickPoint = e.point.clone();
    const origin = new Vector3().setFromMatrixPosition(objRef.current.matrixWorld);
    const e1 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();
    const e2 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();
    const normal = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();
    const plane = new Plane().setFromNormalAndCoplanarPoint(normal, origin);
    clickInfo.current = {
      clickPoint,
      e1,
      e2,
      plane
    };
    offsetX0.current = translation2.current[(axis + 1) % 3];
    offsetY0.current = translation2.current[(axis + 2) % 3];
    onDragStart({
      component: "Slider",
      axis,
      origin,
      directions: [e1, e2, normal]
    });
    camControls && (camControls.enabled = false);
    e.target.setPointerCapture(e.pointerId);
  }, [camControls, onDragStart, axis]);
  const onPointerMove = React100.useCallback((e) => {
    e.stopPropagation();
    if (!isHovered)
      setIsHovered(true);
    if (clickInfo.current) {
      const {
        clickPoint,
        e1,
        e2,
        plane
      } = clickInfo.current;
      const [minX, maxX] = (translationLimits == null ? void 0 : translationLimits[(axis + 1) % 3]) || [void 0, void 0];
      const [minY, maxY] = (translationLimits == null ? void 0 : translationLimits[(axis + 2) % 3]) || [void 0, void 0];
      ray2.copy(e.ray);
      ray2.intersectPlane(plane, intersection);
      ray2.direction.negate();
      ray2.intersectPlane(plane, intersection);
      intersection.sub(clickPoint);
      let [offsetX, offsetY] = decomposeIntoBasis(e1, e2, intersection);
      if (minX !== void 0) {
        offsetX = Math.max(offsetX, minX - offsetX0.current);
      }
      if (maxX !== void 0) {
        offsetX = Math.min(offsetX, maxX - offsetX0.current);
      }
      if (minY !== void 0) {
        offsetY = Math.max(offsetY, minY - offsetY0.current);
      }
      if (maxY !== void 0) {
        offsetY = Math.min(offsetY, maxY - offsetY0.current);
      }
      translation2.current[(axis + 1) % 3] = offsetX0.current + offsetX;
      translation2.current[(axis + 2) % 3] = offsetY0.current + offsetY;
      if (displayValues) {
        divRef.current.innerText = `${translation2.current[(axis + 1) % 3].toFixed(2)}, ${translation2.current[(axis + 2) % 3].toFixed(2)}`;
      }
      offsetMatrix2.makeTranslation(offsetX * e1.x + offsetY * e2.x, offsetX * e1.y + offsetY * e2.y, offsetX * e1.z + offsetY * e2.z);
      onDrag(offsetMatrix2);
    }
  }, [onDrag, isHovered, translation2, translationLimits, axis]);
  const onPointerUp = React100.useCallback((e) => {
    if (displayValues) {
      divRef.current.style.display = "none";
    }
    e.stopPropagation();
    clickInfo.current = null;
    onDragEnd();
    camControls && (camControls.enabled = true);
    e.target.releasePointerCapture(e.pointerId);
  }, [camControls, onDragEnd]);
  const onPointerOut = React100.useCallback((e) => {
    e.stopPropagation();
    setIsHovered(false);
  }, []);
  const matrixL = React100.useMemo(() => {
    const dir1N = dir1.clone().normalize();
    const dir2N = dir2.clone().normalize();
    return new Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));
  }, [dir1, dir2]);
  const pos1 = fixed ? 1 / 7 : scale2 / 7;
  const length = fixed ? 0.225 : scale2 * 0.225;
  const color = isHovered ? hoveredColor : axisColors[axis];
  const points = React100.useMemo(() => [new Vector3(0, 0, 0), new Vector3(0, length, 0), new Vector3(length, length, 0), new Vector3(length, 0, 0), new Vector3(0, 0, 0)], [length]);
  return React100.createElement("group", {
    ref: objRef,
    matrix: matrixL,
    matrixAutoUpdate: false
  }, React100.createElement(Html, {
    position: [0, 0, 0]
  }, React100.createElement("div", {
    style: {
      display: "none",
      background: "#151520",
      color: "white",
      padding: "6px 8px",
      borderRadius: 7,
      whiteSpace: "nowrap"
    },
    className: annotationsClass,
    ref: divRef
  })), React100.createElement("group", {
    position: [pos1 * 1.7, pos1 * 1.7, 0]
  }, React100.createElement("mesh", {
    visible: true,
    onPointerDown,
    onPointerMove,
    onPointerUp,
    onPointerOut,
    scale: length,
    userData
  }, React100.createElement("planeGeometry", null), React100.createElement("meshBasicMaterial", {
    transparent: true,
    depthTest,
    color,
    polygonOffset: true,
    polygonOffsetFactor: -10,
    side: DoubleSide
  })), React100.createElement(Line, {
    position: [-length / 2, -length / 2, 0],
    transparent: true,
    depthTest,
    points,
    lineWidth,
    color,
    opacity,
    polygonOffset: true,
    polygonOffsetFactor: -10,
    userData
  })));
};

// node_modules/@react-three/drei/web/pivotControls/AxisRotator.js
var React101 = __toESM(require_react());
var import_lodash4 = __toESM(require_lodash3());
var clickDir = new Vector3();
var intersectionDir = new Vector3();
var toDegrees = (radians) => radians * 180 / Math.PI;
var toRadians = (degrees) => degrees * Math.PI / 180;
var calculateAngle = (clickPoint, intersectionPoint2, origin, e1, e2) => {
  clickDir.copy(clickPoint).sub(origin);
  intersectionDir.copy(intersectionPoint2).sub(origin);
  const dote1e1 = e1.dot(e1);
  const dote2e2 = e2.dot(e2);
  const uClick = clickDir.dot(e1) / dote1e1;
  const vClick = clickDir.dot(e2) / dote2e2;
  const uIntersection = intersectionDir.dot(e1) / dote1e1;
  const vIntersection = intersectionDir.dot(e2) / dote2e2;
  const angleClick = Math.atan2(vClick, uClick);
  const angleIntersection = Math.atan2(vIntersection, uIntersection);
  return angleIntersection - angleClick;
};
var fmod = (num, denom) => {
  let k = Math.floor(num / denom);
  k = k < 0 ? k + 1 : k;
  return num - k * denom;
};
var minimizeAngle = (angle) => {
  let result = fmod(angle, 2 * Math.PI);
  if (Math.abs(result) < 1e-6) {
    return 0;
  }
  if (result < 0) {
    result += 2 * Math.PI;
  }
  return result;
};
var rotMatrix = new Matrix4();
var posNew = new Vector3();
var ray3 = new Ray();
var intersection2 = new Vector3();
var AxisRotator = ({
  dir1,
  dir2,
  axis
}) => {
  const {
    rotationLimits,
    annotationsClass,
    depthTest,
    scale: scale2,
    lineWidth,
    fixed,
    axisColors,
    hoveredColor,
    displayValues,
    opacity,
    onDragStart,
    onDrag,
    onDragEnd,
    userData
  } = React101.useContext(context9);
  const camControls = useThree((state) => state.controls);
  const divRef = React101.useRef(null);
  const objRef = React101.useRef(null);
  const angle0 = React101.useRef(0);
  const angle = React101.useRef(0);
  const clickInfo = React101.useRef(null);
  const [isHovered, setIsHovered] = React101.useState(false);
  const onPointerDown = React101.useCallback((e) => {
    if (displayValues) {
      divRef.current.innerText = `${toDegrees(angle.current).toFixed(0)}º`;
      divRef.current.style.display = "block";
    }
    e.stopPropagation();
    const clickPoint = e.point.clone();
    const origin = new Vector3().setFromMatrixPosition(objRef.current.matrixWorld);
    const e1 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();
    const e2 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();
    const normal = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();
    const plane = new Plane().setFromNormalAndCoplanarPoint(normal, origin);
    clickInfo.current = {
      clickPoint,
      origin,
      e1,
      e2,
      normal,
      plane
    };
    onDragStart({
      component: "Rotator",
      axis,
      origin,
      directions: [e1, e2, normal]
    });
    camControls && (camControls.enabled = false);
    e.target.setPointerCapture(e.pointerId);
  }, [camControls, onDragStart, axis]);
  const onPointerMove = React101.useCallback((e) => {
    e.stopPropagation();
    if (!isHovered)
      setIsHovered(true);
    if (clickInfo.current) {
      const {
        clickPoint,
        origin,
        e1,
        e2,
        normal,
        plane
      } = clickInfo.current;
      const [min, max] = (rotationLimits == null ? void 0 : rotationLimits[axis]) || [void 0, void 0];
      ray3.copy(e.ray);
      ray3.intersectPlane(plane, intersection2);
      ray3.direction.negate();
      ray3.intersectPlane(plane, intersection2);
      let deltaAngle = calculateAngle(clickPoint, intersection2, origin, e1, e2);
      let degrees = toDegrees(deltaAngle);
      if (e.shiftKey) {
        degrees = Math.round(degrees / 10) * 10;
        deltaAngle = toRadians(degrees);
      }
      if (min !== void 0 && max !== void 0 && max - min < 2 * Math.PI) {
        deltaAngle = minimizeAngle(deltaAngle);
        deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle;
        deltaAngle = (0, import_lodash4.default)(deltaAngle, min - angle0.current, max - angle0.current);
        angle.current = angle0.current + deltaAngle;
      } else {
        angle.current = minimizeAngle(angle0.current + deltaAngle);
        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;
      }
      if (displayValues) {
        degrees = toDegrees(angle.current);
        divRef.current.innerText = `${degrees.toFixed(0)}º`;
      }
      rotMatrix.makeRotationAxis(normal, deltaAngle);
      posNew.copy(origin).applyMatrix4(rotMatrix).sub(origin).negate();
      rotMatrix.setPosition(posNew);
      onDrag(rotMatrix);
    }
  }, [onDrag, isHovered, rotationLimits, axis]);
  const onPointerUp = React101.useCallback((e) => {
    if (displayValues) {
      divRef.current.style.display = "none";
    }
    e.stopPropagation();
    angle0.current = angle.current;
    clickInfo.current = null;
    onDragEnd();
    camControls && (camControls.enabled = true);
    e.target.releasePointerCapture(e.pointerId);
  }, [camControls, onDragEnd]);
  const onPointerOut = React101.useCallback((e) => {
    e.stopPropagation();
    setIsHovered(false);
  }, []);
  const matrixL = React101.useMemo(() => {
    const dir1N = dir1.clone().normalize();
    const dir2N = dir2.clone().normalize();
    return new Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));
  }, [dir1, dir2]);
  const r = fixed ? 0.65 : scale2 * 0.65;
  const arc = React101.useMemo(() => {
    const segments = 32;
    const points = [];
    for (let j = 0; j <= segments; j++) {
      const angle2 = j * (Math.PI / 2) / segments;
      points.push(new Vector3(Math.cos(angle2) * r, Math.sin(angle2) * r, 0));
    }
    return points;
  }, [r]);
  return React101.createElement("group", {
    ref: objRef,
    onPointerDown,
    onPointerMove,
    onPointerUp,
    onPointerOut,
    matrix: matrixL,
    matrixAutoUpdate: false
  }, React101.createElement(Html, {
    position: [r, r, 0]
  }, React101.createElement("div", {
    style: {
      display: "none",
      background: "#151520",
      color: "white",
      padding: "6px 8px",
      borderRadius: 7,
      whiteSpace: "nowrap"
    },
    className: annotationsClass,
    ref: divRef
  })), React101.createElement(Line, {
    points: arc,
    lineWidth: lineWidth * 4,
    visible: false,
    userData
  }), React101.createElement(Line, {
    transparent: true,
    raycast: () => null,
    depthTest,
    points: arc,
    lineWidth,
    color: isHovered ? hoveredColor : axisColors[axis],
    opacity,
    polygonOffset: true,
    polygonOffsetFactor: -10
  }));
};

// node_modules/@react-three/drei/web/pivotControls/index.js
var tV0 = new Vector3();
var tV1 = new Vector3();
var tV2 = new Vector3();
var getPoint2 = (point3, camera, size) => {
  const widthHalf = size.width / 2;
  const heightHalf = size.height / 2;
  camera.updateMatrixWorld(false);
  const vector = point3.project(camera);
  vector.x = vector.x * widthHalf + widthHalf;
  vector.y = -(vector.y * heightHalf) + heightHalf;
  return vector;
};
var getPoint3 = (point2, camera, size, zValue = 1) => {
  const vector = tV0.set(point2.x / size.width * 2 - 1, -(point2.y / size.height) * 2 + 1, zValue);
  vector.unproject(camera);
  return vector;
};
var calculateScaleFactor = (point3, radiusPx, camera, size) => {
  const point2 = getPoint2(tV2.copy(point3), camera, size);
  let scale2 = 0;
  for (let i2 = 0; i2 < 2; ++i2) {
    const point2off = tV1.copy(point2).setComponent(i2, point2.getComponent(i2) + radiusPx);
    const point3off = getPoint3(point2off, camera, size, point2off.z);
    scale2 = Math.max(scale2, point3.distanceTo(point3off));
  }
  return scale2;
};
var mL0 = new Matrix4();
var mW0 = new Matrix4();
var mP = new Matrix4();
var mPInv = new Matrix4();
var mW = new Matrix4();
var mL = new Matrix4();
var mL0Inv = new Matrix4();
var mdL = new Matrix4();
var bb = new Box3();
var bbObj = new Box3();
var vCenter = new Vector3();
var vSize = new Vector3();
var vAnchorOffset = new Vector3();
var vPosition = new Vector3();
var xDir = new Vector3(1, 0, 0);
var yDir = new Vector3(0, 1, 0);
var zDir = new Vector3(0, 0, 1);
var PivotControls = React102.forwardRef(({
  matrix: matrix2,
  onDragStart,
  onDrag,
  onDragEnd,
  autoTransform = true,
  anchor,
  disableAxes = false,
  disableSliders = false,
  disableRotations = false,
  activeAxes = [true, true, true],
  offset = [0, 0, 0],
  rotation: rotation2 = [0, 0, 0],
  scale: scale2 = 1,
  lineWidth = 4,
  fixed = false,
  translationLimits,
  rotationLimits,
  depthTest = true,
  axisColors = ["#ff2060", "#20df80", "#2080ff"],
  hoveredColor = "#ffff40",
  displayValues = true,
  annotationsClass,
  opacity = 1,
  visible = true,
  userData,
  children
}, fRef) => {
  const invalidate = useThree((state) => state.invalidate);
  const parentRef = React102.useRef(null);
  const ref = React102.useRef(null);
  const gizmoRef = React102.useRef(null);
  const childrenRef = React102.useRef(null);
  const translation2 = React102.useRef([0, 0, 0]);
  React102.useLayoutEffect(() => {
    if (!anchor)
      return;
    childrenRef.current.updateWorldMatrix(true, true);
    mPInv.copy(childrenRef.current.matrixWorld).invert();
    bb.makeEmpty();
    childrenRef.current.traverse((obj) => {
      if (!obj.geometry)
        return;
      if (!obj.geometry.boundingBox)
        obj.geometry.computeBoundingBox();
      mL.copy(obj.matrixWorld).premultiply(mPInv);
      bbObj.copy(obj.geometry.boundingBox);
      bbObj.applyMatrix4(mL);
      bb.union(bbObj);
    });
    vCenter.copy(bb.max).add(bb.min).multiplyScalar(0.5);
    vSize.copy(bb.max).sub(bb.min).multiplyScalar(0.5);
    vAnchorOffset.copy(vSize).multiply(new Vector3(...anchor)).add(vCenter);
    vPosition.set(...offset).add(vAnchorOffset);
    gizmoRef.current.position.copy(vPosition);
    invalidate();
  });
  const config = React102.useMemo(() => ({
    onDragStart: (props) => {
      mL0.copy(ref.current.matrix);
      mW0.copy(ref.current.matrixWorld);
      onDragStart && onDragStart(props);
      invalidate();
    },
    onDrag: (mdW) => {
      mP.copy(parentRef.current.matrixWorld);
      mPInv.copy(mP).invert();
      mW.copy(mW0).premultiply(mdW);
      mL.copy(mW).premultiply(mPInv);
      mL0Inv.copy(mL0).invert();
      mdL.copy(mL).multiply(mL0Inv);
      if (autoTransform)
        ref.current.matrix.copy(mL);
      onDrag && onDrag(mL, mdL, mW, mdW);
      invalidate();
    },
    onDragEnd: () => {
      if (onDragEnd)
        onDragEnd();
      invalidate();
    },
    translation: translation2,
    translationLimits,
    rotationLimits,
    axisColors,
    hoveredColor,
    opacity,
    scale: scale2,
    lineWidth,
    fixed,
    displayValues,
    depthTest,
    userData,
    annotationsClass
  }), [onDragStart, onDrag, onDragEnd, translation2, translationLimits, rotationLimits, depthTest, scale2, lineWidth, fixed, ...axisColors, hoveredColor, opacity, displayValues, userData, autoTransform, annotationsClass]);
  const vec = new Vector3();
  useFrame((state) => {
    if (fixed) {
      const sf = calculateScaleFactor(gizmoRef.current.getWorldPosition(vec), scale2, state.camera, state.size);
      if (gizmoRef.current) {
        var _gizmoRef$current, _gizmoRef$current2, _gizmoRef$current3;
        if (((_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.scale.x) !== sf || ((_gizmoRef$current2 = gizmoRef.current) == null ? void 0 : _gizmoRef$current2.scale.y) !== sf || ((_gizmoRef$current3 = gizmoRef.current) == null ? void 0 : _gizmoRef$current3.scale.z) !== sf) {
          gizmoRef.current.scale.setScalar(sf);
          state.invalidate();
        }
      }
    }
  });
  React102.useImperativeHandle(fRef, () => ref.current, []);
  return React102.createElement(context9.Provider, {
    value: config
  }, React102.createElement("group", {
    ref: parentRef
  }, React102.createElement("group", {
    ref,
    matrix: matrix2,
    matrixAutoUpdate: false
  }, React102.createElement("group", {
    visible,
    ref: gizmoRef,
    position: offset,
    rotation: rotation2
  }, !disableAxes && activeAxes[0] && React102.createElement(AxisArrow, {
    axis: 0,
    direction: xDir
  }), !disableAxes && activeAxes[1] && React102.createElement(AxisArrow, {
    axis: 1,
    direction: yDir
  }), !disableAxes && activeAxes[2] && React102.createElement(AxisArrow, {
    axis: 2,
    direction: zDir
  }), !disableSliders && activeAxes[0] && activeAxes[1] && React102.createElement(PlaneSlider, {
    axis: 2,
    dir1: xDir,
    dir2: yDir
  }), !disableSliders && activeAxes[0] && activeAxes[2] && React102.createElement(PlaneSlider, {
    axis: 1,
    dir1: zDir,
    dir2: xDir
  }), !disableSliders && activeAxes[2] && activeAxes[1] && React102.createElement(PlaneSlider, {
    axis: 0,
    dir1: yDir,
    dir2: zDir
  }), !disableRotations && activeAxes[0] && activeAxes[1] && React102.createElement(AxisRotator, {
    axis: 2,
    dir1: xDir,
    dir2: yDir
  }), !disableRotations && activeAxes[0] && activeAxes[2] && React102.createElement(AxisRotator, {
    axis: 1,
    dir1: zDir,
    dir2: xDir
  }), !disableRotations && activeAxes[2] && activeAxes[1] && React102.createElement(AxisRotator, {
    axis: 0,
    dir1: yDir,
    dir2: zDir
  })), React102.createElement("group", {
    ref: childrenRef
  }, children))));
});
export {
  AccumulativeShadows,
  AdaptiveDpr,
  AdaptiveEvents,
  ArcballControls2 as ArcballControls,
  AsciiRenderer,
  BBAnchor,
  Backdrop,
  BakeShadows,
  Billboard,
  Bounds,
  Box,
  CameraShake,
  Capsule,
  CatmullRomLine,
  Center,
  Circle,
  Clone,
  Cloud,
  ComputedAttribute,
  Cone,
  ContactShadows,
  CubeCamera2 as CubeCamera,
  CubicBezierLine,
  CurveModifier,
  CycleRaycast,
  Cylinder,
  Decal,
  Detailed,
  DeviceOrientationControls2 as DeviceOrientationControls,
  Dodecahedron,
  Edges,
  Effects,
  Environment,
  EnvironmentCube,
  EnvironmentMap,
  EnvironmentPortal,
  Extrude,
  FirstPersonControls2 as FirstPersonControls,
  Float,
  FlyControls2 as FlyControls,
  GizmoHelper,
  GizmoViewcube,
  GizmoViewport,
  GradientTexture,
  Grid,
  Html,
  Hud,
  Icosahedron,
  Image,
  Instance,
  Instances,
  IsObject,
  KeyboardControls,
  Lathe,
  Lightformer,
  Line,
  Loader,
  MapControls2 as MapControls,
  MarchingCube,
  MarchingCubes2 as MarchingCubes,
  MarchingPlane,
  Mask,
  Merged,
  MeshDistortMaterial,
  MeshReflectorMaterial2 as MeshReflectorMaterial,
  MeshRefractionMaterial2 as MeshRefractionMaterial,
  MeshWobbleMaterial,
  Octahedron,
  OrbitControls2 as OrbitControls,
  OrthographicCamera2 as OrthographicCamera,
  PerformanceMonitor,
  PerspectiveCamera2 as PerspectiveCamera,
  PivotControls,
  Plane2 as Plane,
  Point,
  PointMaterial,
  PointMaterialImpl,
  PointerLockControls2 as PointerLockControls,
  Points,
  PointsBuffer,
  Polyhedron,
  PositionPoint,
  PositionalAudio,
  Preload,
  PresentationControls,
  QuadraticBezierLine,
  RandomizedLight,
  Reflector,
  RenderTexture,
  Ring,
  RoundedBox,
  Sampler,
  ScreenQuad,
  ScreenSpace,
  Scroll,
  ScrollControls,
  Segment,
  SegmentObject,
  Segments,
  Select,
  Shadow,
  Sky2 as Sky,
  Sparkles,
  Sphere2 as Sphere,
  SpotLight,
  SpotLightShadow,
  Stage,
  Stars,
  Stats,
  Svg,
  Tetrahedron,
  Text2 as Text,
  Text3D,
  Torus,
  TorusKnot,
  TrackballControls2 as TrackballControls,
  Trail,
  TransformControls2 as TransformControls,
  Tube,
  View,
  accumulativeContext,
  calcPosFromAngles,
  calculateScaleFactor,
  isWebGL2Available,
  meshBounds,
  shaderMaterial,
  softShadows,
  useAnimations,
  useAspect,
  useBVH,
  useBounds,
  useBoxProjectedEnv,
  useCamera,
  useContextBridge,
  useCubeTexture,
  useCursor,
  useDepthBuffer,
  useDetectGPU,
  useEnvironment,
  useFBO,
  useFBX,
  useGLTF,
  useGizmoContext,
  useHelper,
  useIntersect,
  useKTX2,
  useKeyboardControls,
  useMask,
  useMatcapTexture,
  useNormalTexture,
  usePerformanceMonitor,
  useProgress,
  useScroll,
  useSelect,
  useSurfaceSampler,
  useTexture,
  useTrail,
  useTrailTexture,
  useVideoTexture
};
//# sourceMappingURL=@react-three_drei.js.map
